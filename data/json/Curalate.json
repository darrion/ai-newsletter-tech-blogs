{
  "company": "Curalate",
  "title": "Curalate",
  "xmlUrl": "http://engineering.curalate.com/feed.xml",
  "htmlUrl": "http://engineering.curalate.com/",
  "content": "\n\n\n\n\n\nSafely Modifying Your Hosts File with Gas Mask\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCuralate Home\nAbout\n\n\n\n\n\n\nsubscribe\nRSS\nFeedly\nJoin us\n\n\n\n\n\n\n\n\n\nSafely Modifying Your Hosts File with Gas Mask \u00ac\n\n            May 30, 2019\n            \n                \n                \n                \n                    \u00a0\u2022\u00a0\u00a0Karl Shouler\n\n\n\nSometimes the DNS for a specific domain on your machine needs to point somewhere else \u2013 at Curalate, we test changes microservices locally before shipping them, which could require redirecting requests to look at that local instance. One way to do this is by adding an entry like 127.0.0.1 some.service.curalate.com to /etc/hosts.\nWhy use a hosts file manager?\nIn most cases, it\u2019s not advised to directly modify /etc/hosts. Because it\u2019s buried deep into the filesystem, it\u2019s easy to forget you\u2019ve modified it, which can lead to numerous problems ranging from annoying to dangerous.\nAlso, danger aside, it can begin to get messy and complex if you have a lot of entries to manage. Think of even just fifteen lines you\u2019re constantly commenting/uncommenting to represent the configuration you need at a given moment. This would be insanity.\nGas Mask, a simple UI-based hosts file manager, allows you to set up different hosts files, while making it plainly obvious which hosts file is currently activated on your system via the OS Menu bar.\nInstallation instructions\n\nGo to https://github.com/2ndalpha/gasmask and download the latest version.\nUnpack and install.\nOn first-run, the only hosts file listed will be Original File which is the /etc/hosts file you\u2019ll no longer be modifying.\n\nCreating your first host file\n\nCreate a new hosts file and name it something that makes sense.\nAdd the test entry 127.0.0.1 google.com and save. The format of these entries is <target IP address> <URL or IP to redirect>.\nActivate that hosts file. Gasmask substitutes in this file at /etc/hosts.\nYou may either need to flush your DNS cache or just restart the browser.\nTo test it out, go to google.com in the browser.\nWhat happens now is, when the browser goes to get the IP for google.com, the OS sees the matching entry in your hosts file, then refers to 127.0.0.1 (your local computer) to make the request \u2013 which will fail.\nGo ahead and reactivate your Original File, restart the browser, and you should be able to access google.com as expected.\n\nUse the Menubar icon\nIt\u2019s easy to forget to flip your hosts file back. You\u2019ll end up spending 45 minutes on what you think is a bug, that doesn\u2019t reproduce for anyone else, only to realize your hosts file is sending requests someplace else.\nNext time you reach to modify that hosts file, consider integrating Gas Mask into your development workflow to keep it maintained and safe from unintended state.\n\n\n\n\n\n\n\n                Karl Shouler\n                \n                    is a Software Engineer at Curalate.\n\n                \n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA blog about developing at Curalate. How we handle big data architecture, design for the consumer web, and help our customers get the most out of their imagery.\n\n\n\n\nJoin us\nhello@curalate.com\n\n\n\nFollow Us\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "Safely Modifying Your Hosts File with Gas Mask",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "http://engineering.curalate.com/feed.xml",
      "value": "Safely Modifying Your Hosts File with Gas Mask"
    },
    "summary": "<p>Sometimes the DNS for a specific domain on your machine needs to point somewhere else \u2013 at Curalate, we test changes microservices locally before shipping them, which could require redirecting requests to look at that local instance. One way to do this is by adding an entry like <code class=\"highlighter-rouge\">127.0.0.1 some.service.curalate.com</code> to <code class=\"highlighter-rouge\">/etc/hosts</code>.</p>\n\n<h3 id=\"why-use-a-hosts-file-manager\">Why use a hosts file manager?</h3>\n<p>In most cases, it\u2019s not advised to directly modify <code class=\"highlighter-rouge\">/etc/hosts</code>. Because it\u2019s buried deep into the filesystem, it\u2019s easy to forget you\u2019ve modified it, which can lead to numerous problems ranging from annoying to dangerous.\nAlso, danger aside, it can begin to get messy and complex if you have a lot of entries to manage. Think of even just fifteen lines you\u2019re constantly commenting/uncommenting to represent the configuration you need at a given moment. This would be insanity.\nGas Mask, a simple UI-based hosts file manager, allows you to set up different hosts files, while making it plainly obvious which hosts file is currently activated on your system via the OS Menu bar.</p>\n\n<h3 id=\"installation-instructions\">Installation instructions</h3>\n<ul>\n  <li>Go to <a href=\"https://github.com/2ndalpha/gasmask\">https://github.com/2ndalpha/gasmask</a> and download the latest version.</li>\n  <li>Unpack and install.</li>\n  <li>On first-run, the only hosts file listed will be <code class=\"highlighter-rouge\">Original File</code> which is the <code class=\"highlighter-rouge\">/etc/hosts</code> file you\u2019ll no longer be modifying.</li>\n</ul>\n\n<h3 id=\"creating-your-first-host-file\">Creating your first host file</h3>\n<ul>\n  <li>Create a new hosts file and name it something that makes sense.</li>\n  <li>Add the test entry <code class=\"highlighter-rouge\">127.0.0.1 google.com</code> and save. The format of these entries is <code class=\"highlighter-rouge\">&lt;target IP address&gt; &lt;URL or IP to redirect&gt;</code>.</li>\n  <li>Activate that hosts file. Gasmask substitutes in this file at <code class=\"highlighter-rouge\">/etc/hosts</code>.</li>\n  <li>You may either need to flush your DNS cache or just restart the browser.</li>\n  <li>To test it out, go to google.com in the browser.</li>\n  <li>What happens now is, when the browser goes to get the IP for google.com, the OS sees the matching entry in your hosts file, then refers to <code class=\"highlighter-rouge\">127.0.0.1</code> (your local computer) to make the request \u2013 which will fail.</li>\n  <li>Go ahead and reactivate your Original File, restart the browser, and you should be able to access google.com as expected.</li>\n</ul>\n\n<h3 id=\"use-the-menubar-icon\">Use the Menubar icon</h3>\n<p>It\u2019s easy to forget to flip your hosts file back. You\u2019ll end up spending 45 minutes on what you think is a bug, that doesn\u2019t reproduce for anyone else, only to realize your hosts file is sending requests someplace else.</p>\n\n<p>Next time you reach to modify that hosts file, consider integrating Gas Mask into your development workflow to keep it maintained and safe from unintended state.</p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "http://engineering.curalate.com/feed.xml",
      "value": "<p>Sometimes the DNS for a specific domain on your machine needs to point somewhere else \u2013 at Curalate, we test changes microservices locally before shipping them, which could require redirecting requests to look at that local instance. One way to do this is by adding an entry like <code class=\"highlighter-rouge\">127.0.0.1 some.service.curalate.com</code> to <code class=\"highlighter-rouge\">/etc/hosts</code>.</p>\n\n<h3 id=\"why-use-a-hosts-file-manager\">Why use a hosts file manager?</h3>\n<p>In most cases, it\u2019s not advised to directly modify <code class=\"highlighter-rouge\">/etc/hosts</code>. Because it\u2019s buried deep into the filesystem, it\u2019s easy to forget you\u2019ve modified it, which can lead to numerous problems ranging from annoying to dangerous.\nAlso, danger aside, it can begin to get messy and complex if you have a lot of entries to manage. Think of even just fifteen lines you\u2019re constantly commenting/uncommenting to represent the configuration you need at a given moment. This would be insanity.\nGas Mask, a simple UI-based hosts file manager, allows you to set up different hosts files, while making it plainly obvious which hosts file is currently activated on your system via the OS Menu bar.</p>\n\n<h3 id=\"installation-instructions\">Installation instructions</h3>\n<ul>\n  <li>Go to <a href=\"https://github.com/2ndalpha/gasmask\">https://github.com/2ndalpha/gasmask</a> and download the latest version.</li>\n  <li>Unpack and install.</li>\n  <li>On first-run, the only hosts file listed will be <code class=\"highlighter-rouge\">Original File</code> which is the <code class=\"highlighter-rouge\">/etc/hosts</code> file you\u2019ll no longer be modifying.</li>\n</ul>\n\n<h3 id=\"creating-your-first-host-file\">Creating your first host file</h3>\n<ul>\n  <li>Create a new hosts file and name it something that makes sense.</li>\n  <li>Add the test entry <code class=\"highlighter-rouge\">127.0.0.1 google.com</code> and save. The format of these entries is <code class=\"highlighter-rouge\">&lt;target IP address&gt; &lt;URL or IP to redirect&gt;</code>.</li>\n  <li>Activate that hosts file. Gasmask substitutes in this file at <code class=\"highlighter-rouge\">/etc/hosts</code>.</li>\n  <li>You may either need to flush your DNS cache or just restart the browser.</li>\n  <li>To test it out, go to google.com in the browser.</li>\n  <li>What happens now is, when the browser goes to get the IP for google.com, the OS sees the matching entry in your hosts file, then refers to <code class=\"highlighter-rouge\">127.0.0.1</code> (your local computer) to make the request \u2013 which will fail.</li>\n  <li>Go ahead and reactivate your Original File, restart the browser, and you should be able to access google.com as expected.</li>\n</ul>\n\n<h3 id=\"use-the-menubar-icon\">Use the Menubar icon</h3>\n<p>It\u2019s easy to forget to flip your hosts file back. You\u2019ll end up spending 45 minutes on what you think is a bug, that doesn\u2019t reproduce for anyone else, only to realize your hosts file is sending requests someplace else.</p>\n\n<p>Next time you reach to modify that hosts file, consider integrating Gas Mask into your development workflow to keep it maintained and safe from unintended state.</p>"
    },
    "published": "Thu, 30 May 2019 00:00:00 +0000",
    "published_parsed": [
      2019,
      5,
      30,
      0,
      0,
      0,
      3,
      150,
      0
    ],
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "http://engineering.curalate.com/2019/05/30/gas-mask.html"
      }
    ],
    "link": "http://engineering.curalate.com/2019/05/30/gas-mask.html",
    "id": "http://engineering.curalate.com/2019/05/30/gas-mask.html",
    "guidislink": false
  }
}