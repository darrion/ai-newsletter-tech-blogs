{
  "company": "HackerEarth",
  "title": "HackerEarth",
  "xmlUrl": "http://engineering.hackerearth.com/rss",
  "htmlUrl": "http://engineering.hackerearth.com/",
  "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Computing accurate skill percentile with DDSketch \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n HackerEarth Engineering \nCode is beautiful\n\n\n\n\n\n\n\n\nComputing accurate skill percentile with DDSketch\n17 Sep 2023\nIntroduction\nHackerEarth has lots of candidates getting evaluated on a daily basis. We have a feature that benchmarks candidates across the platform. Benchmarking is the process of creating the profile of the ideal candidate for a position, and then measuring all candidates against that profile.\nTo benchmark candidate skills against our millions of candidates, we decided to move away from our regular cron solution to build a more reliable and accurate data pipeline. To support this, we created a new data ingestion flow and data read flow. We moved away from our deterministic algorithms to probabilistic algorithms with DDSketch.\nProblem\nOur old benchmarking solution was trying to compute the global benchmarking of a candidate on the fly by calculating the solve percentage of the individual skills and returning the geometric mean of all the skill benchmarks. We handle huge volumes of data every day. Analyzing this data itself\u2014for example, calculating a quantile was optimal in terms of resources.\nSolution\nWe came up with a solution that computes an approximate quantile from a compressed representation of that data. We first need to appropriately summarize that data without incurring an excessive loss of fidelity. We do this by creating a sketch. Sketch algorithms generate sketches: smaller, more manageable data structures, from which we can calculate some properties of the original data.\nWe considered various algorithms to accurately compute percentiles on noisy, large-scale, real-time data that we were receiving from candidates\u2019 skill scores. We considered using Tdigest and DDSketch. For our use case, DDSketch served the purpose.We did a POC and compared the accuracy of both the algorithms as shown below to come up with a finalized algorithm.\nPOC results and observations\nWe compared the actual percentile ranges in comparison to the two probabilistic approaches we mentioned(DDSketch and T-DIgest), and these were the results. Note: we have run these tests on the random data samples from the POC point of view.\nInitial sample size: 1000(unbiased)\nNew sample size:  2% of actual samples i.e., 20\n\nactual_percentile_thresholds:  \n{'p99': 99.1, 'p97': 97.56, 'p95': 96.31, 'p90': 91.37, 'p85': 80.44, 'p80': 80.44, 'p75': 75.79, 'p70': 71.27}\npercentile_thresholds_ddsketch:  \n{'p99': 98.5, 'p97': 98.5, 'p95': 96.55, 'p90': 90.93, 'p85': 80.65, 'p80': 80.65, 'p75': 75.95, 'p70': 71.53}\n\n\nDeviation for ddsketch:\n{'p99': 0.61, 'p97': -0.96, 'p95': -0.25, 'p90': 0.48, 'p85': -0.26, 'p80': -0.26, 'p75': -0.21, 'p70': -0.36}\nDeviation for tdigest:\n{'p99': -0.08, 'p97': -0.03, 'p95': 0.0, 'p90': -0.02, 'p85': -0.01, 'p80': -0.01, 'p75': 0.0, 'p70': -0.21}\n\n --------------------------------------------------------------------------------\nInitial sample size: 500(unbiased)\nNew sample size:  2% of actual samples i.e., 10\nactual_percentile_thresholds:  \n{'p99': 99.18, 'p97': 96.88, 'p95': 94.98, 'p90': 90.79, 'p85': 80.95, 'p80': 80.95, 'p75': 75.65, 'p70': 70.55}\npercentile_thresholds_ddsketch:  \n{'p99': 98.5, 'p97': 96.55, 'p95': 94.64, 'p90': 90.93, 'p85': 80.65, 'p80': 80.65, 'p75': 75.95, 'p70': 70.11}\npercentile_thresholds_tdigest:  \n{'p99': 99.33, 'p97': 97.0, 'p95': 94.99, 'p90': 90.84, 'p85': 80.97, 'p80': 80.97, 'p75': 75.83, 'p70': 70.58}\n\n\nDeviation for ddsketch:\n{'p99': 0.69, 'p97': 0.34, 'p95': 0.36, 'p90': -0.15, 'p85': 0.37, 'p80': 0.37, 'p75': -0.4, 'p70': 0.62}\nDeviation for tdigest:\n{'p99': -0.15, 'p97': -0.12, 'p95': -0.01, 'p90': -0.06, 'p85': -0.02, 'p80': -0.02, 'p75': -0.24, 'p70': -0.04}\n\n--------------------------------------------------------------------------------\nInitial sample size: 5000(unbiased)\nactual_percentile_thresholds:  \n{'p99': 99.23, 'p97': 97.25, 'p95': 95.25, 'p90': 90.24, 'p85': 81.05, 'p80': 81.05, 'p75': 76.16, 'p70': 71.07}\npercentile_thresholds_ddsketch:  \n{'p99': 98.5, 'p97': 96.55, 'p95': 94.64, 'p90': 90.93, 'p85': 80.65, 'p80': 80.65, 'p75': 75.95, 'p70': 71.53}\npercentile_thresholds_tdigest:  \n{'p99': 99.23, 'p97': 97.25, 'p95': 95.23, 'p90': 90.24, 'p85': 81.08, 'p80': 81.08, 'p75': 76.1, 'p70': 71.08}\n\n\nDeviation for ddsketch:\n{'p99': 0.74, 'p97': 0.72, 'p95': 0.64, 'p90': -0.76, 'p85': 0.49, 'p80': 0.49, 'p75': 0.28, 'p70': -0.65}\nDeviation for tdigest:\n{'p99': 0.0, 'p97': 0.0, 'p95': 0.02, 'p90': 0.0, 'p85': -0.04, 'p80': -0.04, 'p75': 0.08, 'p70': -0.01}\n\n\nFrom above calculations we can deduce that, the percentile deviation in tdigest is close to actual percentile deviation i.e(< 0.2 %), whereas the percentile deviation in ddsketch is approx (< 0.6 %) which is still very accurate to the actual percentile.\nWe further did a time and space complexity analysis for both the algorithms.Below were the observations.\nSample size: 1000\nTime taken to add samples to sketch(DDSketch): 4.124 ms\nTime taken to add samples to tdigest: 76.15 ms\n\nsample size: 10000\nTime taken to add samples to DDSketch: 27.54 ms\nTime taken to add samples to TDigest: 658.18 ms\n\nsample size: 100000\nTime taken to add samples to DDSketch: 298.89 ms\nTime taken to add samples to TDigest:  7243 ms -> 7.243 sec\n\nBased on the above calculation, we can see that for same sample size (100000) of data DDSketch 298.89 ms to calculate the sketch with deviation of <0.6% from actual percentile and TDigest takes 7.243 sec with 0.2% deviation from actual percentile.\nSerialized object size Comparison:\nAs sketch or digest objects will be stored as serialized files, we also calculated the size of the objects\nSample size: 1000\nSize of serialized DDSketch object: 4127 bytes\nSize of serialized TDigest: 10015 bytes\n\n\nsample size: 10000\nSize of serialized DDSketch object: 5138 bytes\nSize of serialized TDigest: 17496 bytes\n\nsample size: 100000\nSize of serialized DDSketch object: 6224 bytes, at relative accuracy(0.01)\nSize of serialized TDigest: 22049 bytes, at relative accuracy(0.01)\n\nPOC Conclusion\nBased on the above calculation, we can conclude that TDigest gives less deviation to accurate percentiles in comparison to DDSketch, consuming more memory and time. Whereas in our case, we can afford to have accuracy with deviation close to 1%, time and memory plays an important role in faster calculations of sketches.\nHence, we went with the DDSketch algorithm which takes a nominal time and memory for creating sketches.\nData Ingestion Pipeline (Improved Architechture)\nNow that we know that we need to create sketches, we need to create new sketches for every new data point regularly coming from millions of candidates taking tests at our platform. We needed a data ingestion pipeline for updation of these sketches in near real time.\nWe built a data pipeline to update the sketch. Individual candidate skills and scores were stored in dynamo DB. Participation end triggers the data from Dynamo db to the map-reduce flow ;  the candidates skill data is consumed by reducer SQS queue. Reducer lambda takes data in batches of 10000 or 5 mins time intervals and reduces the data to skill-wise scores. These messages are then consumed by the SQS FIFO queue, which groups the data based on problem template and skills. This data is again consumed by the sketch update lambda, which generates the new sketch, merges the new skill sketch with the old sketch, and then calculates the percentile threshold. This flow in turn is consumed by the SQS queue which updates the data in the SQL table.\nModel for Storing the Percentile Threshold:\n\nClass ProblemsPercentileThreshold(Base, Generic):\n  \"\"\"\n  Model to store the percentile thresholds of a problem.\n  \"\"\"\n  percentile_thresholds = JsonField()\n  denominator = models.IntegerField()\n  sketch_file = models.FileField() \n  users_attempted = models.IntegerField() # approach 4\n  last_updated_timestamp = models.DateTimeField()\n\n\nScript to do the initial precomutaion:\n# DDSketch\nfrom ddsketch import DDSketch\nfrom ddsketch.pb.ddsketch_pb2 import DDSketch as DDSketch_PB\nfrom ddsketch.pb.proto import DDSketchProto\n\nsketch = DDSketch()\nfor score in normailzed_scores:\n    sketch.add(score)\n\n# to serialize to string and store sketch\nprotobuf_obj = DDSketchProto.to_proto(sketch)\ndata = protobuf_obj.SerializeToString()\n\n# to deserialize back to obj\nprotobuf_obj = DDSketch_PB()\nprotobuf_obj.ParseFromString(data)\nsketch = DDSketchProto.from_proto(protobuf_obj)\n###############################################################################################\n#T-digest\nfrom tdigest import TDigest\n\ndigest = TDigest()\ndigest.batch_update(normailzed_scores)\n\n# to serialize to json\ndata = json.dumps(digest.to_dict())\n\n# to deserialize\ndigest_dict = json.loads(data)\ndigest = TDigest()\ndigest.update_from_dict(digest_dict)\n\n\n\nConclusion\nWe built global_benchmarking to reliably and effectively run resource-intensive and time-intensive percentile calculations asynchronously in the background. It is now responsible for running asynchronous flows for supporting benchmarking analysis on 1 million or more candidates. This is a beneficial insight for enabling recruiters to make best decisions as well as enabling candidates to improve their skill set.\nPosted by [Raunak choudhary] (https://www.linkedin.com/in/raunak-chowdhary-b49406b1)\n\n\nLambda 1\nDDSketch 1\nAWS 3\nHackerEarth 20\nETL 1\nMapReduce 1\n\n\n\n\nTweet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to view the comments powered by Disqus.\nblog comments powered by Disqus\n\n\n\n\n\n\n\n\n\n\n\n\n          contact@hackerearth.com\n        \n+1-650-461-4192\n\n\nDEVELOPERS\n\n\n\n              Hackathons\n            \n\n\n\n              Challenges\n            \n\n\nJobs\n\n\nPractice\n\n\n\n              Campus Ambassadors\n            \n\n\n\n\nBUSINESSES\n\n\n\n              Assessments\n            \n\n\n\n              FaceCode\n            \n\n\n\n              Hackathons\n            \n\n\n\n\nSOLUTIONS\n\n\n\n              For Tech Recruiters\n            \n\n\n\n              For Hiring Managers\n            \n\n\n\n              Remote Hiring\n            \n\n\n\n              Learning & Development\n            \n\n\n\n              University Hiring\n            \n\n\n\n\nKNOWLEDGE\n\n\nBlog\n\n\n\n              E-Books\n            \n\n\n\n              Events\n            \n\n\n\n              Webinars\n            \n\n\n\n              Guides\n            \n\n\n\n              Insights\n            \n\n\n\n\nCOMPANY\n\n\n\n              About\n            \n\n\nCareers\n\n\nPress\n\n\nSupport\n\n\nContact\n\n\n\n              Privacy Policy\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2023 \u00a9 HackerEarth. All rights reserved.\n\n\n\n\n",
  "latestPost": {
    "title": "Computing accurate skill percentile with DDSketch",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "http://engineering.hackerearth.com/rss",
      "value": "Computing accurate skill percentile with DDSketch"
    },
    "summary": "<h3 id=\"introduction\">Introduction</h3>\n\n<p>HackerEarth has lots of candidates getting evaluated on a daily basis. We have a feature that benchmarks candidates across the platform. Benchmarking is the process of creating the profile of the ideal candidate for a position, and then measuring all candidates against that profile.\nTo benchmark candidate skills against our millions of candidates, we decided to move away from our regular cron solution to build a more reliable and accurate data pipeline. To support this, we created a new data ingestion flow and data read flow. We moved away from our deterministic algorithms to probabilistic algorithms with <a href=\"https://github.com/DataDog/sketches-py\">DDSketch</a>.</p>\n\n<h3 id=\"problem\">Problem</h3>\n\n<p>Our old benchmarking solution was trying to compute the global benchmarking of a candidate on the fly by calculating the solve percentage of the individual skills and returning the geometric mean of all the skill benchmarks. We handle huge volumes of data every day. Analyzing this data itself\u2014for example, calculating a quantile was optimal in terms of resources.</p>\n\n<h3 id=\"solution\">Solution</h3>\n\n<p>We came up with a solution that computes an approximate quantile from a compressed representation of that data. We first need to appropriately summarize that data without incurring an excessive loss of fidelity. We do this by creating a sketch. Sketch algorithms generate sketches: smaller, more manageable data structures, from which we can calculate some properties of the original data.</p>\n\n<p>We considered various algorithms to accurately compute percentiles on noisy, large-scale, real-time data that we were receiving from candidates\u2019 skill scores. We considered using Tdigest and DDSketch. For our use case, DDSketch served the purpose.We did a POC and compared the accuracy of both the algorithms as shown below to come up with a finalized algorithm.</p>\n\n<h3 id=\"poc-results-and-observations\">POC results and observations</h3>\n\n<p>We compared the actual percentile ranges in comparison to the two probabilistic approaches we mentioned(DDSketch and T-DIgest), and these were the results. Note: we have run these tests on the random data samples from the POC point of view.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Initial</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">(</span><span class=\"n\">unbiased</span><span class=\"p\">)</span>\n<span class=\"n\">New</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span>  <span class=\"mi\">2</span><span class=\"o\">%</span> <span class=\"n\">of</span> <span class=\"n\">actual</span> <span class=\"n\">samples</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">.,</span> <span class=\"mi\">20</span>\n\n<span class=\"n\">actual_percentile_thresholds</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.1</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.56</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">96.31</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">91.37</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.44</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.44</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.79</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.27</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_ddsketch</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">96.55</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.93</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.95</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.53</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">ddsketch</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.61</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.96</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">0.48</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.26</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.26</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.21</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.36</span><span class=\"p\">}</span>\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.08</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.03</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.21</span><span class=\"p\">}</span>\n\n <span class=\"o\">--------------------------------------------------------------------------------</span>\n<span class=\"n\">Initial</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">(</span><span class=\"n\">unbiased</span><span class=\"p\">)</span>\n<span class=\"n\">New</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span>  <span class=\"mi\">2</span><span class=\"o\">%</span> <span class=\"n\">of</span> <span class=\"n\">actual</span> <span class=\"n\">samples</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">.,</span> <span class=\"mi\">10</span>\n<span class=\"n\">actual_percentile_thresholds</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.18</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">96.88</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.98</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.79</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.95</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.95</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.65</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">70.55</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_ddsketch</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">96.55</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.64</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.93</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.95</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">70.11</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_tdigest</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.33</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.0</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.99</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.84</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.97</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.97</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.83</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">70.58</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">ddsketch</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.69</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">0.34</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.36</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">0.37</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">0.37</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">0.62</span><span class=\"p\">}</span>\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.12</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.06</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.24</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.04</span><span class=\"p\">}</span>\n\n<span class=\"o\">--------------------------------------------------------------------------------</span>\n<span class=\"n\">Initial</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">5000</span><span class=\"p\">(</span><span class=\"n\">unbiased</span><span class=\"p\">)</span>\n<span class=\"n\">actual_percentile_thresholds</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.23</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.25</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">95.25</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.24</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">81.05</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">81.05</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">76.16</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.07</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_ddsketch</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">96.55</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.64</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.93</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.95</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.53</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_tdigest</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.23</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.25</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">95.23</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.24</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">81.08</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">81.08</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">76.1</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.08</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">ddsketch</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.74</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">0.72</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.64</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.76</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">0.49</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">0.49</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">0.28</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.65</span><span class=\"p\">}</span>\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.04</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.04</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">0.08</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>From above calculations we can deduce that, the percentile deviation in tdigest is close to actual percentile deviation i.e(&lt; 0.2 %), whereas the percentile deviation in ddsketch is approx (&lt; 0.6 %) which is still very accurate to the actual percentile.</p>\n\n<p>We further did a time and space complexity analysis for both the algorithms.Below were the observations.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">1000</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">sketch</span><span class=\"p\">(</span><span class=\"n\">DDSketch</span><span class=\"p\">):</span> <span class=\"mf\">4.124</span> <span class=\"n\">ms</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span> <span class=\"mf\">76.15</span> <span class=\"n\">ms</span>\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">10000</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">DDSketch</span><span class=\"p\">:</span> <span class=\"mf\">27.54</span> <span class=\"n\">ms</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mf\">658.18</span> <span class=\"n\">ms</span>\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">100000</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">DDSketch</span><span class=\"p\">:</span> <span class=\"mf\">298.89</span> <span class=\"n\">ms</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span>  <span class=\"mi\">7243</span> <span class=\"n\">ms</span> <span class=\"o\">-&gt;</span> <span class=\"mf\">7.243</span> <span class=\"n\">sec</span>\n</code></pre></div></div>\n\n<p>Based on the above calculation, we can see that for same sample size (100000) of data DDSketch 298.89 ms to calculate the sketch with deviation of &lt;0.6% from actual percentile and TDigest takes 7.243 sec with 0.2% deviation from actual percentile.</p>\n\n<p>Serialized object size Comparison:\nAs sketch or digest objects will be stored as serialized files, we also calculated the size of the objects</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">1000</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">DDSketch</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"mi\">4127</span> <span class=\"nb\">bytes</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mi\">10015</span> <span class=\"nb\">bytes</span>\n\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">10000</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">DDSketch</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"mi\">5138</span> <span class=\"nb\">bytes</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mi\">17496</span> <span class=\"nb\">bytes</span>\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">100000</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">DDSketch</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"mi\">6224</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">at</span> <span class=\"n\">relative</span> <span class=\"n\">accuracy</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mi\">22049</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">at</span> <span class=\"n\">relative</span> <span class=\"n\">accuracy</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"poc-conclusion\">POC Conclusion</h3>\n\n<p>Based on the above calculation, we can conclude that TDigest gives less deviation to accurate percentiles in comparison to DDSketch, consuming more memory and time. Whereas in our case, we can afford to have accuracy with deviation close to 1%, time and memory plays an important role in faster calculations of sketches.</p>\n\n<p>Hence, we went with the DDSketch algorithm which takes a nominal time and memory for creating sketches.</p>\n\n<h3 id=\"data-ingestion-pipeline-improved-architechture\">Data Ingestion Pipeline (Improved Architechture)</h3>\n\n<p>Now that we know that we need to create sketches, we need to create new sketches for every new data point regularly coming from millions of candidates taking tests at our platform. We needed a data ingestion pipeline for updation of these sketches in near real time.</p>\n\n<p>We built a data pipeline to update the sketch. Individual candidate skills and scores were stored in dynamo DB. Participation end triggers the data from Dynamo db to the map-reduce flow ;  the candidates skill data is consumed by reducer SQS queue. Reducer lambda takes data in batches of 10000 or 5 mins time intervals and reduces the data to skill-wise scores. These messages are then consumed by the SQS FIFO queue, which groups the data based on problem template and skills. This data is again consumed by the sketch update lambda, which generates the new sketch, merges the new skill sketch with the old sketch, and then calculates the percentile threshold. This flow in turn is consumed by the SQS queue which updates the data in the SQL table.</p>\n\n<p>Model for Storing the Percentile Threshold:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">Class</span> <span class=\"n\">ProblemsPercentileThreshold</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">,</span> <span class=\"n\">Generic</span><span class=\"p\">):</span>\n  <span class=\"s\">\"\"\"\n  Model to store the percentile thresholds of a problem.\n  \"\"\"</span>\n  <span class=\"n\">percentile_thresholds</span> <span class=\"o\">=</span> <span class=\"n\">JsonField</span><span class=\"p\">()</span>\n  <span class=\"n\">denominator</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n  <span class=\"n\">sketch_file</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">FileField</span><span class=\"p\">()</span> \n  <span class=\"n\">users_attempted</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span> <span class=\"c1\"># approach 4\n</span>  <span class=\"n\">last_updated_timestamp</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">()</span>\n\n</code></pre></div></div>\n\n<p>Script to do the initial precomutaion:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># DDSketch\n</span><span class=\"kn\">from</span> <span class=\"nn\">ddsketch</span> <span class=\"kn\">import</span> <span class=\"n\">DDSketch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ddsketch.pb.ddsketch_pb2</span> <span class=\"kn\">import</span> <span class=\"n\">DDSketch</span> <span class=\"k\">as</span> <span class=\"n\">DDSketch_PB</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ddsketch.pb.proto</span> <span class=\"kn\">import</span> <span class=\"n\">DDSketchProto</span>\n\n<span class=\"n\">sketch</span> <span class=\"o\">=</span> <span class=\"n\">DDSketch</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">score</span> <span class=\"ow\">in</span> <span class=\"n\">normailzed_scores</span><span class=\"p\">:</span>\n    <span class=\"n\">sketch</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># to serialize to string and store sketch\n</span><span class=\"n\">protobuf_obj</span> <span class=\"o\">=</span> <span class=\"n\">DDSketchProto</span><span class=\"p\">.</span><span class=\"n\">to_proto</span><span class=\"p\">(</span><span class=\"n\">sketch</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">protobuf_obj</span><span class=\"p\">.</span><span class=\"n\">SerializeToString</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># to deserialize back to obj\n</span><span class=\"n\">protobuf_obj</span> <span class=\"o\">=</span> <span class=\"n\">DDSketch_PB</span><span class=\"p\">()</span>\n<span class=\"n\">protobuf_obj</span><span class=\"p\">.</span><span class=\"n\">ParseFromString</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">sketch</span> <span class=\"o\">=</span> <span class=\"n\">DDSketchProto</span><span class=\"p\">.</span><span class=\"n\">from_proto</span><span class=\"p\">(</span><span class=\"n\">protobuf_obj</span><span class=\"p\">)</span>\n<span class=\"c1\">###############################################################################################\n#T-digest\n</span><span class=\"kn\">from</span> <span class=\"nn\">tdigest</span> <span class=\"kn\">import</span> <span class=\"n\">TDigest</span>\n\n<span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">TDigest</span><span class=\"p\">()</span>\n<span class=\"n\">digest</span><span class=\"p\">.</span><span class=\"n\">batch_update</span><span class=\"p\">(</span><span class=\"n\">normailzed_scores</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># to serialize to json\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">digest</span><span class=\"p\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># to deserialize\n</span><span class=\"n\">digest_dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">TDigest</span><span class=\"p\">()</span>\n<span class=\"n\">digest</span><span class=\"p\">.</span><span class=\"n\">update_from_dict</span><span class=\"p\">(</span><span class=\"n\">digest_dict</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<p><img alt=\"improved architecture\" src=\"http://engineering.hackerearth.com/images/Data_ingestion_architechture.png\" /></p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>We built <strong>global_benchmarking</strong> to reliably and effectively run resource-intensive and time-intensive percentile calculations asynchronously in the background. It is now responsible for running asynchronous flows for supporting benchmarking analysis on 1 million or more candidates. This is a beneficial insight for enabling recruiters to make best decisions as well as enabling candidates to improve their skill set.</p>\n\n<p>Posted by [Raunak choudhary] (https://www.linkedin.com/in/raunak-chowdhary-b49406b1)</p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "http://engineering.hackerearth.com/rss",
      "value": "<h3 id=\"introduction\">Introduction</h3>\n\n<p>HackerEarth has lots of candidates getting evaluated on a daily basis. We have a feature that benchmarks candidates across the platform. Benchmarking is the process of creating the profile of the ideal candidate for a position, and then measuring all candidates against that profile.\nTo benchmark candidate skills against our millions of candidates, we decided to move away from our regular cron solution to build a more reliable and accurate data pipeline. To support this, we created a new data ingestion flow and data read flow. We moved away from our deterministic algorithms to probabilistic algorithms with <a href=\"https://github.com/DataDog/sketches-py\">DDSketch</a>.</p>\n\n<h3 id=\"problem\">Problem</h3>\n\n<p>Our old benchmarking solution was trying to compute the global benchmarking of a candidate on the fly by calculating the solve percentage of the individual skills and returning the geometric mean of all the skill benchmarks. We handle huge volumes of data every day. Analyzing this data itself\u2014for example, calculating a quantile was optimal in terms of resources.</p>\n\n<h3 id=\"solution\">Solution</h3>\n\n<p>We came up with a solution that computes an approximate quantile from a compressed representation of that data. We first need to appropriately summarize that data without incurring an excessive loss of fidelity. We do this by creating a sketch. Sketch algorithms generate sketches: smaller, more manageable data structures, from which we can calculate some properties of the original data.</p>\n\n<p>We considered various algorithms to accurately compute percentiles on noisy, large-scale, real-time data that we were receiving from candidates\u2019 skill scores. We considered using Tdigest and DDSketch. For our use case, DDSketch served the purpose.We did a POC and compared the accuracy of both the algorithms as shown below to come up with a finalized algorithm.</p>\n\n<h3 id=\"poc-results-and-observations\">POC results and observations</h3>\n\n<p>We compared the actual percentile ranges in comparison to the two probabilistic approaches we mentioned(DDSketch and T-DIgest), and these were the results. Note: we have run these tests on the random data samples from the POC point of view.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Initial</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">(</span><span class=\"n\">unbiased</span><span class=\"p\">)</span>\n<span class=\"n\">New</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span>  <span class=\"mi\">2</span><span class=\"o\">%</span> <span class=\"n\">of</span> <span class=\"n\">actual</span> <span class=\"n\">samples</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">.,</span> <span class=\"mi\">20</span>\n\n<span class=\"n\">actual_percentile_thresholds</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.1</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.56</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">96.31</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">91.37</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.44</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.44</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.79</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.27</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_ddsketch</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">96.55</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.93</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.95</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.53</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">ddsketch</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.61</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.96</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">0.48</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.26</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.26</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.21</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.36</span><span class=\"p\">}</span>\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.08</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.03</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.21</span><span class=\"p\">}</span>\n\n <span class=\"o\">--------------------------------------------------------------------------------</span>\n<span class=\"n\">Initial</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">(</span><span class=\"n\">unbiased</span><span class=\"p\">)</span>\n<span class=\"n\">New</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span>  <span class=\"mi\">2</span><span class=\"o\">%</span> <span class=\"n\">of</span> <span class=\"n\">actual</span> <span class=\"n\">samples</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">.,</span> <span class=\"mi\">10</span>\n<span class=\"n\">actual_percentile_thresholds</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.18</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">96.88</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.98</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.79</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.95</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.95</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.65</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">70.55</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_ddsketch</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">96.55</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.64</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.93</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.95</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">70.11</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_tdigest</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.33</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.0</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.99</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.84</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.97</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.97</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.83</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">70.58</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">ddsketch</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.69</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">0.34</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.36</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">0.37</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">0.37</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">0.62</span><span class=\"p\">}</span>\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.12</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.06</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.24</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.04</span><span class=\"p\">}</span>\n\n<span class=\"o\">--------------------------------------------------------------------------------</span>\n<span class=\"n\">Initial</span> <span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">5000</span><span class=\"p\">(</span><span class=\"n\">unbiased</span><span class=\"p\">)</span>\n<span class=\"n\">actual_percentile_thresholds</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.23</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.25</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">95.25</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.24</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">81.05</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">81.05</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">76.16</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.07</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_ddsketch</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">98.5</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">96.55</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">94.64</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.93</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">80.65</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">75.95</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.53</span><span class=\"p\">}</span>\n<span class=\"n\">percentile_thresholds_tdigest</span><span class=\"p\">:</span>  \n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">99.23</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">97.25</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">95.23</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">90.24</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">81.08</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">81.08</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">76.1</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"mf\">71.08</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">ddsketch</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.74</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">0.72</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.64</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.76</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"mf\">0.49</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"mf\">0.49</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">0.28</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.65</span><span class=\"p\">}</span>\n<span class=\"n\">Deviation</span> <span class=\"k\">for</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span>\n<span class=\"p\">{</span><span class=\"s\">'p99'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p97'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p95'</span><span class=\"p\">:</span> <span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"s\">'p90'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s\">'p85'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.04</span><span class=\"p\">,</span> <span class=\"s\">'p80'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.04</span><span class=\"p\">,</span> <span class=\"s\">'p75'</span><span class=\"p\">:</span> <span class=\"mf\">0.08</span><span class=\"p\">,</span> <span class=\"s\">'p70'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.01</span><span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>From above calculations we can deduce that, the percentile deviation in tdigest is close to actual percentile deviation i.e(&lt; 0.2 %), whereas the percentile deviation in ddsketch is approx (&lt; 0.6 %) which is still very accurate to the actual percentile.</p>\n\n<p>We further did a time and space complexity analysis for both the algorithms.Below were the observations.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">1000</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">sketch</span><span class=\"p\">(</span><span class=\"n\">DDSketch</span><span class=\"p\">):</span> <span class=\"mf\">4.124</span> <span class=\"n\">ms</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">tdigest</span><span class=\"p\">:</span> <span class=\"mf\">76.15</span> <span class=\"n\">ms</span>\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">10000</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">DDSketch</span><span class=\"p\">:</span> <span class=\"mf\">27.54</span> <span class=\"n\">ms</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mf\">658.18</span> <span class=\"n\">ms</span>\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">100000</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">DDSketch</span><span class=\"p\">:</span> <span class=\"mf\">298.89</span> <span class=\"n\">ms</span>\n<span class=\"n\">Time</span> <span class=\"n\">taken</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">samples</span> <span class=\"n\">to</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span>  <span class=\"mi\">7243</span> <span class=\"n\">ms</span> <span class=\"o\">-&gt;</span> <span class=\"mf\">7.243</span> <span class=\"n\">sec</span>\n</code></pre></div></div>\n\n<p>Based on the above calculation, we can see that for same sample size (100000) of data DDSketch 298.89 ms to calculate the sketch with deviation of &lt;0.6% from actual percentile and TDigest takes 7.243 sec with 0.2% deviation from actual percentile.</p>\n\n<p>Serialized object size Comparison:\nAs sketch or digest objects will be stored as serialized files, we also calculated the size of the objects</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">1000</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">DDSketch</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"mi\">4127</span> <span class=\"nb\">bytes</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mi\">10015</span> <span class=\"nb\">bytes</span>\n\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">10000</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">DDSketch</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"mi\">5138</span> <span class=\"nb\">bytes</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mi\">17496</span> <span class=\"nb\">bytes</span>\n\n<span class=\"n\">sample</span> <span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"mi\">100000</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">DDSketch</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"mi\">6224</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">at</span> <span class=\"n\">relative</span> <span class=\"n\">accuracy</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">Size</span> <span class=\"n\">of</span> <span class=\"n\">serialized</span> <span class=\"n\">TDigest</span><span class=\"p\">:</span> <span class=\"mi\">22049</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">at</span> <span class=\"n\">relative</span> <span class=\"n\">accuracy</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"poc-conclusion\">POC Conclusion</h3>\n\n<p>Based on the above calculation, we can conclude that TDigest gives less deviation to accurate percentiles in comparison to DDSketch, consuming more memory and time. Whereas in our case, we can afford to have accuracy with deviation close to 1%, time and memory plays an important role in faster calculations of sketches.</p>\n\n<p>Hence, we went with the DDSketch algorithm which takes a nominal time and memory for creating sketches.</p>\n\n<h3 id=\"data-ingestion-pipeline-improved-architechture\">Data Ingestion Pipeline (Improved Architechture)</h3>\n\n<p>Now that we know that we need to create sketches, we need to create new sketches for every new data point regularly coming from millions of candidates taking tests at our platform. We needed a data ingestion pipeline for updation of these sketches in near real time.</p>\n\n<p>We built a data pipeline to update the sketch. Individual candidate skills and scores were stored in dynamo DB. Participation end triggers the data from Dynamo db to the map-reduce flow ;  the candidates skill data is consumed by reducer SQS queue. Reducer lambda takes data in batches of 10000 or 5 mins time intervals and reduces the data to skill-wise scores. These messages are then consumed by the SQS FIFO queue, which groups the data based on problem template and skills. This data is again consumed by the sketch update lambda, which generates the new sketch, merges the new skill sketch with the old sketch, and then calculates the percentile threshold. This flow in turn is consumed by the SQS queue which updates the data in the SQL table.</p>\n\n<p>Model for Storing the Percentile Threshold:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">Class</span> <span class=\"n\">ProblemsPercentileThreshold</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">,</span> <span class=\"n\">Generic</span><span class=\"p\">):</span>\n  <span class=\"s\">\"\"\"\n  Model to store the percentile thresholds of a problem.\n  \"\"\"</span>\n  <span class=\"n\">percentile_thresholds</span> <span class=\"o\">=</span> <span class=\"n\">JsonField</span><span class=\"p\">()</span>\n  <span class=\"n\">denominator</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n  <span class=\"n\">sketch_file</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">FileField</span><span class=\"p\">()</span> \n  <span class=\"n\">users_attempted</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span> <span class=\"c1\"># approach 4\n</span>  <span class=\"n\">last_updated_timestamp</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">()</span>\n\n</code></pre></div></div>\n\n<p>Script to do the initial precomutaion:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># DDSketch\n</span><span class=\"kn\">from</span> <span class=\"nn\">ddsketch</span> <span class=\"kn\">import</span> <span class=\"n\">DDSketch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ddsketch.pb.ddsketch_pb2</span> <span class=\"kn\">import</span> <span class=\"n\">DDSketch</span> <span class=\"k\">as</span> <span class=\"n\">DDSketch_PB</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ddsketch.pb.proto</span> <span class=\"kn\">import</span> <span class=\"n\">DDSketchProto</span>\n\n<span class=\"n\">sketch</span> <span class=\"o\">=</span> <span class=\"n\">DDSketch</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">score</span> <span class=\"ow\">in</span> <span class=\"n\">normailzed_scores</span><span class=\"p\">:</span>\n    <span class=\"n\">sketch</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># to serialize to string and store sketch\n</span><span class=\"n\">protobuf_obj</span> <span class=\"o\">=</span> <span class=\"n\">DDSketchProto</span><span class=\"p\">.</span><span class=\"n\">to_proto</span><span class=\"p\">(</span><span class=\"n\">sketch</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">protobuf_obj</span><span class=\"p\">.</span><span class=\"n\">SerializeToString</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># to deserialize back to obj\n</span><span class=\"n\">protobuf_obj</span> <span class=\"o\">=</span> <span class=\"n\">DDSketch_PB</span><span class=\"p\">()</span>\n<span class=\"n\">protobuf_obj</span><span class=\"p\">.</span><span class=\"n\">ParseFromString</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">sketch</span> <span class=\"o\">=</span> <span class=\"n\">DDSketchProto</span><span class=\"p\">.</span><span class=\"n\">from_proto</span><span class=\"p\">(</span><span class=\"n\">protobuf_obj</span><span class=\"p\">)</span>\n<span class=\"c1\">###############################################################################################\n#T-digest\n</span><span class=\"kn\">from</span> <span class=\"nn\">tdigest</span> <span class=\"kn\">import</span> <span class=\"n\">TDigest</span>\n\n<span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">TDigest</span><span class=\"p\">()</span>\n<span class=\"n\">digest</span><span class=\"p\">.</span><span class=\"n\">batch_update</span><span class=\"p\">(</span><span class=\"n\">normailzed_scores</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># to serialize to json\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">digest</span><span class=\"p\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># to deserialize\n</span><span class=\"n\">digest_dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">TDigest</span><span class=\"p\">()</span>\n<span class=\"n\">digest</span><span class=\"p\">.</span><span class=\"n\">update_from_dict</span><span class=\"p\">(</span><span class=\"n\">digest_dict</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<p><img alt=\"improved architecture\" src=\"http://engineering.hackerearth.com/images/Data_ingestion_architechture.png\" /></p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>We built <strong>global_benchmarking</strong> to reliably and effectively run resource-intensive and time-intensive percentile calculations asynchronously in the background. It is now responsible for running asynchronous flows for supporting benchmarking analysis on 1 million or more candidates. This is a beneficial insight for enabling recruiters to make best decisions as well as enabling candidates to improve their skill set.</p>\n\n<p>Posted by [Raunak choudhary] (https://www.linkedin.com/in/raunak-chowdhary-b49406b1)</p>"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "http://engineering.hackerearth.com/2023/09/17/building-a-relaible-global-benchmarking-platform/"
      }
    ],
    "link": "http://engineering.hackerearth.com/2023/09/17/building-a-relaible-global-benchmarking-platform/",
    "id": "http://engineering.hackerearth.com/2023/09/17/building-a-relaible-global-benchmarking-platform",
    "guidislink": false,
    "published": "2023-09-17T00:00:00+00:00",
    "published_parsed": [
      2023,
      9,
      17,
      0,
      0,
      0,
      6,
      260,
      0
    ]
  }
}