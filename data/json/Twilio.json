{
  "company": "Twilio",
  "title": "Twilio",
  "xmlUrl": "https://www.twilio.com/blog/feed",
  "htmlUrl": "https://www.twilio.com/blog/",
  "content": "\ufeff\n\n\n\n\n\n\n\n\n\n\nProtect Twilio Voice Input with Encryption and Redaction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLog InSign UpClose\n\n\n\n\n\n              Products\n            \n\n\n\n\n\n                      Voice &Video\n                    \n\nProgrammable Voice\nProgrammable Video\nElastic SIP Trunking\nTaskRouter\nNetwork Traversal\n\n\n\n\n                      Messaging\n                    \n\nProgrammable SMS\nProgrammable Chat\nNotify\n\n\n\n\n\nAuthentication\n\nVerify Api\n\n\n\nConnectivity\n\nLookup\nPhone Numbers\nProgrammable Wireless\nSync\n\n\n\nMarketplace\n\nAdd\u2011ons\n\n\n\n\nPlatform\n\nEnterprise Plan\n\nInterconnect\n\n\n\n\n\nUse Cases\n\n\n\n\n                    Access Security\n                  \n\n\n\n                    Call & Text Marketing\n                  \n\n\n\n                    Collaboration\n                  \n\n\n\n                    Commerce Communications\n                  \n\n\n\n                    Contact Center\n                  \n\n\n\n\n\n\n\n\n\n                      Customer Stories\n                    \n\n\n\n                      Partner Showcase\n                    \n\n\n\n                      Why Twilio?\n                    \n\n\n\n                      Support Plans\n                    \n\n\n\n                      Status\n                    \n\n\n\n\n\n\n\n                      API & Docs\n                    \n\n\n\n                      Blog\n                    \n\n\n\n                      Help\n                    \n\n\n\n                      Jobs at Twilio\n                    \n\n\n\n\nTalk to Sales\n\n\n\n\n\n\n\n\n\n\n\n      \n      BLOG\n      \n    \n\n\n\n\n\n\nEnglish\n\n\n\n\n\n\nEnglish\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocs\n\n\n\n\n\n\n\n\n\n\nLog In\n\n\n\n\n\n\n\nSign Up\n\n\n\n\n\n\n\n\n\n\nConsole\n\n\n\n\n\n\n\nTwilio\n\n\n\n\n\n\n\n        Build the future of communications.\n    \nStart Building for Free\n\n\n\n\n\n\n\n\n\n\n\n\nBuild the future of communications. Start today with Twilio's APIs and services.\nStart Building for Free\n\n\nPosts by Stack\n\n\nJava\n\n\nPHP\n\n\nRuby\n\n\nPython\n\n\n.NET\n\n\nSwift\n\n\ngo\n\n\nArduino\n\n\nJavaScript\n\n\n\n\nPosts By Product\n\n\nEmail\n\n\nSMS\n\n\nVoice\n\n\nMMS\n\n\nIoT\n\n\nConversations\n\n\ntask router\n\n\nVerify\n\n\nFlex\n\n\nSIP\n\n\nTwilio Client\n\n\nStudio\n\n\n\n\nCategories\n\n\n\n            Code, Tutorials and Hacks\n          \n\n\n\n            Customer Highlights\n          \n\n\n\n            Developers Drawing The Owl\n          \n\n\n\n            Enterprise\n          \n\n\n\n            Life Inside: We Build At Twilio\n          \n\n\n\n            News\n          \n\n\n\n            Stories From The Road\n          \n\n\n\n\n\n\n\n      Twitter\n    \n\n\n\n      Facebook\n    \n\n\n\n    Developer storiesto your inbox.\n  \nSubscribe to the Developer Digest, a monthly dose of all things code.\n\n\n\n\nPlease enter a valid email address.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll set! Check your email.\n\n\n\n    You may unsubscribe at any time using the unsubscribe link in the digest email. See our privacy policy for more information.\n  \n\n\nNew!\n\n Tutorials\n\n      Sample  applications that cover common use cases in a variety of languages. Download, test drive, and tweak them yourself.\n    \nGet started\n\n\n\n\n\n\n\n\n\n\n          By\n          \n\n\n\n    Bry Schinina\n2024-01-10\n\n\n\n\n\n\n            Twitter\n          \n\n\n\n\n            Facebook\n          \n\n\n\n\n            LinkedIn\n          \n\n\nProtect Twilio Voice Input with Encryption and Redaction\n\n\n\n\n\n\nAre you doing all you can to protect the sensitive information your callers trust you with?\nAs organizations leverage more sensitive information, securing that data is more important than ever. Twilio offers numerous ways you can protect your sensitive data\u2014but it\u2019s up to you to implement the resources Twilio provides responsibly.\nIn this article, learn how to encrypt and redact data collected from Twilio Programmable Voice, using <Gather> TwiML with Twilio Serverless Functions and Voice PCI Mode.\nThings you'll need\nIn order to follow this tutorial, you will need:\n\nA Twilio account \nA phone number that can receive calls\n\nWhat are you building?\nYou will build a simple interactive voice application to handle caller authentication. A Function will be used to prompt the caller for the following sensitive information via <Gather> TwiML.\n\n\"Please enter your 4 digit PIN\"\n\"Please enter the last 4 digits of your payment card number\"\n\nAs soon as this information is received from the caller, it will be encrypted. From that moment on, the data will remain encrypted until it reaches its destination.\nIn a real-world implementation, the destination would likely be your backend service for processing. But here, another Function will act as a \u201cdummy API\u201d to demonstrate how the decryption would be performed.\nYou will also enable Voice PCI Mode to redact gathered information in Voice call logs.\nThe Before\nBefore jumping into the solution, take a look at what your logs would look like without encryption or redaction.\nTwilio Functions will log any error generated from a Function to your Twilio Debugger. In this example scenario, you will log an error if certain specific digits are not entered. You can see the plain-text request parameters in the error received by the Debugger.\n\nProgrammable Voice will also log the digits collected in plain-text in the Voice call log:\n\nYou can find this information if you have access to Call Logs or the Debugger.\nThe After\nThe data visible after implementing this solution is less vulnerable. By the end, your Function log will show more secure, encrypted values:\n\nAnd your Call log will show *REDACTED*:\n\nGet Started\nTwilio Functions\nTo follow along with these instructions, use the Twilio Console\u2019s Function Editor.\n\n\n\n\nAdvanced developers should consider using the more robust Serverless CLI to create, deploy, and maintain Functions.\n\n\n\nCreate a Service\nFunctions are created and contained within Services:\n\nLog in to the Twilio Console and navigate to the Functions tab.\nCreate a Service by clicking the Create Service button and adding a name such as encrypted-gather-sample.\n\nAdd Dependency\nIn this solution, the axios library is used to make a request to your \u201cpretend\u201d backend service (the decrypt-gather Function) for processing.\nAdd axios as a dependency to your Service.\n\nCreate an Environment Variable\nThis solution requires a secret key, which will be used to encrypt and decrypt the sensitive data.\n\n\n\n\nYour secret key string must be at least 32 bytes in length. Keep this secret private.\nTo create a random secret, the following command line can be used with Mac/Linux:\nxxd -l32 -p /dev/urandom\nAlternatively, this secret can be generated through Node.js:\ncrypto.randomBytes(32).toString('hex')\n\n\n\nAdd an Environment Variable within your Service that stores your key.\n\nFor testing purposes, the following 32-byte secret key can be used.\n\n\n\na154eb4c759711bc2538a7cc021e9e9f17dd8aa63151c62ca28a82a4a404203d\n\n\n\n\nCreate AES Encryption Function\nFirst, create a Function to handle encryption and decryption of data using symmetric-key cryptography.\nNode.js Crypto\nNode.js offers a built-in cryptography module called Crypto. Crypto provides several useful methods, like createCipheriv() and createDecipheriv() which allow us to specify what kind of block-cipher algorithm to employ.\nGCM Block Cipher\nAdvanced Encryption Standard, known as AES, is a technique for protecting data using encryption algorithms. AES can be achieved through a variety of modes of operations.\nIn this solution, you\u2019ll be using GCM, Galois/Counter Mode, a symmetric-key cryptographic block cipher which is preferred for its speed and strength.\nCode\nCreate a new Function called AES with the following code.\n\n\n\nconst crypto = require(\"crypto\")\n\nconst ALGORITHM = {\n    BLOCK_CIPHER: \"aes-256-gcm\",\n    AUTH_TAG_BYTE_SIZE: 16, \n    IV_BYTE_SIZE: 12,  \n}\n\nexports.encrypt = (plainText, key) => {\n    const nonce = crypto.randomBytes(ALGORITHM.IV_BYTE_SIZE)\n    const cipher = crypto.createCipheriv(\n        ALGORITHM.BLOCK_CIPHER, \n        Buffer.from(key, 'hex'), \n        nonce, \n        {\n            authTagLength: ALGORITHM.AUTH_TAG_BYTE_SIZE\n        }\n    )\n\n    const cipherText = Buffer.concat([\n        nonce,\n        cipher.update(plainText),\n        cipher.final(),\n        cipher.getAuthTag()\n    ])\n\n    return cipherText.toString('hex')\n}\n\nexports.decrypt = (cipherText, key) => {\n    cipherText = Buffer.from(cipherText, 'hex')\n\n    const authTag = cipherText.slice(-16)\n    const nonce = cipherText.slice(0, 12)\n    const encryptedMessage = cipherText.slice(12, -16)\n\n    const decipher = crypto.createDecipheriv(\n        ALGORITHM.BLOCK_CIPHER, \n        Buffer.from(key), \n        nonce, \n        {\n            authTagLength: ALGORITHM.AUTH_TAG_BYTE_SIZE\n        }\n    )\n\n    decipher.setAuthTag(authTag)\n    const decrypted = decipher.update(encryptedMessage, '', 'utf8') + decipher.final('utf8')      \n    return decrypted \n}\n\n\n\n\nThis Function should be set to a visibility of \"Private\", as it will only be used from within another Function in the same Service.\n\nCreate encrypted-gather Function\nNext, create the Function that will perform the sensitive <Gather> operations. This Function will be configured as the incoming Phone Number voice webhook in a later step.\nFrom this Function, the digits entered by the caller will be encrypted as soon as they are received, and sent in their encrypted state to the final, \u201cdestination\u201d Function.\nCode\nCreate a new Function called encrypted-gather with the following code:\n\n\n\nconst axios = require('axios')\nconst AES = require(Runtime.getFunctions()['AES'].path)\n\nexports.handler = async function (context, event, callback) {\n    const twiml = new Twilio.twiml.VoiceResponse()\n\n    const secret_key = context.AES_SECRET\n\n    const functionUrl = `https://${context.DOMAIN_NAME}/encrypted-gather`\n    const dummyApi = `https://${context.DOMAIN_NAME}/decrypt-gather`\n\n    const step = event.step || \"getLast4CC\"\n\n    switch (step) {\n        case (\"getLast4CC\"):\n            gatherLast4Card(twiml, functionUrl);\n            break\n        case (\"getPin\"):\n            let encryptedCardDigits = AES.encrypt(event.Digits, secret_key)\n            gatherPin(twiml, encryptedCardDigits, functionUrl)\n            break\n        case (\"processData\"):\n            let encryptedPinDigits = AES.encrypt(event.Digits, secret_key)\n            await processGatheredData(twiml, event.encryptedCardDigits, encryptedPinDigits, dummyApi)\n            break\n    }\n\n    return callback(null, twiml)\n}\n\nconst gatherLast4Card = (twiml, functionUrl) => {\n    const gather = twiml.gather({\n        action: `${functionUrl}?step=getPin`,\n        method: 'POST',\n        input: 'dtmf',\n        timeout: 10,\n        numDigits: 4,\n    });\n    gather.say('Please enter last 4 digits of your payment card number.');\n\n    return gather\n}\n\nconst gatherPin = (twiml, encryptedCardDigits, functionUrl) => {\n    const gather = twiml.gather({\n        action: `${functionUrl}?step=processData&encryptedCardDigits=${encryptedCardDigits}`,\n        method: 'POST',\n        input: 'dtmf',\n        timeout: 10,\n        numDigits: 4,\n    });\n    gather.say('Please enter your unique 4 digit identification number');\n\n    return gather\n}\n\nconst processGatheredData = async (twiml, encryptedCardDigits, encryptedPinDigits, dummy_url) => {\n    // make request to \"dummy\" api endpoint - example decrypt function\n    try {\n        const apiResponse = await axios({\n            method: 'post',\n            url: dummy_url,\n            data: {\n                encryptedCardDigits, encryptedPinDigits\n            }\n        })\n\n        twiml.say(`Thank you. Your account number is ${apiResponse.data.account} and your balance is ${apiResponse.data.balance}`)\n    }\n    catch (e) {\n        twiml.say(`We were not able to locate you in our system. Goodbye.`)\n    }\n\n    return twiml\n}\n\n\n\n\nThis Function should be set to \"Protected\", as it will be called from within Twilio and can be secured with the X-Twilio-Signature header.  \n\n\n\n\n\nWhen implementing this solution in production, you\u2019ll need to change the decryption \u201cdummyApi\u201d variable to the URL of your backend service.\nconst dummyApi = `https://${context.DOMAIN_NAME}/decrypt-gather`\n\n\n\nHow is it encrypting?\nAt the top, you import the functions created in the previous step with the following line:\n\n\n\nconst AES = require(Runtime.getFunctions()['AES'].path)\n\n\n\n\nThen, you define your secret by getting it from the environment variable:\n\n\n\nconst secret_key = context.AES_SECRET\n\n\n\n\nAnd, most importantly, any sensitive information is wrapped with the encrypt function. (In this case, <Gather>'d information is passed as the Digit parameter, and can be accessed from the event object.)\n\n\n\n let encryptedCardDigits = AES.encrypt(event.Digits, secret_key)\n\n\n\n\nThis handles the encryption of the gathered information.\nCreate decrypt-gather Function\nFinally, let\u2019s create a Function to demonstrate how to decrypt the sensitive data.\nIn a production environment, this would likely be a request to your backend service that processes the caller information based on your business needs.\nIn this solution, a third Function will act as the \u201cbackend service\u201d that processes this data. This Function will receive the encrypted digits and decrypt them for further processing.\nCode\nCreate a new Function called decrypt-gather with the following code:\n\n\n\nconst AES = require(Runtime.getFunctions()['AES'].path)\n\nexports.handler = function(context, event, callback) {\n    const response = new Twilio.Response()\n    const secret_key = context.AES_SECRET\n\n    const last4card = AES.decrypt(event.encryptedCardDigits, secret_key)\n    const pin = AES.decrypt(event.encryptedPinDigits, secret_key)\n\n   //hard-coded values used for testing purposes\n    if (last4card === \"1234\" && pin === \"4321\") {\n        response.setBody(JSON.stringify({\n            account: \"AC12345678\",\n            balance: \"12.55\"\n        }))\n    } else {\n        response.setStatusCode(404)\n        response.setBody(\"No data found\")\n    }\n\n    return callback(null, response)\n}\n\n\n\n\nThis Function\u2019s visibility will be \"Public\", as it is pretending to be an external service.\n\nHow is it decrypting?\nAt the top, you import AES functions again and define the secret_key as a variable.\nThen you call decrypt on the information that was previously encrypted:\n\n\n\nconst last4card = AES.decrypt(event.encryptedCardDigits, secret_key)\n\n\n\n\nAdditional Configuration\nPhone Number Webhook\nFor the sake of simplicity, connect this Function directly to a Phone Number.\nTo configure the Phone Number:\n\nFrom the Twilio Console, navigate to the Phone Numbers section\nSelect your phone number, then scroll to the Voice & Fax section\nSet the encrypted-gather Function as the A call comes in webhook under Voice Configuration\nSave changes\n\n\n\n\n\n\nIf you hope to trigger this from Twilio Studio, check out this blog post to learn more about how to incorporate this solution securely with Studio.\n\n\n\nEnable PCI Mode\nAlmost done! You\u2019ve secured the Functions, but there\u2019s still one more area where Twilio retains gathered digits in plain-text \u2013 Voice call logs.\nBelow is a screenshot from the Twilio Console for an inbound call with the encrypted <Gather> solution implemented. Even though Functions secured the data, Voice hasn\u2019t.\n\nThere\u2019s only one way to prevent this data from being displayed in the Call log, and that\u2019s with PCI Mode. Enabling PCI Mode on your account will redact all data captured from any <Gather> operation.\n\n\n\n\n\nEnabling PCI Mode on an account is a one-way street. Once it\u2019s on, you won\u2019t be able to turn it off. Redaction may make troubleshooting Voice issues more challenging.\n\n\n\nIf you\u2019re serious about capturing sensitive information securely...\n\nNavigate to the Twilio Voice Settings in the Twilio Console. (In the left navigation pane, click on Voice > Settings > General.)\nClick on the Enable PCI Mode button.\nSave changes.\n\n\nMake a call\nNow it\u2019s the moment of truth\u2014it\u2019s time to place a test call to the phone number.\nFrom here, there are two paths to take.\nIf you enter 1234 as the last 4 digits of your \u201ccredit card\u201d and 4321 as the unique PIN, you\u2019ll hear some \u201cdummy\u201d account information returned on the call. This is an example of a successful API response.\nIf you enter any other digits, it will behave as though you aren\u2019t a known user and return a 404 response. This is an example of an unsuccessful request, which will log an error to the Twilio Debugger.\nHow do I know it worked?\nFollow the unsuccessful path and take a look at your Error log in the Twilio Console.\nFor the 404 error response, you\u2019ll find an 82005 Error from Functions with the following details:\n\nThis is good. Without the encryption, an unsuccessful response would have logged those variables in plain-text. But now the data will log in its safer, encrypted form.\nYou can also check your Call log to confirm the digits show *REDACTED* there as well.\nIs this secure?\nFollowing this tutorial (including the optional PCI Mode steps) would prevent the data from logging in plain-text anywhere within Twilio\u2019s ecosystem, and it would prevent anyone at Twilio from being able to decrypt your sensitive data \u2013 making this an improvement over the default.\nHowever, the secret key used for encryption and decryption is stored as an Environment Variable on the Service, meaning users to whom you grant Twilio Functions access would be able to extract the key and potentially go through the effort to decrypt the values.\nFinal Recommendation\nIf you are making modifications to the sample code provided, please keep in mind that Functions retain console warnings and errors within internal Twilio systems and in the Twilio Debugger for some time.\nDo not use any of the following console logging methods with any sensitive, unencrypted data:\n\n\n\nconsole.log()\nconsole.warn()\nconsole.error()\n\n\n\n\nConclusion\nIn this lesson, you learned how you can protect data collected from <Gather> TwiML with encryption via a Serverless Function and redaction through Voice PCI Mode.\nIf you want to collect payments from your callers, consider the fully PCI-compliant Twilio <Pay> feature.\nTo learn more about PCI compliance at Twilio, check out the documentation and responsibility matrix.\nUsers trust you to keep their sensitive information private. Make sure you respect and retain that trust by doing all you can to secure the data you process.\nBry Schinina is a developer and educator who deeply appreciates when companies don\u2019t expose private information. She works as Tech Lead and Sr. Technical Account Manager at Twilio, solving complex problems and helping organizations succeed with their digital engagement platform. She can be reached at bschinina [at] twilio.com.\n\n\n\n\n\n\nRate this post\n\n\n1\n\n2\n\n3\n\n4\n\n5\n\n\n\n\n\n\n\nAuthors\n\n\n\nBry Schinina\n\n\n\n\nReviewers\n\n\n\nBrooke Shippee\n\n\n\nJames Ingraham\n\n\n\nNikhil Verma\n\n\n\nPaul Kamp\n\n\n\n\n\n\n\n\n\n\n\nStart for free\n\n          Not ready yet?\n          \n            Talk to an expert.\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbout\n\n\nLegal\n\n\n      Copyright \u00a9 2024 Twilio Inc.\n    \n\n      All Rights Reserved.\n    \n\n      Protected by reCAPTCHA \u2013 Privacy \u2013 Terms\n\n\n\n\n\n\n\n\n\n\n\nThanks for rating this post!\n\nWe are always striving to improve our blog quality, and your feedback is valuable to us. How could this post serve you better?\n\n\n\n\n\n\n\n\n\nIf applicable fill in the countries where you are using Twilio\n\n\n\n\n\n\nMissing information or code\n\n\n\nContent is confusing or hard to follow\n\n\n\nInaccurate or outdated information\n\n\n\nBroken link or typo\n\n\n\nDid not solve my problem\n\n\n\n\n\nContent is easy to follow\n\n\n\nSolved my problem\n\n\n\n\nOther\n\n\n\nSend your suggestions\n\n\n            Protected by reCAPTCHA \u2013 Privacy - Terms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          Sending your feedback...\n        \n\n\n\n\n\n      \ud83c\udf89 Thank you for your feedback!\n    \n\n\n\n      Something went wrong. Please try again.\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "Protect Twilio Voice Input with Encryption and Redaction",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://www.twilio.com/blog/feed",
      "value": "Protect Twilio Voice Input with Encryption and Redaction"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://www.twilio.com/blog/protect-twilio-voice-input-encryption-redaction"
      }
    ],
    "link": "https://www.twilio.com/blog/protect-twilio-voice-input-encryption-redaction",
    "summary": "<div class=\"block-rich_text\">\n\n<p>Are you doing all you can to protect the sensitive information your callers trust you with?</p>\n<p>As organizations leverage more sensitive information, securing that data is more important than ever. Twilio offers numerous ways you can protect your sensitive data\u2014but it\u2019s up to you to implement the resources Twilio provides responsibly.</p>\n<p>In this article, learn how to <strong>encrypt</strong> and <strong>redact </strong>data collected from <a href=\"https://www.twilio.com/docs/voice\">Twilio Programmable Voice</a>, using <a href=\"https://www.twilio.com/docs/voice/twiml/gather\">&lt;Gather&gt; TwiML</a> with <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions\">Twilio Serverless Functions</a> and <a href=\"https://www.twilio.com/en-us/pci-compliance\">Voice PCI Mode.</a></p>\n<h2>Things you'll need</h2>\n<p>In order to follow this tutorial, you will need:</p>\n<ul>\n<li><a href=\"http://twilio.com/try-twilio\">A Twilio account</a> </li>\n<li><a href=\"https://www.twilio.com/console/phone-numbers/search\">A phone number that can receive calls</a></li>\n</ul>\n<h2>What are you building?</h2>\n<p>You will build a simple interactive voice application to handle caller authentication. A Function will be used to prompt the caller for the following sensitive information via &lt;Gather&gt; TwiML.</p>\n<ol>\n<li>\"Please enter your 4 digit PIN\"</li>\n<li>\"Please enter the last 4 digits of your payment card number\"</li>\n</ol>\n<p>As soon as this information is received from the caller, it will be encrypted. From that moment on, the data will remain encrypted until it reaches its destination.</p>\n<p>In a real-world implementation, the destination would likely be your backend service for processing. But here, another Function will act as a \u201cdummy API\u201d to demonstrate how the decryption would be performed.</p>\n<p>You will also <a href=\"https://www.twilio.com/docs/voice/tutorials/how-to-capture-payment-during-a-voice-call-generic-pay-connector#1-enable-pci-mode\">enable Voice PCI Mode</a> to redact gathered information in Voice call logs.</p>\n<h3>The Before</h3>\n<p>Before jumping into the solution, take a look at what your logs would look like without encryption or redaction.</p>\n<p>Twilio Functions will <a href=\"https://www.twilio.com/docs/serverless/api/resource/logs\">log any error</a> generated from a Function to your <a href=\"https://www.twilio.com/console/debugger\">Twilio Debugger</a>. In this example scenario, you will log an error if certain specific digits are not entered. You can see the plain-text request parameters in the error received by the Debugger.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Plain-text request parameters (4 digit PIN and last 4 digits of credit card) from Twilio Function debugger error log\" class=\"richtext-image left\" height=\"446\" src=\"https://assets.cdn.prod.twilio.com/images/fcRT3nFqORoDYYqM0rWAnKDyn8QaJ-jGxA-eyzU91mk7Ot.width-500.png\" width=\"500\" /></p>\n<p>Programmable Voice will also log the digits collected in plain-text in the <a href=\"https://www.twilio.com/docs/voice/troubleshooting#product-specific-logs\">Voice call log</a>:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Plain-text digits from Gather TwiML in the Twilio Voice Call log\" class=\"richtext-image left\" height=\"288\" src=\"https://assets.cdn.prod.twilio.com/images/iyLeMkQY_5uzYieev6DGSU3eQXOWWirhYe12Q9hLxQ2wqX.width-500.png\" width=\"500\" /></p>\n<p>You can find this information if you have access to Call Logs or the Debugger.</p>\n<h3>The After</h3>\n<p>The data visible after implementing this solution is less vulnerable. By the end, your Function log will show more secure, encrypted values:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Encrypted request parameters (32-character encrypted PIN and encrypted last 4 digits of card) from Twilio Function debugger error log\" class=\"richtext-image left\" height=\"253\" src=\"https://assets.cdn.prod.twilio.com/images/-WTVfhYqoAD2ZLRzrvRVpqX22uV_e_OZ2xEgDMGS39v1LS.width-500.png\" width=\"500\" /></p>\n<p>And your Call log will show <code>*REDACTED*</code>:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Redacted digits from Gather TwiML in Voice Call log\" class=\"richtext-image left\" height=\"300\" src=\"https://assets.cdn.prod.twilio.com/images/L3RI7I1nBRFlNgm_bHg7J6_6Kr-v93j1jLn-uJEm-gl92S.width-500.png\" width=\"500\" /></p>\n<h2>Get Started</h2>\n<h3>Twilio Functions</h3>\n<p>To follow along with these instructions, use the <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/migrating-functionsclassic-new-functions-editor\">Twilio Console\u2019s Function Editor</a>.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>Advanced developers should consider using the more robust <a href=\"https://www.twilio.com/docs/labs/serverless-toolkit\">Serverless CLI</a> to create, deploy, and maintain Functions.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h4>Create a Service</h4>\n<p>Functions are created and contained within <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/create-service\">Services</a>:</p>\n<ol>\n<li>Log in to the <a href=\"https://www.twilio.com/console/\">Twilio Console</a> and navigate to the <strong><a href=\"https://www.twilio.com/console/functions/overview\">Functions</a> </strong>tab.</li>\n<li>Create a Service by clicking the <strong><a href=\"https://www.twilio.com/console/functions/overview/services\">Create Service</a></strong> button and adding a name such as <code>encrypted-gather-sample</code>.</li>\n</ol>\n<h4>Add Dependency</h4>\n<p>In this solution, the <code><a href=\"https://axios-http.com/docs/intro\">axios</a></code> library is used to make a request to your \u201cpretend\u201d backend service (the <code>decrypt-gather</code> Function) for processing.</p>\n<p>Add <code>axios</code> as a <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/dependencies\">dependency to your Service</a>.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Adding &quot;axios&quot; as a dependency to the Twilio Serverless Service via Twilio Console UI\" class=\"richtext-image full-width\" height=\"243\" src=\"https://assets.cdn.prod.twilio.com/images/kLJfhpN2OQJVv7Vzef3r-LQPD1fneHAtAvx-kbtSfAaLrL.width-800.png\" width=\"800\" /></p>\n<h4>Create an Environment Variable</h4>\n<p>This solution requires a secret key, which will be used to encrypt and decrypt the sensitive data.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>Your secret key string must be at least 32 bytes in length. Keep this secret private.</p>\n<p>To create a random secret, the following command line can be used with Mac/Linux:</p>\n<p><code>xxd -l32 -p /dev/urandom</code></p>\n<p>Alternatively, this secret can be generated through Node.js:</p>\n<p><code>crypto.randomBytes(32).toString('hex')</code></p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>Add an <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/variables\">Environment Variable</a> within your Service that stores your key.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Adding secret key as an Environment Variable in the Twilio Serverless Service via Twilio Console UI\" class=\"richtext-image full-width\" height=\"260\" src=\"https://assets.cdn.prod.twilio.com/images/feG-BIc3DNBoUbbWRv3DOG3P_J1kb10UMb0mx4qleiYsgo.width-800.png\" width=\"800\" /></p>\n<p>For testing purposes, the following 32-byte secret key can be used.</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-text\"><pre class=\"twlo-code language-text\"><code class=\"language-text\">a154eb4c759711bc2538a7cc021e9e9f17dd8aa63151c62ca28a82a4a404203d\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h4>Create <code>AES</code> Encryption Function</h4>\n<p>First, create a Function to handle encryption and decryption of data using <a href=\"https://en.wikipedia.org/wiki/Symmetric-key_algorithm\">symmetric-key</a> cryptography.</p>\n<p><strong>Node.js Crypto</strong></p>\n<p>Node.js offers a built-in cryptography module called <a href=\"https://nodejs.org/api/crypto.html\">Crypto</a>. Crypto provides several useful methods, like <code><a href=\"https://nodejs.org/api/crypto.html#cryptocreatecipherivalgorithm-key-iv-options\">createCipheriv()</a></code> and <code><a href=\"https://nodejs.org/api/crypto.html#cryptocreatedecipherivalgorithm-key-iv-options\">createDecipheriv()</a></code> which allow us to specify what kind of block-cipher algorithm to employ.</p>\n<p><strong>GCM Block Cipher</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">Advanced Encryption Standard</a>, known as AES, is a technique for protecting data using encryption algorithms. AES can be achieved through a variety of <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\">modes of operations</a>.</p>\n<p>In this solution, you\u2019ll be using <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">GCM, Galois/Counter Mode</a>, a symmetric-key cryptographic <a href=\"https://en.wikipedia.org/wiki/Block_cipher\">block cipher</a> which is preferred for its speed and strength.</p>\n<p><strong>Code</strong></p>\n<p>Create a new Function called <code>AES</code> with the following code.</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const crypto = require(\"crypto\")\n\nconst ALGORITHM = {\n    BLOCK_CIPHER: \"aes-256-gcm\",\n    AUTH_TAG_BYTE_SIZE: 16, \n    IV_BYTE_SIZE: 12,  \n}\n\nexports.encrypt = (plainText, key) =&gt; {\n    const nonce = crypto.randomBytes(ALGORITHM.IV_BYTE_SIZE)\n    const cipher = crypto.createCipheriv(\n        ALGORITHM.BLOCK_CIPHER, \n        Buffer.from(key, 'hex'), \n        nonce, \n        {\n            authTagLength: ALGORITHM.AUTH_TAG_BYTE_SIZE\n        }\n    )\n\n    const cipherText = Buffer.concat([\n        nonce,\n        cipher.update(plainText),\n        cipher.final(),\n        cipher.getAuthTag()\n    ])\n\n    return cipherText.toString('hex')\n}\n\nexports.decrypt = (cipherText, key) =&gt; {\n    cipherText = Buffer.from(cipherText, 'hex')\n\n    const authTag = cipherText.slice(-16)\n    const nonce = cipherText.slice(0, 12)\n    const encryptedMessage = cipherText.slice(12, -16)\n\n    const decipher = crypto.createDecipheriv(\n        ALGORITHM.BLOCK_CIPHER, \n        Buffer.from(key), \n        nonce, \n        {\n            authTagLength: ALGORITHM.AUTH_TAG_BYTE_SIZE\n        }\n    )\n\n    decipher.setAuthTag(authTag)\n    const decrypted = decipher.update(encryptedMessage, '', 'utf8') + decipher.final('utf8')      \n    return decrypted \n}\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This Function should be set to a <a href=\"https://www.twilio.com/docs/serverless/functions-assets/visibility\">visibility of \"Private\"</a>, as it will only be used from within another Function in the same Service.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Private Serverless Function visibility setting from the Twilio Console UI\" class=\"richtext-image left\" height=\"528\" src=\"https://assets.cdn.prod.twilio.com/images/gjaufiuXqZIN4bHKoUmluYU6lZ6g-vvcDeFV98t19R54O0.width-500.png\" width=\"500\" /></p>\n<h4>Create <code>encrypted-gather</code> Function</h4>\n<p>Next, create the Function that will perform the sensitive &lt;Gather&gt; operations. This Function will be configured as the <a href=\"https://www.twilio.com/docs/usage/webhooks/voice-webhooks#incoming-voice-call\">incoming Phone Number voice webhook</a> in a later step.</p>\n<p>From this Function, the digits entered by the caller will be encrypted as soon as they are received, and sent in their encrypted state to the final, \u201cdestination\u201d Function.</p>\n<p><strong>Code</strong></p>\n<p>Create a new Function called <code>encrypted-gather</code> with the following code:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const axios = require('axios')\nconst AES = require(Runtime.getFunctions()['AES'].path)\n\nexports.handler = async function (context, event, callback) {\n    const twiml = new Twilio.twiml.VoiceResponse()\n\n    const secret_key = context.AES_SECRET\n\n    const functionUrl = `https://${context.DOMAIN_NAME}/encrypted-gather`\n    const dummyApi = `https://${context.DOMAIN_NAME}/decrypt-gather`\n\n    const step = event.step || \"getLast4CC\"\n\n    switch (step) {\n        case (\"getLast4CC\"):\n            gatherLast4Card(twiml, functionUrl);\n            break\n        case (\"getPin\"):\n            let encryptedCardDigits = AES.encrypt(event.Digits, secret_key)\n            gatherPin(twiml, encryptedCardDigits, functionUrl)\n            break\n        case (\"processData\"):\n            let encryptedPinDigits = AES.encrypt(event.Digits, secret_key)\n            await processGatheredData(twiml, event.encryptedCardDigits, encryptedPinDigits, dummyApi)\n            break\n    }\n\n    return callback(null, twiml)\n}\n\nconst gatherLast4Card = (twiml, functionUrl) =&gt; {\n    const gather = twiml.gather({\n        action: `${functionUrl}?step=getPin`,\n        method: 'POST',\n        input: 'dtmf',\n        timeout: 10,\n        numDigits: 4,\n    });\n    gather.say('Please enter last 4 digits of your payment card number.');\n\n    return gather\n}\n\nconst gatherPin = (twiml, encryptedCardDigits, functionUrl) =&gt; {\n    const gather = twiml.gather({\n        action: `${functionUrl}?step=processData&amp;encryptedCardDigits=${encryptedCardDigits}`,\n        method: 'POST',\n        input: 'dtmf',\n        timeout: 10,\n        numDigits: 4,\n    });\n    gather.say('Please enter your unique 4 digit identification number');\n\n    return gather\n}\n\nconst processGatheredData = async (twiml, encryptedCardDigits, encryptedPinDigits, dummy_url) =&gt; {\n    // make request to \"dummy\" api endpoint - example decrypt function\n    try {\n        const apiResponse = await axios({\n            method: 'post',\n            url: dummy_url,\n            data: {\n                encryptedCardDigits, encryptedPinDigits\n            }\n        })\n\n        twiml.say(`Thank you. Your account number is ${apiResponse.data.account} and your balance is ${apiResponse.data.balance}`)\n    }\n    catch (e) {\n        twiml.say(`We were not able to locate you in our system. Goodbye.`)\n    }\n\n    return twiml\n}\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This Function should be set to <a href=\"https://www.twilio.com/docs/serverless/functions-assets/visibility\">\"Protected\"</a>, as it will be called from within Twilio and can be secured with the <code>X-Twilio-Signature</code> header.  </p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Protected Serverless Function visibility setting from the Twilio Console UI\" class=\"richtext-image left\" height=\"515\" src=\"https://assets.cdn.prod.twilio.com/images/0NJJ5Rk954VVFMp2qVfZ5JYwGr147qxiazJwpD1NXxzs-c.width-500.png\" width=\"500\" /></p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>When implementing this solution in production, you\u2019ll need to change the decryption \u201cdummyApi\u201d variable to the URL of your backend service.</p>\n<p><code>const dummyApi = `https://${context.DOMAIN_NAME}/decrypt-gather`</code></p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p><strong>How is it encrypting?</strong></p>\n<p>At the top, you <a href=\"https://www.twilio.com/docs/serverless/functions-assets/client#getfunctions\">import the functions</a> created in the previous step with the following line:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const AES = require(Runtime.getFunctions()['AES'].path)\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>Then, you define your secret by getting it <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/variables#consuming-environment-variables\">from the environment variable</a>:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const secret_key = context.AES_SECRET\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>And, most importantly, any sensitive information is wrapped with the <code>encrypt</code> function. (In this case, &lt;Gather&gt;'d information is passed as the <code>Digit</code> parameter, and can be accessed from the event object.)</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\"> let encryptedCardDigits = AES.encrypt(event.Digits, secret_key)\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This handles the encryption of the gathered information.</p>\n<h4>Create <code>decrypt-gather</code> Function</h4>\n<p>Finally, let\u2019s create a Function to demonstrate how to <strong>decrypt</strong> the sensitive data.</p>\n<p>In a production environment, this would likely be a request to your backend service that processes the caller information based on your business needs.</p>\n<p>In this solution, a third Function will act as the \u201cbackend service\u201d that processes this data. This Function will receive the encrypted digits and decrypt them for further processing.</p>\n<p><strong>Code</strong></p>\n<p>Create a new Function called <code>decrypt-gather</code> with the following code:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const AES = require(Runtime.getFunctions()['AES'].path)\n\nexports.handler = function(context, event, callback) {\n    const response = new Twilio.Response()\n    const secret_key = context.AES_SECRET\n\n    const last4card = AES.decrypt(event.encryptedCardDigits, secret_key)\n    const pin = AES.decrypt(event.encryptedPinDigits, secret_key)\n\n   //hard-coded values used for testing purposes\n    if (last4card === \"1234\" &amp;&amp; pin === \"4321\") {\n        response.setBody(JSON.stringify({\n            account: \"AC12345678\",\n            balance: \"12.55\"\n        }))\n    } else {\n        response.setStatusCode(404)\n        response.setBody(\"No data found\")\n    }\n\n    return callback(null, response)\n}\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This Function\u2019s visibility will be <a href=\"https://www.twilio.com/docs/serverless/functions-assets/visibility\">\"Public\"</a>, as it is pretending to be an external service.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Public Serverless Function visibility setting from the Twilio Console UI\" class=\"richtext-image left\" height=\"539\" src=\"https://assets.cdn.prod.twilio.com/images/tC-MMkRDe2YRQ7MgekGi1I4xzG2-3nhWVOcF_h30Leeb5j.width-500.png\" width=\"500\" /></p>\n<p><strong>How is it decrypting?</strong></p>\n<p>At the top, you <a href=\"https://www.twilio.com/docs/serverless/functions-assets/client#getfunctions\">import</a> <code>AES</code> functions again and define the <code>secret_key</code> as a variable.</p>\n<p>Then you call <code>decrypt</code> on the information that was previously encrypted:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const last4card = AES.decrypt(event.encryptedCardDigits, secret_key)\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h2>Additional Configuration</h2>\n<h3>Phone Number Webhook</h3>\n<p>For the sake of simplicity, connect this Function directly to a Phone Number.</p>\n<p>To configure the Phone Number:</p>\n<ol>\n<li>From the Twilio Console, navigate to the <strong><a href=\"https://www.twilio.com/console/phone-numbers/\">Phone Numbers</a></strong><a href=\"https://www.twilio.com/console/phone-numbers/\"> section</a></li>\n<li>Select your phone number, then scroll to the <strong>Voice &amp; Fax</strong> section</li>\n<li>Set the <code>encrypted-gather</code> Function as the <strong>A call comes in</strong> webhook under <strong>Voice Configuration</strong></li>\n<li><strong>Save</strong> changes</li>\n</ol>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Voice Configuration &quot;A call comes in&quot; webhook set to encrypted-gather Function\" class=\"richtext-image full-width\" height=\"162\" src=\"https://assets.cdn.prod.twilio.com/images/Nl3bWTO5bUhq136qP6UbzwSqiB6TwDtjMrSqbUQwD1jAjs.width-800.png\" width=\"800\" /></p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>If you hope to trigger this from Twilio Studio, check out <a href=\"https://www.twilio.com/blog/hiding-pii-phi-from-studio\">this blog post</a> to learn more about how to incorporate this solution securely with Studio.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h3>Enable PCI Mode</h3>\n<p>Almost done! You\u2019ve secured the Functions, but there\u2019s still one more area where Twilio retains gathered digits in plain-text \u2013 <a href=\"https://www.twilio.com/docs/voice/troubleshooting#product-specific-logs\">Voice call logs</a>.</p>\n<p>Below is a screenshot from the Twilio Console for an inbound call with the encrypted &lt;Gather&gt; solution implemented. Even though Functions secured the data, Voice hasn\u2019t.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Plain-text digits from Gather TwiML in the Twilio Voice Call log\" class=\"richtext-image left\" height=\"288\" src=\"https://assets.cdn.prod.twilio.com/images/iyLeMkQY_5uzYieev6DGSU3eQXOWWirhYe12Q9hLxQ2wqX.width-500_zjiMq9p.png\" width=\"500\" /></p>\n<p>There\u2019s only one way to prevent this data from being displayed in the Call log, and that\u2019s with <a href=\"https://www.twilio.com/docs/voice/tutorials/how-to-capture-payment-during-a-voice-call-generic-pay-connector#1-enable-pci-mode\">PCI Mode</a>. Enabling PCI Mode on your account will <strong>redact</strong> all data captured from any &lt;Gather&gt; operation.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Redacted digits from Gather TwiML in Voice Call log\" class=\"richtext-image left\" height=\"300\" src=\"https://assets.cdn.prod.twilio.com/images/L3RI7I1nBRFlNgm_bHg7J6_6Kr-v93j1jLn-uJEm-gl92S.width-500_GMSNjWB.png\" width=\"500\" /></p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--warning\">\n  <span alt=\"warning message about a Twilio product\" class=\"docs-note-icon docs-note-icon--warning\" title=\"warning icon\"></span>\n  <p><strong>Enabling PCI Mode on an account is a one-way street. Once it\u2019s on, you won\u2019t be able to turn it off. Redaction may make troubleshooting Voice issues more challenging.</strong></p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>If you\u2019re serious about capturing sensitive information securely...</p>\n<ol>\n<li>Navigate to the Twilio <a href=\"https://www.twilio.com/console/voice/settings\">Voice Settings</a> in the Twilio Console. (In the left navigation pane, click on <strong>Voice &gt; Settings &gt; General</strong>.)</li>\n<li>Click on the <strong>Enable PCI Mode</strong> button.</li>\n<li><strong>Save</strong> changes.</li>\n</ol>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Programmable Voice Setting for enabling PCI Mode in the Twilio Console UI\" class=\"richtext-image full-width\" height=\"256\" src=\"https://assets.cdn.prod.twilio.com/images/T9JlIt9gaK-uGvsBD_ikYzWSFe0WrYYAsNkkn9X3ZMw8Nu.width-800.png\" width=\"800\" /></p>\n<h2>Make a call</h2>\n<p>Now it\u2019s the moment of truth\u2014it\u2019s time to place a test call to the phone number.</p>\n<p>From here, there are two paths to take.</p>\n<p>If you enter <code>1234</code> as the last 4 digits of your \u201ccredit card\u201d and <code>4321</code> as the unique PIN, you\u2019ll hear some \u201cdummy\u201d account information returned on the call. This is an example of a <strong>successful</strong> API response.</p>\n<p>If you enter any other digits, it will behave as though you aren\u2019t a known user and return a <code>404</code> response. This is an example of an <strong>unsuccessful</strong> request, which will log an error to the Twilio Debugger.</p>\n<h2>How do I know it worked?</h2>\n<p>Follow the unsuccessful path and take a look at your <a href=\"https://www.twilio.com/console/debugger\">Error log in the Twilio Console</a>.</p>\n<p>For the <code>404</code> error response, you\u2019ll find an <a href=\"https://www.twilio.com/docs/api/errors/82005\">82005 Error from Functions</a> with the following details:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Encrypted request parameters (32-character encrypted PIN and encrypted last 4 digits of card) from Twilio Function debugger error log\" class=\"richtext-image left\" height=\"342\" src=\"https://assets.cdn.prod.twilio.com/images/KSXZilCNkZgfSEpa6SPoVDJWnXuqG6yKHU5oXpTZAhEl6o.width-500.png\" width=\"500\" /></p>\n<p>This is good. Without the encryption, an unsuccessful response would have logged those variables in plain-text. But now the data will log in its safer, encrypted form.</p>\n<p>You can also check <a href=\"https://console.twilio.com/us1/monitor/logs/calls?frameUrl=%2Fconsole%2Fvoice%2Fcalls%2Flogs%3Fx-target-region%3Dus1\">your Call log</a> to confirm the digits show <code>*REDACTED*</code> there as well.</p>\n<h2>Is this secure?</h2>\n<p>Following this tutorial (including the optional PCI Mode steps) would prevent the data from logging in plain-text anywhere within Twilio\u2019s ecosystem, and it would prevent anyone at Twilio from being able to decrypt your sensitive data \u2013 making this an improvement over the default.</p>\n<p>However, the secret key used for encryption and decryption is stored as an Environment Variable on the Service, meaning users to whom you grant Twilio Functions access would be able to extract the key and potentially go through the effort to decrypt the values.</p>\n<h2>Final Recommendation</h2>\n<p>If you are making modifications to the sample code provided, please keep in mind that <a href=\"https://www.twilio.com/docs/serverless/api/resource/logs\">Functions retain console warnings and errors</a> within internal Twilio systems and in the <a href=\"https://www.twilio.com/console/debugger\">Twilio Debugger</a> <a href=\"https://www.twilio.com/docs/serverless/api/resource/logs#debugger-and-webhooks\">for some time</a>.</p>\n<p>Do not use any of the following console logging methods with any sensitive, unencrypted data:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">console.log()\nconsole.warn()\nconsole.error()\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h2>Conclusion</h2>\n<p>In this lesson, you learned how you can protect data collected from &lt;Gather&gt; TwiML with encryption via a Serverless Function and redaction through Voice PCI Mode.</p>\n<p>If you want to collect payments from your callers, consider the fully PCI-compliant <a href=\"https://www.twilio.com/docs/voice/twiml/pay\">Twilio &lt;Pay&gt;</a> feature.</p>\n<p>To learn more about PCI compliance at Twilio, check out <a href=\"https://www.twilio.com/en-us/pci-compliance\">the documentation</a> and responsibility matrix.</p>\n<p>Users trust you to keep their sensitive information private. Make sure you respect and retain that trust by doing all you can to secure the data you process.</p>\n<p><em>Bry Schinina is a developer and educator who deeply appreciates when companies don\u2019t expose private information. She works as Tech Lead and Sr. Technical Account Manager at Twilio, solving complex problems and helping organizations succeed with their digital engagement platform. She can be reached at bschinina [at] twilio.com.</em></p>\n</div>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://www.twilio.com/blog/feed",
      "value": "<div class=\"block-rich_text\">\n\n<p>Are you doing all you can to protect the sensitive information your callers trust you with?</p>\n<p>As organizations leverage more sensitive information, securing that data is more important than ever. Twilio offers numerous ways you can protect your sensitive data\u2014but it\u2019s up to you to implement the resources Twilio provides responsibly.</p>\n<p>In this article, learn how to <strong>encrypt</strong> and <strong>redact </strong>data collected from <a href=\"https://www.twilio.com/docs/voice\">Twilio Programmable Voice</a>, using <a href=\"https://www.twilio.com/docs/voice/twiml/gather\">&lt;Gather&gt; TwiML</a> with <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions\">Twilio Serverless Functions</a> and <a href=\"https://www.twilio.com/en-us/pci-compliance\">Voice PCI Mode.</a></p>\n<h2>Things you'll need</h2>\n<p>In order to follow this tutorial, you will need:</p>\n<ul>\n<li><a href=\"http://twilio.com/try-twilio\">A Twilio account</a> </li>\n<li><a href=\"https://www.twilio.com/console/phone-numbers/search\">A phone number that can receive calls</a></li>\n</ul>\n<h2>What are you building?</h2>\n<p>You will build a simple interactive voice application to handle caller authentication. A Function will be used to prompt the caller for the following sensitive information via &lt;Gather&gt; TwiML.</p>\n<ol>\n<li>\"Please enter your 4 digit PIN\"</li>\n<li>\"Please enter the last 4 digits of your payment card number\"</li>\n</ol>\n<p>As soon as this information is received from the caller, it will be encrypted. From that moment on, the data will remain encrypted until it reaches its destination.</p>\n<p>In a real-world implementation, the destination would likely be your backend service for processing. But here, another Function will act as a \u201cdummy API\u201d to demonstrate how the decryption would be performed.</p>\n<p>You will also <a href=\"https://www.twilio.com/docs/voice/tutorials/how-to-capture-payment-during-a-voice-call-generic-pay-connector#1-enable-pci-mode\">enable Voice PCI Mode</a> to redact gathered information in Voice call logs.</p>\n<h3>The Before</h3>\n<p>Before jumping into the solution, take a look at what your logs would look like without encryption or redaction.</p>\n<p>Twilio Functions will <a href=\"https://www.twilio.com/docs/serverless/api/resource/logs\">log any error</a> generated from a Function to your <a href=\"https://www.twilio.com/console/debugger\">Twilio Debugger</a>. In this example scenario, you will log an error if certain specific digits are not entered. You can see the plain-text request parameters in the error received by the Debugger.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Plain-text request parameters (4 digit PIN and last 4 digits of credit card) from Twilio Function debugger error log\" class=\"richtext-image left\" height=\"446\" src=\"https://assets.cdn.prod.twilio.com/images/fcRT3nFqORoDYYqM0rWAnKDyn8QaJ-jGxA-eyzU91mk7Ot.width-500.png\" width=\"500\" /></p>\n<p>Programmable Voice will also log the digits collected in plain-text in the <a href=\"https://www.twilio.com/docs/voice/troubleshooting#product-specific-logs\">Voice call log</a>:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Plain-text digits from Gather TwiML in the Twilio Voice Call log\" class=\"richtext-image left\" height=\"288\" src=\"https://assets.cdn.prod.twilio.com/images/iyLeMkQY_5uzYieev6DGSU3eQXOWWirhYe12Q9hLxQ2wqX.width-500.png\" width=\"500\" /></p>\n<p>You can find this information if you have access to Call Logs or the Debugger.</p>\n<h3>The After</h3>\n<p>The data visible after implementing this solution is less vulnerable. By the end, your Function log will show more secure, encrypted values:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Encrypted request parameters (32-character encrypted PIN and encrypted last 4 digits of card) from Twilio Function debugger error log\" class=\"richtext-image left\" height=\"253\" src=\"https://assets.cdn.prod.twilio.com/images/-WTVfhYqoAD2ZLRzrvRVpqX22uV_e_OZ2xEgDMGS39v1LS.width-500.png\" width=\"500\" /></p>\n<p>And your Call log will show <code>*REDACTED*</code>:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Redacted digits from Gather TwiML in Voice Call log\" class=\"richtext-image left\" height=\"300\" src=\"https://assets.cdn.prod.twilio.com/images/L3RI7I1nBRFlNgm_bHg7J6_6Kr-v93j1jLn-uJEm-gl92S.width-500.png\" width=\"500\" /></p>\n<h2>Get Started</h2>\n<h3>Twilio Functions</h3>\n<p>To follow along with these instructions, use the <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/migrating-functionsclassic-new-functions-editor\">Twilio Console\u2019s Function Editor</a>.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>Advanced developers should consider using the more robust <a href=\"https://www.twilio.com/docs/labs/serverless-toolkit\">Serverless CLI</a> to create, deploy, and maintain Functions.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h4>Create a Service</h4>\n<p>Functions are created and contained within <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/create-service\">Services</a>:</p>\n<ol>\n<li>Log in to the <a href=\"https://www.twilio.com/console/\">Twilio Console</a> and navigate to the <strong><a href=\"https://www.twilio.com/console/functions/overview\">Functions</a> </strong>tab.</li>\n<li>Create a Service by clicking the <strong><a href=\"https://www.twilio.com/console/functions/overview/services\">Create Service</a></strong> button and adding a name such as <code>encrypted-gather-sample</code>.</li>\n</ol>\n<h4>Add Dependency</h4>\n<p>In this solution, the <code><a href=\"https://axios-http.com/docs/intro\">axios</a></code> library is used to make a request to your \u201cpretend\u201d backend service (the <code>decrypt-gather</code> Function) for processing.</p>\n<p>Add <code>axios</code> as a <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/dependencies\">dependency to your Service</a>.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Adding &quot;axios&quot; as a dependency to the Twilio Serverless Service via Twilio Console UI\" class=\"richtext-image full-width\" height=\"243\" src=\"https://assets.cdn.prod.twilio.com/images/kLJfhpN2OQJVv7Vzef3r-LQPD1fneHAtAvx-kbtSfAaLrL.width-800.png\" width=\"800\" /></p>\n<h4>Create an Environment Variable</h4>\n<p>This solution requires a secret key, which will be used to encrypt and decrypt the sensitive data.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>Your secret key string must be at least 32 bytes in length. Keep this secret private.</p>\n<p>To create a random secret, the following command line can be used with Mac/Linux:</p>\n<p><code>xxd -l32 -p /dev/urandom</code></p>\n<p>Alternatively, this secret can be generated through Node.js:</p>\n<p><code>crypto.randomBytes(32).toString('hex')</code></p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>Add an <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/variables\">Environment Variable</a> within your Service that stores your key.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Adding secret key as an Environment Variable in the Twilio Serverless Service via Twilio Console UI\" class=\"richtext-image full-width\" height=\"260\" src=\"https://assets.cdn.prod.twilio.com/images/feG-BIc3DNBoUbbWRv3DOG3P_J1kb10UMb0mx4qleiYsgo.width-800.png\" width=\"800\" /></p>\n<p>For testing purposes, the following 32-byte secret key can be used.</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-text\"><pre class=\"twlo-code language-text\"><code class=\"language-text\">a154eb4c759711bc2538a7cc021e9e9f17dd8aa63151c62ca28a82a4a404203d\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h4>Create <code>AES</code> Encryption Function</h4>\n<p>First, create a Function to handle encryption and decryption of data using <a href=\"https://en.wikipedia.org/wiki/Symmetric-key_algorithm\">symmetric-key</a> cryptography.</p>\n<p><strong>Node.js Crypto</strong></p>\n<p>Node.js offers a built-in cryptography module called <a href=\"https://nodejs.org/api/crypto.html\">Crypto</a>. Crypto provides several useful methods, like <code><a href=\"https://nodejs.org/api/crypto.html#cryptocreatecipherivalgorithm-key-iv-options\">createCipheriv()</a></code> and <code><a href=\"https://nodejs.org/api/crypto.html#cryptocreatedecipherivalgorithm-key-iv-options\">createDecipheriv()</a></code> which allow us to specify what kind of block-cipher algorithm to employ.</p>\n<p><strong>GCM Block Cipher</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">Advanced Encryption Standard</a>, known as AES, is a technique for protecting data using encryption algorithms. AES can be achieved through a variety of <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\">modes of operations</a>.</p>\n<p>In this solution, you\u2019ll be using <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">GCM, Galois/Counter Mode</a>, a symmetric-key cryptographic <a href=\"https://en.wikipedia.org/wiki/Block_cipher\">block cipher</a> which is preferred for its speed and strength.</p>\n<p><strong>Code</strong></p>\n<p>Create a new Function called <code>AES</code> with the following code.</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const crypto = require(\"crypto\")\n\nconst ALGORITHM = {\n    BLOCK_CIPHER: \"aes-256-gcm\",\n    AUTH_TAG_BYTE_SIZE: 16, \n    IV_BYTE_SIZE: 12,  \n}\n\nexports.encrypt = (plainText, key) =&gt; {\n    const nonce = crypto.randomBytes(ALGORITHM.IV_BYTE_SIZE)\n    const cipher = crypto.createCipheriv(\n        ALGORITHM.BLOCK_CIPHER, \n        Buffer.from(key, 'hex'), \n        nonce, \n        {\n            authTagLength: ALGORITHM.AUTH_TAG_BYTE_SIZE\n        }\n    )\n\n    const cipherText = Buffer.concat([\n        nonce,\n        cipher.update(plainText),\n        cipher.final(),\n        cipher.getAuthTag()\n    ])\n\n    return cipherText.toString('hex')\n}\n\nexports.decrypt = (cipherText, key) =&gt; {\n    cipherText = Buffer.from(cipherText, 'hex')\n\n    const authTag = cipherText.slice(-16)\n    const nonce = cipherText.slice(0, 12)\n    const encryptedMessage = cipherText.slice(12, -16)\n\n    const decipher = crypto.createDecipheriv(\n        ALGORITHM.BLOCK_CIPHER, \n        Buffer.from(key), \n        nonce, \n        {\n            authTagLength: ALGORITHM.AUTH_TAG_BYTE_SIZE\n        }\n    )\n\n    decipher.setAuthTag(authTag)\n    const decrypted = decipher.update(encryptedMessage, '', 'utf8') + decipher.final('utf8')      \n    return decrypted \n}\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This Function should be set to a <a href=\"https://www.twilio.com/docs/serverless/functions-assets/visibility\">visibility of \"Private\"</a>, as it will only be used from within another Function in the same Service.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Private Serverless Function visibility setting from the Twilio Console UI\" class=\"richtext-image left\" height=\"528\" src=\"https://assets.cdn.prod.twilio.com/images/gjaufiuXqZIN4bHKoUmluYU6lZ6g-vvcDeFV98t19R54O0.width-500.png\" width=\"500\" /></p>\n<h4>Create <code>encrypted-gather</code> Function</h4>\n<p>Next, create the Function that will perform the sensitive &lt;Gather&gt; operations. This Function will be configured as the <a href=\"https://www.twilio.com/docs/usage/webhooks/voice-webhooks#incoming-voice-call\">incoming Phone Number voice webhook</a> in a later step.</p>\n<p>From this Function, the digits entered by the caller will be encrypted as soon as they are received, and sent in their encrypted state to the final, \u201cdestination\u201d Function.</p>\n<p><strong>Code</strong></p>\n<p>Create a new Function called <code>encrypted-gather</code> with the following code:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const axios = require('axios')\nconst AES = require(Runtime.getFunctions()['AES'].path)\n\nexports.handler = async function (context, event, callback) {\n    const twiml = new Twilio.twiml.VoiceResponse()\n\n    const secret_key = context.AES_SECRET\n\n    const functionUrl = `https://${context.DOMAIN_NAME}/encrypted-gather`\n    const dummyApi = `https://${context.DOMAIN_NAME}/decrypt-gather`\n\n    const step = event.step || \"getLast4CC\"\n\n    switch (step) {\n        case (\"getLast4CC\"):\n            gatherLast4Card(twiml, functionUrl);\n            break\n        case (\"getPin\"):\n            let encryptedCardDigits = AES.encrypt(event.Digits, secret_key)\n            gatherPin(twiml, encryptedCardDigits, functionUrl)\n            break\n        case (\"processData\"):\n            let encryptedPinDigits = AES.encrypt(event.Digits, secret_key)\n            await processGatheredData(twiml, event.encryptedCardDigits, encryptedPinDigits, dummyApi)\n            break\n    }\n\n    return callback(null, twiml)\n}\n\nconst gatherLast4Card = (twiml, functionUrl) =&gt; {\n    const gather = twiml.gather({\n        action: `${functionUrl}?step=getPin`,\n        method: 'POST',\n        input: 'dtmf',\n        timeout: 10,\n        numDigits: 4,\n    });\n    gather.say('Please enter last 4 digits of your payment card number.');\n\n    return gather\n}\n\nconst gatherPin = (twiml, encryptedCardDigits, functionUrl) =&gt; {\n    const gather = twiml.gather({\n        action: `${functionUrl}?step=processData&amp;encryptedCardDigits=${encryptedCardDigits}`,\n        method: 'POST',\n        input: 'dtmf',\n        timeout: 10,\n        numDigits: 4,\n    });\n    gather.say('Please enter your unique 4 digit identification number');\n\n    return gather\n}\n\nconst processGatheredData = async (twiml, encryptedCardDigits, encryptedPinDigits, dummy_url) =&gt; {\n    // make request to \"dummy\" api endpoint - example decrypt function\n    try {\n        const apiResponse = await axios({\n            method: 'post',\n            url: dummy_url,\n            data: {\n                encryptedCardDigits, encryptedPinDigits\n            }\n        })\n\n        twiml.say(`Thank you. Your account number is ${apiResponse.data.account} and your balance is ${apiResponse.data.balance}`)\n    }\n    catch (e) {\n        twiml.say(`We were not able to locate you in our system. Goodbye.`)\n    }\n\n    return twiml\n}\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This Function should be set to <a href=\"https://www.twilio.com/docs/serverless/functions-assets/visibility\">\"Protected\"</a>, as it will be called from within Twilio and can be secured with the <code>X-Twilio-Signature</code> header.  </p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Protected Serverless Function visibility setting from the Twilio Console UI\" class=\"richtext-image left\" height=\"515\" src=\"https://assets.cdn.prod.twilio.com/images/0NJJ5Rk954VVFMp2qVfZ5JYwGr147qxiazJwpD1NXxzs-c.width-500.png\" width=\"500\" /></p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>When implementing this solution in production, you\u2019ll need to change the decryption \u201cdummyApi\u201d variable to the URL of your backend service.</p>\n<p><code>const dummyApi = `https://${context.DOMAIN_NAME}/decrypt-gather`</code></p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p><strong>How is it encrypting?</strong></p>\n<p>At the top, you <a href=\"https://www.twilio.com/docs/serverless/functions-assets/client#getfunctions\">import the functions</a> created in the previous step with the following line:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const AES = require(Runtime.getFunctions()['AES'].path)\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>Then, you define your secret by getting it <a href=\"https://www.twilio.com/docs/serverless/functions-assets/functions/variables#consuming-environment-variables\">from the environment variable</a>:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const secret_key = context.AES_SECRET\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>And, most importantly, any sensitive information is wrapped with the <code>encrypt</code> function. (In this case, &lt;Gather&gt;'d information is passed as the <code>Digit</code> parameter, and can be accessed from the event object.)</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\"> let encryptedCardDigits = AES.encrypt(event.Digits, secret_key)\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This handles the encryption of the gathered information.</p>\n<h4>Create <code>decrypt-gather</code> Function</h4>\n<p>Finally, let\u2019s create a Function to demonstrate how to <strong>decrypt</strong> the sensitive data.</p>\n<p>In a production environment, this would likely be a request to your backend service that processes the caller information based on your business needs.</p>\n<p>In this solution, a third Function will act as the \u201cbackend service\u201d that processes this data. This Function will receive the encrypted digits and decrypt them for further processing.</p>\n<p><strong>Code</strong></p>\n<p>Create a new Function called <code>decrypt-gather</code> with the following code:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const AES = require(Runtime.getFunctions()['AES'].path)\n\nexports.handler = function(context, event, callback) {\n    const response = new Twilio.Response()\n    const secret_key = context.AES_SECRET\n\n    const last4card = AES.decrypt(event.encryptedCardDigits, secret_key)\n    const pin = AES.decrypt(event.encryptedPinDigits, secret_key)\n\n   //hard-coded values used for testing purposes\n    if (last4card === \"1234\" &amp;&amp; pin === \"4321\") {\n        response.setBody(JSON.stringify({\n            account: \"AC12345678\",\n            balance: \"12.55\"\n        }))\n    } else {\n        response.setStatusCode(404)\n        response.setBody(\"No data found\")\n    }\n\n    return callback(null, response)\n}\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This Function\u2019s visibility will be <a href=\"https://www.twilio.com/docs/serverless/functions-assets/visibility\">\"Public\"</a>, as it is pretending to be an external service.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Public Serverless Function visibility setting from the Twilio Console UI\" class=\"richtext-image left\" height=\"539\" src=\"https://assets.cdn.prod.twilio.com/images/tC-MMkRDe2YRQ7MgekGi1I4xzG2-3nhWVOcF_h30Leeb5j.width-500.png\" width=\"500\" /></p>\n<p><strong>How is it decrypting?</strong></p>\n<p>At the top, you <a href=\"https://www.twilio.com/docs/serverless/functions-assets/client#getfunctions\">import</a> <code>AES</code> functions again and define the <code>secret_key</code> as a variable.</p>\n<p>Then you call <code>decrypt</code> on the information that was previously encrypted:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">const last4card = AES.decrypt(event.encryptedCardDigits, secret_key)\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h2>Additional Configuration</h2>\n<h3>Phone Number Webhook</h3>\n<p>For the sake of simplicity, connect this Function directly to a Phone Number.</p>\n<p>To configure the Phone Number:</p>\n<ol>\n<li>From the Twilio Console, navigate to the <strong><a href=\"https://www.twilio.com/console/phone-numbers/\">Phone Numbers</a></strong><a href=\"https://www.twilio.com/console/phone-numbers/\"> section</a></li>\n<li>Select your phone number, then scroll to the <strong>Voice &amp; Fax</strong> section</li>\n<li>Set the <code>encrypted-gather</code> Function as the <strong>A call comes in</strong> webhook under <strong>Voice Configuration</strong></li>\n<li><strong>Save</strong> changes</li>\n</ol>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Voice Configuration &quot;A call comes in&quot; webhook set to encrypted-gather Function\" class=\"richtext-image full-width\" height=\"162\" src=\"https://assets.cdn.prod.twilio.com/images/Nl3bWTO5bUhq136qP6UbzwSqiB6TwDtjMrSqbUQwD1jAjs.width-800.png\" width=\"800\" /></p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <span alt=\"info message about a Twilio product\" class=\"docs-note-icon docs-note-icon--info\" title=\"info icon\"></span>\n  <p>If you hope to trigger this from Twilio Studio, check out <a href=\"https://www.twilio.com/blog/hiding-pii-phi-from-studio\">this blog post</a> to learn more about how to incorporate this solution securely with Studio.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h3>Enable PCI Mode</h3>\n<p>Almost done! You\u2019ve secured the Functions, but there\u2019s still one more area where Twilio retains gathered digits in plain-text \u2013 <a href=\"https://www.twilio.com/docs/voice/troubleshooting#product-specific-logs\">Voice call logs</a>.</p>\n<p>Below is a screenshot from the Twilio Console for an inbound call with the encrypted &lt;Gather&gt; solution implemented. Even though Functions secured the data, Voice hasn\u2019t.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Plain-text digits from Gather TwiML in the Twilio Voice Call log\" class=\"richtext-image left\" height=\"288\" src=\"https://assets.cdn.prod.twilio.com/images/iyLeMkQY_5uzYieev6DGSU3eQXOWWirhYe12Q9hLxQ2wqX.width-500_zjiMq9p.png\" width=\"500\" /></p>\n<p>There\u2019s only one way to prevent this data from being displayed in the Call log, and that\u2019s with <a href=\"https://www.twilio.com/docs/voice/tutorials/how-to-capture-payment-during-a-voice-call-generic-pay-connector#1-enable-pci-mode\">PCI Mode</a>. Enabling PCI Mode on your account will <strong>redact</strong> all data captured from any &lt;Gather&gt; operation.</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Redacted digits from Gather TwiML in Voice Call log\" class=\"richtext-image left\" height=\"300\" src=\"https://assets.cdn.prod.twilio.com/images/L3RI7I1nBRFlNgm_bHg7J6_6Kr-v93j1jLn-uJEm-gl92S.width-500_GMSNjWB.png\" width=\"500\" /></p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--warning\">\n  <span alt=\"warning message about a Twilio product\" class=\"docs-note-icon docs-note-icon--warning\" title=\"warning icon\"></span>\n  <p><strong>Enabling PCI Mode on an account is a one-way street. Once it\u2019s on, you won\u2019t be able to turn it off. Redaction may make troubleshooting Voice issues more challenging.</strong></p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>If you\u2019re serious about capturing sensitive information securely...</p>\n<ol>\n<li>Navigate to the Twilio <a href=\"https://www.twilio.com/console/voice/settings\">Voice Settings</a> in the Twilio Console. (In the left navigation pane, click on <strong>Voice &gt; Settings &gt; General</strong>.)</li>\n<li>Click on the <strong>Enable PCI Mode</strong> button.</li>\n<li><strong>Save</strong> changes.</li>\n</ol>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Programmable Voice Setting for enabling PCI Mode in the Twilio Console UI\" class=\"richtext-image full-width\" height=\"256\" src=\"https://assets.cdn.prod.twilio.com/images/T9JlIt9gaK-uGvsBD_ikYzWSFe0WrYYAsNkkn9X3ZMw8Nu.width-800.png\" width=\"800\" /></p>\n<h2>Make a call</h2>\n<p>Now it\u2019s the moment of truth\u2014it\u2019s time to place a test call to the phone number.</p>\n<p>From here, there are two paths to take.</p>\n<p>If you enter <code>1234</code> as the last 4 digits of your \u201ccredit card\u201d and <code>4321</code> as the unique PIN, you\u2019ll hear some \u201cdummy\u201d account information returned on the call. This is an example of a <strong>successful</strong> API response.</p>\n<p>If you enter any other digits, it will behave as though you aren\u2019t a known user and return a <code>404</code> response. This is an example of an <strong>unsuccessful</strong> request, which will log an error to the Twilio Debugger.</p>\n<h2>How do I know it worked?</h2>\n<p>Follow the unsuccessful path and take a look at your <a href=\"https://www.twilio.com/console/debugger\">Error log in the Twilio Console</a>.</p>\n<p>For the <code>404</code> error response, you\u2019ll find an <a href=\"https://www.twilio.com/docs/api/errors/82005\">82005 Error from Functions</a> with the following details:</p>\n<p><source type=\"image/webp\" /><source type=\"image/png\" /><img alt=\"Encrypted request parameters (32-character encrypted PIN and encrypted last 4 digits of card) from Twilio Function debugger error log\" class=\"richtext-image left\" height=\"342\" src=\"https://assets.cdn.prod.twilio.com/images/KSXZilCNkZgfSEpa6SPoVDJWnXuqG6yKHU5oXpTZAhEl6o.width-500.png\" width=\"500\" /></p>\n<p>This is good. Without the encryption, an unsuccessful response would have logged those variables in plain-text. But now the data will log in its safer, encrypted form.</p>\n<p>You can also check <a href=\"https://console.twilio.com/us1/monitor/logs/calls?frameUrl=%2Fconsole%2Fvoice%2Fcalls%2Flogs%3Fx-target-region%3Dus1\">your Call log</a> to confirm the digits show <code>*REDACTED*</code> there as well.</p>\n<h2>Is this secure?</h2>\n<p>Following this tutorial (including the optional PCI Mode steps) would prevent the data from logging in plain-text anywhere within Twilio\u2019s ecosystem, and it would prevent anyone at Twilio from being able to decrypt your sensitive data \u2013 making this an improvement over the default.</p>\n<p>However, the secret key used for encryption and decryption is stored as an Environment Variable on the Service, meaning users to whom you grant Twilio Functions access would be able to extract the key and potentially go through the effort to decrypt the values.</p>\n<h2>Final Recommendation</h2>\n<p>If you are making modifications to the sample code provided, please keep in mind that <a href=\"https://www.twilio.com/docs/serverless/api/resource/logs\">Functions retain console warnings and errors</a> within internal Twilio systems and in the <a href=\"https://www.twilio.com/console/debugger\">Twilio Debugger</a> <a href=\"https://www.twilio.com/docs/serverless/api/resource/logs#debugger-and-webhooks\">for some time</a>.</p>\n<p>Do not use any of the following console logging methods with any sensitive, unencrypted data:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-js\"><pre class=\"twlo-code language-js\"><code class=\"language-js\">console.log()\nconsole.warn()\nconsole.error()\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h2>Conclusion</h2>\n<p>In this lesson, you learned how you can protect data collected from &lt;Gather&gt; TwiML with encryption via a Serverless Function and redaction through Voice PCI Mode.</p>\n<p>If you want to collect payments from your callers, consider the fully PCI-compliant <a href=\"https://www.twilio.com/docs/voice/twiml/pay\">Twilio &lt;Pay&gt;</a> feature.</p>\n<p>To learn more about PCI compliance at Twilio, check out <a href=\"https://www.twilio.com/en-us/pci-compliance\">the documentation</a> and responsibility matrix.</p>\n<p>Users trust you to keep their sensitive information private. Make sure you respect and retain that trust by doing all you can to secure the data you process.</p>\n<p><em>Bry Schinina is a developer and educator who deeply appreciates when companies don\u2019t expose private information. She works as Tech Lead and Sr. Technical Account Manager at Twilio, solving complex problems and helping organizations succeed with their digital engagement platform. She can be reached at bschinina [at] twilio.com.</em></p>\n</div>"
    },
    "authors": [
      {
        "name": "Bry Schinina"
      }
    ],
    "author": "Bry Schinina",
    "author_detail": {
      "name": "Bry Schinina"
    },
    "published": "Wed, 10 Jan 2024 20:18:49 +0000",
    "published_parsed": [
      2024,
      1,
      10,
      20,
      18,
      49,
      2,
      10,
      0
    ],
    "id": "https://www.twilio.com/blog/protect-twilio-voice-input-encryption-redaction",
    "guidislink": false,
    "tags": [
      {
        "term": "Developers Drawing The Owl",
        "scheme": null,
        "label": null
      }
    ]
  }
}