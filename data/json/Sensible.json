{
  "company": "Sensible",
  "title": "Sensible",
  "xmlUrl": "http://blog.sensible.io/rss",
  "htmlUrl": "http://blog.sensible.io/",
  "content": "SSH Tunnel - Local and Remote Port Forwarding Explained With Examples - sensible.io BlogSSH Tunnel - Local and Remote Port Forwarding Explained With ExamplesPublished on May 17, 2014There are two ways to create an SSH tunnel, local and remote port forwarding (there\u2019s also dynamic forwarding, but we won\u2019t cover that here). The best way to understand these is by an example, let\u2019s start with local port forwarding. Imagine you\u2019re on a private network which doesn\u2019t allow connections to a specific server. Let\u2019s say you\u2019re at work and imgur.com is being blocked. To get around this we can create a tunnel through a server which isn\u2019t on our network and thus can access Imgur. $ ssh -L 9000:imgur.com:80 [email\u00a0protected]\n The key here is -L which says we\u2019re doing local port forwarding. Then it says we\u2019re forwarding our local port 9000 to imgur.com:80, which is the default port for HTTP. Now open your browser and go to http://localhost:9000. The awesome thing about SSH tunnels is that they are encrypted. Nobody is going to see what sites you\u2019re visiting, they\u2019ll only see an SSH connection to your server. Connecting to a database behind a firewall Another good example is if you need to access a port on your server which can only be accessed from localhost and not remotely. An example here is when you need to connect to a database console, which only allows local connection for security reasons. Let\u2019s say you\u2019re running PostgreSQL on your server, which by default listens on the port 5432. $ ssh -L 9000:localhost:5432 [email\u00a0protected]\n The part that changed here is the localhost:5432, which says to forward connections from your local port 9000 to localhost:5432 on your server. Now we can simply connect to our database. $ psql -h localhost -p 9000\n Now let\u2019s stop here for a little bit an explain what is actually going on. In the first example the 9000:imgur.com:80 is actually saying forward my local port 9000 to imgur.com at port 80. You can imagine SSH on your server actually making a connection (a tunnel) between those two ports, one on your local machine, and one on the target destination. If we however say something like 9000:localhost:5432, it means localhost from the server\u2019s perspective, not localhost on your machine. This means forward my local port 9000 to port 5432 on the server, because when you\u2019re on the server, localhost means the server itself. This might be a bit confusing, but it is important to understand what the syntax actually means here. Remote port forwarding Now comes the second part of this tutorial, which is remote port forwarding. This is again best to explain with an example. Say that you\u2019re developing a Rails application on your local machine, and you\u2019d like to show it to a friend. Unfortunately your ISP didn\u2019t provide you with a public IP address, so it\u2019s not possible to connect to your machine directly via the internet. Sometimes this can be solved by configuring NAT (Network Address Translation) on your router, but this doesn\u2019t always work, and it requires you to change the configuration on your router, which isn\u2019t always desirable. This solution also doesn\u2019t work when you don\u2019t have admin access on your network. To fix this problem you need to have another computer, which is publicly accessible and have SSH access to it. It can be any server on the internet, as long as you can connect to it. We\u2019ll tell SSH to make a tunnel that opens up a new port on the server, and connects it to a local port on your machine. $ ssh -R 3000:localhost:9000 [email\u00a0protected]\n The syntax here is very similar to local port forwarding, with a single change of -L for -R. But as with local port forwarding, the syntax remains the same. First you need to specify a local port on your machine which you wish to expose publicly, which in this case is 3000. Next there is the address on which the server should listen to, and a port on which the server should listen to, which in this case is 9000. There is one more thing you need to do to enable this. SSH doesn\u2019t by default allow remote hosts to forwarded ports. To enable this open /etc/ssh/sshd_config and add the following line somewhere in that config file. GatewayPorts yes\n Make sure you add it only once! $ sudo vim /etc/ssh/sshd_config\n And restart SSH $ sudo service ssh restart\n After this you should be able to connect to the server remotely, even from your local machine. The way this would work is that you would first create an SSH tunnel that forwards traffic from the server on port 9000 to your local machine on port 3000. This means that if you connect to the server on port 9000 from your local machine, you\u2019ll actually make a request to your machine through the SSH tunnel. A few closing tips You might have noticed that every time we create a tunnel you also SSH into the server and get a shell. This isn\u2019t usually necessary, as you\u2019re just trying to create a tunnel. To avoid this we can run SSH with the -nNT flags, such as the following, which will cause SSH to not allocate a tty and only do the port forwarding. $ ssh -nNT -L 9000:imgur.com:80 [email\u00a0protected]\n SSH has a huge number of features, so I\u2019d recommend you to checkout the manual page at man ssh, which contains even more tips. There\u2019s also an amazing talk called The Black Magic of SSH / SSH Can Do That?, which I really recommend you to watch. Written by Jakub Arnold of sensible.io.TweetDo you manage email campaigns for your business?We're building a tool to help businesses reach out to their customers more easily. It's called SendingBee and it's going to be awesome.I Want To Know More SendingBee - Email Marketing Made EasyGet email marketing toolManage marketing communication with your customers in one place.Who we areThis is the blog of sensible.io, a web consultancy company providing expertise in Ruby and Javascript.Recent articlesSSH Tunnel - Local and Remote Port Forwarding Explained With ExamplesSupercharge your VIM into IDE with CTagsDon't just dump code into your modelsGetting started with Ember App Kit4 Tips for Working with Dates in PostgreSQLPostgreSQL Sequences and Array Column TypesSetting up Redis for Production EnvironmentPostgreSQL Basics by ExampleStrong Parameters by ExampleEmber Model - IntroductionTagsrails (1)ruby (3)osx (1)vim (1)ember (3)ember-model (1)postgresql (3)ruby vim ctags (1)unix (1)redis (1)promises (1)Archives2014 (4)2013 (9)2012 (4)",
  "latestPost": {
    "title": "SSH Tunnel - Local and Remote Port Forwarding Explained With Examples",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://blog.sensible.io/rss",
      "value": "SSH Tunnel - Local and Remote Port Forwarding Explained With Examples"
    },
    "links": [
      {
        "rel": "alternate",
        "href": "https://blog.sensible.io/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html",
        "type": "text/html"
      }
    ],
    "link": "https://blog.sensible.io/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html",
    "id": "https://blog.sensible.io/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html",
    "guidislink": false,
    "published": "2014-05-17T17:57:00Z",
    "published_parsed": [
      2014,
      5,
      17,
      17,
      57,
      0,
      5,
      137,
      0
    ],
    "updated": "2014-05-17T17:57:00Z",
    "updated_parsed": [
      2014,
      5,
      17,
      17,
      57,
      0,
      5,
      137,
      0
    ],
    "authors": [
      {
        "name": "sensible.io team"
      }
    ],
    "author_detail": {
      "name": "sensible.io team"
    },
    "author": "sensible.io team",
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://blog.sensible.io/rss",
        "value": "<p>There are two ways to create an SSH tunnel, local and remote port\nforwarding (there&rsquo;s also dynamic forwarding, but we won&rsquo;t cover that\nhere). The best way to understand these is by an example, let&rsquo;s start\nwith local port forwarding.</p>\n\n<p>Imagine you&rsquo;re on a private network which doesn&rsquo;t allow connections to a\nspecific server. Let&rsquo;s say you&rsquo;re at work and imgur.com is being\nblocked. To get around this we can create a tunnel through a server\nwhich isn&rsquo;t on our network and thus can access Imgur.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -L 9000:imgur.com:80 user@example.com\n</code></pre></div>\n<p>The key here is <code>-L</code> which says we&rsquo;re doing local port forwarding. Then\nit says we&rsquo;re forwarding our local port <code>9000</code> to <code>imgur.com:80</code>,\nwhich is the default port for HTTP. Now open your browser and go to\n<a href=\"http://localhost:9000\">http://localhost:9000</a>.</p>\n\n<p>The awesome thing about SSH tunnels is that they are encrypted. Nobody\nis going to see what sites you&rsquo;re visiting, they&rsquo;ll only see an SSH\nconnection to your server.</p>\n\n<h2>Connecting to a database behind a firewall</h2>\n\n<p>Another good example is if you need to access a port on your server\nwhich can only be accessed from <code>localhost</code> and not remotely.</p>\n\n<p>An example here is when you need to connect to a database console, which\nonly allows local connection for security reasons. Let&rsquo;s say you&rsquo;re\nrunning PostgreSQL on your server, which by default listens on the port\n<code>5432</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -L 9000:localhost:5432 user@example.com\n</code></pre></div>\n<p>The part that changed here is the <code>localhost:5432</code>, which says to\nforward connections from your local port <code>9000</code> to <code>localhost:5432</code> on\nyour server. Now we can simply connect to our database.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ psql -h localhost -p 9000\n</code></pre></div>\n<p>Now let&rsquo;s stop here for a little bit an explain what is actually going\non. In the first example the <code>9000:imgur.com:80</code> is actually saying\n<code>forward my local port 9000 to imgur.com at port 80</code>. You can imagine\nSSH on your server actually making a connection (a tunnel) between those\ntwo ports, one on your local machine, and one on the target destination.</p>\n\n<p>If we however say something like <code>9000:localhost:5432</code>, it means\n<code>localhost</code> from the server&rsquo;s perspective, not localhost on your\nmachine. This means <code>forward my local port 9000 to port 5432 on\nthe server</code>, because when you&rsquo;re on the server, <code>localhost</code> means the\nserver itself.</p>\n\n<p>This might be a bit confusing, but it is important to understand what\nthe syntax actually means here.</p>\n\n<h2>Remote port forwarding</h2>\n\n<p>Now comes the second part of this tutorial, which is remote port\nforwarding. This is again best to explain with an example.</p>\n\n<p>Say that you&rsquo;re developing a Rails application on your local machine,\nand you&rsquo;d like to show it to a friend. Unfortunately your ISP didn&rsquo;t\nprovide you with a public IP address, so it&rsquo;s not possible to connect\nto your machine directly via the internet.</p>\n\n<p>Sometimes this can be solved by configuring NAT (Network Address\nTranslation) on your router, but this doesn&rsquo;t always work, and it\nrequires you to change the configuration on your router, which isn&rsquo;t\nalways desirable. This solution also doesn&rsquo;t work when you don&rsquo;t have\nadmin access on your network.</p>\n\n<p>To fix this problem you need to have another computer, which is publicly\naccessible and have SSH access to it. It can be any server on the\ninternet, as long as you can connect to it. We&rsquo;ll tell SSH to make a\ntunnel that opens up a new port on the server, and connects it to a\nlocal port on your machine.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -R 3000:localhost:9000 user@example.com\n</code></pre></div>\n<p>The syntax here is very similar to local port forwarding, with a\nsingle change of <code>-L</code> for <code>-R</code>. But as with local port forwarding, the\nsyntax remains the same.</p>\n\n<p>First you need to specify a local port on your machine which you wish\nto expose publicly, which in this case is <code>3000</code>. Next there is the\naddress on which the server should listen to, and a port on which the\nserver should listen to, which in this case is <code>9000</code>.</p>\n\n<p>There is one more thing you need to do to enable this. SSH doesn&rsquo;t by\ndefault allow remote hosts to forwarded ports. To enable this open\n<code>/etc/ssh/sshd_config</code> and add the following line somewhere in that\nconfig file.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>GatewayPorts yes\n</code></pre></div>\n<p>Make sure you add it only once!</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ sudo vim /etc/ssh/sshd_config\n</code></pre></div>\n<p>And restart SSH</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ sudo service ssh restart\n</code></pre></div>\n<p>After this you should be able to connect to the server remotely, even\nfrom your local machine. The way this would work is that you would\nfirst create an SSH tunnel that forwards traffic from the server on\nport <code>9000</code> to your local machine on port <code>3000</code>. This means that if\nyou connect to the server on port <code>9000</code> from your local machine,\nyou&rsquo;ll actually make a request to your machine through the SSH tunnel.</p>\n\n<h2>A few closing tips</h2>\n\n<p>You might have noticed that every time we create a tunnel you also SSH\ninto the server and get a shell. This isn&rsquo;t usually necessary, as you&rsquo;re\njust trying to create a tunnel. To avoid this we can run SSH with the\n<code>-nNT</code> flags, such as the following, which will cause SSH to not\nallocate a tty and only do the port forwarding.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -nNT -L 9000:imgur.com:80 user@example.com\n</code></pre></div>\n<p>SSH has a huge number of features, so I&rsquo;d recommend you to checkout the\nmanual page at <code>man ssh</code>, which contains even more tips.</p>\n\n<p>There&rsquo;s also an amazing talk called <a href=\"http://vimeo.com/54505525\">The Black Magic of SSH / SSH Can Do\nThat?</a>, which I really recommend you to\nwatch.</p>"
      }
    ],
    "summary": "<p>There are two ways to create an SSH tunnel, local and remote port\nforwarding (there&rsquo;s also dynamic forwarding, but we won&rsquo;t cover that\nhere). The best way to understand these is by an example, let&rsquo;s start\nwith local port forwarding.</p>\n\n<p>Imagine you&rsquo;re on a private network which doesn&rsquo;t allow connections to a\nspecific server. Let&rsquo;s say you&rsquo;re at work and imgur.com is being\nblocked. To get around this we can create a tunnel through a server\nwhich isn&rsquo;t on our network and thus can access Imgur.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -L 9000:imgur.com:80 user@example.com\n</code></pre></div>\n<p>The key here is <code>-L</code> which says we&rsquo;re doing local port forwarding. Then\nit says we&rsquo;re forwarding our local port <code>9000</code> to <code>imgur.com:80</code>,\nwhich is the default port for HTTP. Now open your browser and go to\n<a href=\"http://localhost:9000\">http://localhost:9000</a>.</p>\n\n<p>The awesome thing about SSH tunnels is that they are encrypted. Nobody\nis going to see what sites you&rsquo;re visiting, they&rsquo;ll only see an SSH\nconnection to your server.</p>\n\n<h2>Connecting to a database behind a firewall</h2>\n\n<p>Another good example is if you need to access a port on your server\nwhich can only be accessed from <code>localhost</code> and not remotely.</p>\n\n<p>An example here is when you need to connect to a database console, which\nonly allows local connection for security reasons. Let&rsquo;s say you&rsquo;re\nrunning PostgreSQL on your server, which by default listens on the port\n<code>5432</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -L 9000:localhost:5432 user@example.com\n</code></pre></div>\n<p>The part that changed here is the <code>localhost:5432</code>, which says to\nforward connections from your local port <code>9000</code> to <code>localhost:5432</code> on\nyour server. Now we can simply connect to our database.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ psql -h localhost -p 9000\n</code></pre></div>\n<p>Now let&rsquo;s stop here for a little bit an explain what is actually going\non. In the first example the <code>9000:imgur.com:80</code> is actually saying\n<code>forward my local port 9000 to imgur.com at port 80</code>. You can imagine\nSSH on your server actually making a connection (a tunnel) between those\ntwo ports, one on your local machine, and one on the target destination.</p>\n\n<p>If we however say something like <code>9000:localhost:5432</code>, it means\n<code>localhost</code> from the server&rsquo;s perspective, not localhost on your\nmachine. This means <code>forward my local port 9000 to port 5432 on\nthe server</code>, because when you&rsquo;re on the server, <code>localhost</code> means the\nserver itself.</p>\n\n<p>This might be a bit confusing, but it is important to understand what\nthe syntax actually means here.</p>\n\n<h2>Remote port forwarding</h2>\n\n<p>Now comes the second part of this tutorial, which is remote port\nforwarding. This is again best to explain with an example.</p>\n\n<p>Say that you&rsquo;re developing a Rails application on your local machine,\nand you&rsquo;d like to show it to a friend. Unfortunately your ISP didn&rsquo;t\nprovide you with a public IP address, so it&rsquo;s not possible to connect\nto your machine directly via the internet.</p>\n\n<p>Sometimes this can be solved by configuring NAT (Network Address\nTranslation) on your router, but this doesn&rsquo;t always work, and it\nrequires you to change the configuration on your router, which isn&rsquo;t\nalways desirable. This solution also doesn&rsquo;t work when you don&rsquo;t have\nadmin access on your network.</p>\n\n<p>To fix this problem you need to have another computer, which is publicly\naccessible and have SSH access to it. It can be any server on the\ninternet, as long as you can connect to it. We&rsquo;ll tell SSH to make a\ntunnel that opens up a new port on the server, and connects it to a\nlocal port on your machine.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -R 3000:localhost:9000 user@example.com\n</code></pre></div>\n<p>The syntax here is very similar to local port forwarding, with a\nsingle change of <code>-L</code> for <code>-R</code>. But as with local port forwarding, the\nsyntax remains the same.</p>\n\n<p>First you need to specify a local port on your machine which you wish\nto expose publicly, which in this case is <code>3000</code>. Next there is the\naddress on which the server should listen to, and a port on which the\nserver should listen to, which in this case is <code>9000</code>.</p>\n\n<p>There is one more thing you need to do to enable this. SSH doesn&rsquo;t by\ndefault allow remote hosts to forwarded ports. To enable this open\n<code>/etc/ssh/sshd_config</code> and add the following line somewhere in that\nconfig file.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>GatewayPorts yes\n</code></pre></div>\n<p>Make sure you add it only once!</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ sudo vim /etc/ssh/sshd_config\n</code></pre></div>\n<p>And restart SSH</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ sudo service ssh restart\n</code></pre></div>\n<p>After this you should be able to connect to the server remotely, even\nfrom your local machine. The way this would work is that you would\nfirst create an SSH tunnel that forwards traffic from the server on\nport <code>9000</code> to your local machine on port <code>3000</code>. This means that if\nyou connect to the server on port <code>9000</code> from your local machine,\nyou&rsquo;ll actually make a request to your machine through the SSH tunnel.</p>\n\n<h2>A few closing tips</h2>\n\n<p>You might have noticed that every time we create a tunnel you also SSH\ninto the server and get a shell. This isn&rsquo;t usually necessary, as you&rsquo;re\njust trying to create a tunnel. To avoid this we can run SSH with the\n<code>-nNT</code> flags, such as the following, which will cause SSH to not\nallocate a tty and only do the port forwarding.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ ssh -nNT -L 9000:imgur.com:80 user@example.com\n</code></pre></div>\n<p>SSH has a huge number of features, so I&rsquo;d recommend you to checkout the\nmanual page at <code>man ssh</code>, which contains even more tips.</p>\n\n<p>There&rsquo;s also an amazing talk called <a href=\"http://vimeo.com/54505525\">The Black Magic of SSH / SSH Can Do\nThat?</a>, which I really recommend you to\nwatch.</p>"
  }
}