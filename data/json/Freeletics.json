{
  "company": "Freeletics",
  "title": "Freeletics",
  "xmlUrl": "https://freeletics.engineering/feed.xml",
  "htmlUrl": "https://freeletics.engineering/",
  "content": "\n\n\n\n\ndroidcon Berlin 2021: impressions and trends - Freeletics Engineering Blog\n\n\n\ndroidcon Berlin 2021: impressions and trends | Freeletics Engineering Blog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndroidcon Berlin 2021: impressions and trends\n\n\n\n\t\t\tNov 16, 2021\n\t\t\n \u2022 \n\t\t\t\n\t\t\t\tAlexey Reznik\n\n\n\nLast month three Android engineers from Freeletics went to the first in a long time in-person conference - droidcon Berlin 2021. The conference was packed with interesting topics, this blog post is just a snapshot of topics we were most interested in.\nFull content of the conference can be found here, all the talks have been recorded and can be found here.\nAbout the conference\ndroidcon Berlin is one of the oldest Android conferences in the world making its first appearance in 2009 only 1 year after Android 1.0 was released. The conference is known for attracting some of the most famous people in the Android community in Europe and worldwide, such as private contributors, Google Developer Experts, Kotlin experts, engineers from Google. What was great, is that participants were able to propose their own topics for the 3rd day of the conference, which was focused on the community. Topics and panel discussions for that day were chosen by popular vote.\nKeynote speaker - Chet Haase\nChet is one of the early engineers on the Android project, having joined the project in 2010 just 2 years after Android 1.0. He has been mostly working on and leading the UI Toolkit team at Google and is probably most known in the community as a host of Android Developers Backstage podcast.\nIn his keynote presentation, Chet took a dive into the history of Android as a software project outlining challenges the team had to face in the early stages. The team had to pivot from the initial idea of building a software platform for cameras, push the idea through with the VCs and face a vigorous competition on the market at the time (Symbian OS, Blackberry RIM, later iPhone).\nOne of the key reasons for success was having a long-term vision for the product, according to Chet. In the end the project managed to succeed and Android became the most widespread mobile platform running on more than 3 billion devices today, giving millions of developers (including us) room for creativity.\nThe main trend in Android development in 2021-  (surprise, surprise) Jetpack Compose\nEarlier this year Jetpack Compose reached its official 1.0 production release status. Jetpack Compose is a new approach to defining UI elements on Android in a declarative way (similar to SwiftUI on Apple devices). UI elements can be represented as Composable Kotlin functions as opposed to using XML text files, the approach that was predominantly used before since the inception of Android.\nNaturally a 2021 Android conference was dominated by Compose-related topics, ranging from migration stories with gotchas when adopting Compose, state management and interoperability to deep dives into the internals of Compose covering rendering model with group slots, snapshots and testing.\nSurprisingly, not that many companies are using Compose in their production environment, according to the data from the \u201cmost\u201d reliable source - a vote by show of hands in the room. For us though, every new screen we\u2019ve shiped since the release of Jetpack Compose has been built using Compose, which is something we can be proud of.\nKotlin Flows\nFlows, despite being cold, have been a hot topic for a while now. Many Android developers are using Jetpacks LiveData these days, to handle UI updates in a lifecycle aware way. Now Flows are the new thing that everyone talks about. But are they an easy drop-in replacement for LiveData? \nThis question is answered by Fatih Giris\u2019 talk Using Kotlin Flow in MVVM. In his talk, Fatih shows step by step how we can replace LiveData with Flows and which caveats are waiting for us. He details the differences between both technologies and shows how Flows can be made lifecycle aware (Spoiler: They aren\u2019t by default). He offers a way to slowly migrate, by using LiveData and Flow together, before removing LiveData completely. To top it off, he shows how to easily write UnitTests when using Flows. You can check out his slides here or his Medium article about the talk here.\nAnnotation Processors\nA personal highlight for us was the talk Your own Annotation Processor by Gabriel Samojlo. Annotation Processors is the topic most Android developers have heard about, but not everyone is familiar with how they work, not to mention how to build one. In short, an Annotation Processor scans the code for Annotations (e.g. @Singleton) in order to process the annotated code and do something with it. In many cases this mechanism is used to auto-generate code, which is very convenient for developers because it reduces boilerplate code and saves development time. And this is exactly what Gabriel impressively demonstrated in his 40 min talk, by showing a hands-on example on how to implement a simple Annotation Processor, which generates \u201ckotlinx.serializable\u201d data models just by adding one annotation to it. If you want to check out this example for yourself, head over to his Github page, where he provides the source code for this talk.\nScaling an Android app\nThere were plenty of talks that addressed classical Software Engineering challenges. How should the app architecture evolve when the team is going through a rapid growth phase in a way that multiple teams are able to work independently? Engineers from Zalando gave an overview of their app architecture evolution in such a phase showing interesting insights into how their gradle setup evolved over time.\nAssuring multiple teams work together in a productive way goes hand in hand with build and release automations. Naturally, there has been no shortage of CI/CD related topics. The one that we found the most interesting was the talk from Ubiratan Soares where he demonstrated how easy it is to work with GitHub actions to configure daily Android workflows.\nWrap up\nOverall we had a great time in Berlin and enjoyed the conference. Even though most of the conferences nowadays can be streamed or watched later from home, it\u2019s nice to see fellow Android developers from other companies in person and stumble upon old colleagues.\nGoing to an in-person conference is definitely one of the best ways to get yourself familiar with the tech scene in Germany and in Europe, which is especially important for those of us relatively new here. Listening to conference talks can be a good first push to start on a learning path of a topic that has long been in some old dusty TODO list.\n\nAlexey Reznik, Sebastian Neubauer, Thomas Kioko\n\n\n\n\n\n\n\n\n              Freeletics Engineering Blog\n            \n\n              \u00a9 2019 Freeletics GmbH\n            \n\nfreeletics.com\n\n\nAVAILABLE JOB OFFERS\n\n\n\n\n\n\n\nfreeletics\n\n\n\nFreeleticsEng\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "droidcon Berlin 2021: impressions and trends",
    "title_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://freeletics.engineering/feed.xml",
      "value": "droidcon Berlin 2021: impressions and trends"
    },
    "links": [
      {
        "href": "https://freeletics.engineering/2021/11/16/droidcon-berlin-2021.html",
        "rel": "alternate",
        "type": "text/html",
        "title": "droidcon Berlin 2021: impressions and trends"
      }
    ],
    "link": "https://freeletics.engineering/2021/11/16/droidcon-berlin-2021.html",
    "published": "2021-11-16T11:00:00+00:00",
    "published_parsed": [
      2021,
      11,
      16,
      11,
      0,
      0,
      1,
      320,
      0
    ],
    "updated": "2021-11-16T11:00:00+00:00",
    "updated_parsed": [
      2021,
      11,
      16,
      11,
      0,
      0,
      1,
      320,
      0
    ],
    "id": "https://freeletics.engineering/2021/11/16/droidcon-berlin-2021",
    "guidislink": false,
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://freeletics.engineering/2021/11/16/droidcon-berlin-2021.html",
        "value": "<p>Last month three Android engineers from Freeletics went to the first in a long time in-person conference - droidcon Berlin 2021. The conference was packed with interesting topics, this blog post is just a snapshot of topics we were most interested in.</p>\n\n<p>Full content of the conference can be found <a href=\"https://www.berlin.droidcon.com/schedule\">here</a>, all the talks have been recorded and can be found <a href=\"https://www.droidcon.com/content/?filter_postyear=2021&amp;filter_post_event_tag=droidcon-berlin\">here</a>.</p>\n\n<h2 id=\"about-the-conference\">About the conference</h2>\n<p>droidcon Berlin is <strong>one of the oldest Android conferences in the world</strong> making its first appearance in 2009 only 1 year after Android 1.0 was released. The conference is known for attracting some of the most famous people in the Android community in Europe and worldwide, such as private contributors, Google Developer Experts, Kotlin experts, engineers from Google. What was great, is that participants were able to propose their own topics for the 3rd day of the conference, which was focused on the community. Topics and panel discussions for that day were chosen by popular vote.</p>\n\n<h2 id=\"keynote-speaker---chet-haase\">Keynote speaker - Chet Haase</h2>\n<p>Chet is one of the early engineers on the Android project, having joined the project in 2010 just 2 years after Android 1.0. He has been mostly working on and leading the UI Toolkit team at Google and is probably most known in the community as a host of <a href=\"https://open.spotify.com/show/1oROjHFwXUkoeqgivvgAal?si=aI_rkONLQ5WZ-dHBzi9ldQ\">Android Developers Backstage</a> podcast.</p>\n\n<p>In his keynote presentation, Chet took a dive into the history of Android as a software project outlining challenges the team had to face in the early stages. The team had to pivot from the initial idea of building a software platform for cameras, push the idea through with the VCs and face a vigorous competition on the market at the time (Symbian OS, Blackberry RIM, later iPhone).</p>\n\n<p><strong>One of the key reasons for success was having a long-term vision for the product</strong>, according to Chet. In the end the project managed to succeed and Android became the most widespread mobile platform running on more than 3 billion devices today, giving millions of developers (including us) room for creativity.</p>\n\n<h2 id=\"the-main-trend-in-android-development-in-2021---surprise-surprise-jetpack-compose\">The main trend in Android development in 2021-  (surprise, surprise) Jetpack Compose</h2>\n<p>Earlier this year Jetpack Compose reached its official 1.0 production release status. Jetpack Compose is a new approach to defining UI elements on Android in a declarative way (similar to SwiftUI on Apple devices). UI elements can be represented as Composable Kotlin functions as opposed to using XML text files, the approach that was predominantly used before since the inception of Android.</p>\n\n<p>Naturally a 2021 Android conference was dominated by Compose-related topics, ranging from <a href=\"https://www.droidcon.com/2021/11/10/the-journey-of-adopting-jetpack-compose-in-babbels-app/\">migration stories</a> with gotchas when adopting Compose, <a href=\"https://www.droidcon.com/2021/11/10/hosting-our-states-in-compose/\">state management</a> and interoperability to deep dives into the <a href=\"https://www.droidcon.com/2021/11/10/a-hitchhikers-guide-to-compose-compiler-composers-compiler-plugins-and-snapshots/\">internals of Compose</a> covering rendering model with group slots, snapshots and <a href=\"https://www.droidcon.com/2021/11/10/testing-jetpack-compose-ui/\">testing</a>.</p>\n\n<p>Surprisingly, not that many companies are using Compose in their production environment, according to the data from the \u201cmost\u201d reliable source - a vote by show of hands in the room. For us though, <strong>every new screen we\u2019ve shiped since the release of Jetpack Compose has been built using Compose, which is something we can be proud of.</strong></p>\n\n<h2 id=\"kotlin-flows\">Kotlin Flows</h2>\n<p>Flows, despite being cold, have been a hot topic for a while now. Many Android developers are using Jetpacks LiveData these days, to handle UI updates in a lifecycle aware way. Now Flows are the new thing that everyone talks about. But are they an easy drop-in replacement for LiveData? \nThis question is answered by Fatih Giris\u2019 talk <a href=\"https://www.droidcon.com/2021/11/10/using-kotlin-flow-in-mvvm/\">Using Kotlin Flow in MVVM</a>. In his talk, Fatih shows step by step how we can replace LiveData with Flows and which caveats are waiting for us. He details the differences between both technologies and shows how Flows can be made lifecycle aware (Spoiler: They aren\u2019t by default). He offers a way to slowly migrate, by using LiveData and Flow together, before removing LiveData completely. To top it off, he shows how to easily write UnitTests when using Flows. You can check out his slides <a href=\"https://speakerdeck.com/fgiris/using-kotlin-flow-in-mvvm\">here</a> or his Medium article about the talk <a href=\"https://proandroiddev.com/using-livedata-flow-in-mvvm-part-i-a98fe06077a0\">here</a>.</p>\n\n<h2 id=\"annotation-processors\">Annotation Processors</h2>\n<p>A personal highlight for us was the talk <a href=\"https://www.droidcon.com/2021/11/10/your-own-annotation-processor/\">Your own Annotation Processor</a> by Gabriel Samojlo. Annotation Processors is the topic most Android developers have heard about, but not everyone is familiar with how they work, not to mention how to build one. In short, an Annotation Processor scans the code for Annotations (e.g. @Singleton) in order to process the annotated code and do something with it. In many cases this mechanism is used to auto-generate code, which is very convenient for developers because it reduces boilerplate code and saves development time. And this is exactly what Gabriel impressively demonstrated in his 40 min talk, by showing a hands-on example on how to implement a simple Annotation Processor, which generates \u201ckotlinx.serializable\u201d data models just by adding one annotation to it. If you want to check out this example for yourself, head over to his Github page, where he provides the <a href=\"https://github.com/GabrielSamojlo/annotation-processor\">source code</a> for this talk.</p>\n\n<h2 id=\"scaling-an-android-app\">Scaling an Android app</h2>\n<p>There were plenty of talks that addressed classical Software Engineering challenges. How should the app architecture evolve when the team is going through a rapid growth phase in a way that multiple teams are able to work independently? Engineers from Zalando gave an <a href=\"https://www.droidcon.com/2021/11/10/scaling-app-development-at-zalando/\">overview</a> of their app architecture evolution in such a phase showing interesting insights into how their gradle setup evolved over time.</p>\n\n<p>Assuring multiple teams work together in a productive way goes hand in hand with build and release automations. Naturally, there has been no shortage of CI/CD related topics. The one that we found the most interesting was the talk from Ubiratan Soares where he <a href=\"https://www.droidcon.com/2021/11/10/automating-android-workflows-with-github-actions/\">demonstrated</a> how easy it is to work with GitHub actions to configure daily Android workflows.</p>\n\n<h2 id=\"wrap-up\">Wrap up</h2>\n<p>Overall we had a great time in Berlin and enjoyed the conference. Even though most of the conferences nowadays can be streamed or watched later from home, <strong>it\u2019s nice to see fellow Android developers from other companies in person and stumble upon old colleagues</strong>.</p>\n\n<p>Going to an in-person conference is definitely one of the best ways to get yourself familiar with the tech scene in Germany and in Europe, which is especially important for those of us relatively new here. Listening to conference talks can be a good first push to start on a learning path of a topic that has long been in some old dusty TODO list.</p>\n\n<p><img alt=\"Alexey, Sebastian and Thomas at droidcon\" src=\"https://freeletics.engineering/images/droidcon/together_picture.jpg\" /></p>\n\n<center>Alexey Reznik, Sebastian Neubauer, Thomas Kioko</center>"
      }
    ],
    "summary": "Last month three Android engineers from Freeletics went to the first in a long time in-person conference - droidcon Berlin 2021. The conference was packed with interesting topics, this blog post is just a snapshot of topics we were most interested in.",
    "authors": [
      {
        "name": "Alexey Reznik"
      }
    ],
    "author_detail": {
      "name": "Alexey Reznik"
    },
    "author": "Alexey Reznik",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://freeletics.engineering/feed.xml",
      "value": "Last month three Android engineers from Freeletics went to the first in a long time in-person conference - droidcon Berlin 2021. The conference was packed with interesting topics, this blog post is just a snapshot of topics we were most interested in."
    }
  }
}