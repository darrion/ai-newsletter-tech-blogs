{
  "company": "Soundcloud",
  "title": "Soundcloud",
  "xmlUrl": "https://developers.soundcloud.com/blog.rss",
  "htmlUrl": "https://developers.soundcloud.com/blog/",
  "content": "Android Large Screen Optimization | SoundCloud Backstage BlogThis app works best with JavaScript enabled.DevelopersBlogTwitterYour AppsJobsAndroid Large Screen OptimizationJuly 31st, 2023 by Arlind HajredinajLarge Screen Devices - The New Frontier\n\nRecently, the Android team at SoundCloud took on a project to optimize the Android app for large screen devices. With the increasing use of devices like tablets, foldables, and Chromebooks, we decided to provide better support for them.\nThe data showed us users were adopting these devices rapidly. What is more, both Google and Samsung had been vocal about the importance of optimizing for larger screens.\nGoogle is even launching a new Playstore for large screen optimized apps only.\nIn this blog post, we\u00e2\u0080\u0099ll go through some of the challenges we faced, the UX and UI changes we made, and the code implementation. We hope our experiences will help you in your own large-screen adventures.\nWhy did we invest in Large Screens?\nWe saw a trend among our users - more and more of them were using SoundCloud on their tablets, foldable devices, and Chromebooks. And it wasn\u00e2\u0080\u0099t just happening in our user base. Google and Samsung have been going all-in on large screens, bringing them more into the mainstream.\nWhen Google rolled out their Pixel Tablet, well-known tech reviewer Marques Brownlee pointed out that SoundCloud stood out from the crowd. He appreciated that we didn\u00e2\u0080\u0099t just stretch our phone app to fit the larger screen, but instead, we crafted an experience that fully utilized the extra space. If you\u00e2\u0080\u0099re interested, you can check out the video here.\nOur Investigation\nWhere and how is music on large screens heard?\nFun fact: People listen to music on their Tablets mostly while cooking.\nImagine you\u00e2\u0080\u0099re in the middle of preparing a meal, your hands are busy, but you can still easily control your music - that\u00e2\u0080\u0099s convenience at its best.\nBut it\u00e2\u0080\u0099s not just about individual experiences. Tablets come into play during social events as well. The larger screen makes it simpler for everyone to engage with the music, whether it\u00e2\u0080\u0099s to see what\u00e2\u0080\u0099s currently playing or to add their favorite track to the queue.\nThrough understanding these usage scenarios, we can better tailor our services to enhance the music listening experiences of our users. Be it cooking dinner or hosting a gathering, SoundCloud is there to make those moments even better with great music.\nGoogle\u00e2\u0080\u0099s and Samsung\u00e2\u0080\u0099s Large Screens Guide\nGoogle\u00e2\u0080\u0099s and Samsung\u00e2\u0080\u0099s large screen guides are roadmaps for developers wanting to optimize their apps for large screens. It encourages using scalable images and responsive and dynamic layouts for a consistent user experience across different screen sizes.\nGoogle also highlights using the extra space for features like split-screen views, and emphasizes touch target sizing, clear text, and intuitive navigation. Following these best practices ensures apps are user-friendly and competitive in the large screen devices market.\nGoogle\u00e2\u0080\u0099s Large Screen Compatibility Checklist\nGoogle\u00e2\u0080\u0099s Large Screen Checklist, available in their Android developer documentation, provides developers with a tier-based framework for ensuring high-quality app experiences on large screen devices. The checklist encompasses not only UI design but also considerations for navigation, keyboard/stylus input, and overall app usage.\nThe checklist is divided into tiers, offering developers a structured approach to prioritize and implement essential features and optimizations based on the level of support desired for large screen devices. The tiers range from basic support to more advanced features and functionalities that fully leverage the potential of large screens.\nThe SoundCloud App\nWhen we reviewed Google\u00e2\u0080\u0099s checklist it was clear that the SoundCloud app fell short in certain areas, particularly in terms of adapting the screen layout. The app\u00e2\u0080\u0099s tendency to merely stretch the phone layout to fit larger screens resulted in a less than optimal user interface. This realization was our call to action.\nIn the upcoming sections, we\u00e2\u0080\u0099ll take you on a visual tour of these components, accompanied by code snippets and technical explanations to provide you with an inside look at our optimization process.\nBottom Navigation Bar\nBefore: \u00e2\u009d\u008c Horizontally stretched phone layout bottom navigation bar\n\n\n\n\n\n\nTraditionally, SoundCloud\u00e2\u0080\u0099s Android app utilized a bottom navigation bar in a phone layout, which was stretched horizontally to fit larger screen sizes. This approach was straightforward, but it proved ineffective for larger screens. The extended navigation bar made it difficult for users to navigate the app, as it required them to move their focus from one end of the screen to the other.\nAfter: \u00e2\u009c\u0085 Nav bar rail optimized for large screens\n\n\n\n\n\n\nTo remedy this, we adopted a vertical navigation rail for large screen layouts, aligning it to the side of the screen. This is recommended by Google as it provides a more comfortable browsing experience. The menu options are now neatly stacked in a column, making them accessible without the need for extensive eye or cursor movement.\nCode Implementation\nBefore: BottomNavigationView\nPreviously, the SoundCloud Android app used a BottomNavigationView to create the bottom navigation bar. This worked well on smaller devices but led to a stretched UI on larger screens.\nAfter: NavigationRailView \nTo address this, we replaced the BottomNavigationView with NavigationRailView for larger screens. Both these classes implement the NavigationBarView interface. This allows for a smooth transition with minimal code changes.\nTo differentiate between smaller and larger screens, we created two separate layout files. One uses the BottomNavigationView, and the other uses the NavigationRailView. In Kotlin, we dynamically set the layout file based on the size of the device.\nIdentifying Large Devices\nWe identify whether a device is large or small by using a boolean variable, is_tablet, defined in three separate XML value files based on the screen width.\n// res/values-sw600dp/booleans.xml\n<bool name=\"is_tablet\">true</bool>\n\n// res/values-sw370dp/booleans.xml\n<bool name=\"is_tablet\">false</bool>\n\n// res/values/booleans.xml\n<bool name=\"is_tablet\">false</bool>\nIn Kotlin, we check the is_tablet boolean value and set the layout file accordingly. This is done using the following code:\nval isTablet = context.resources.getBoolean(R.bool.is_tablet)\n\nif(isTablet) {\n    setContentView(R.layout.tablet_layout)\n} else {\n    setContentView(R.layout.phone_layout)\n}\nHardcoding resources is not the best solution. Google\u00e2\u0080\u0099s documentation provides some great insights on supporting different screen sizes, including the concept of Window Size Classes. Window Sizes allow the UI to adapt to various window configurations on foldable and large screen devices. Here\u00e2\u0080\u0099s the link for more details: Window Size Classes.\nUnit Testing and A/B Testing\nTo enable testing, we added a wrapper class around the isTablet boolean. We also leveraged feature flags to conduct A/B testing of our new layout. We introduced a class NavRailExperiment to check both the device type and the feature flag state:\nHere\u00e2\u0080\u0099s a look at our implementation of this approach:\nclass NavRailExperiment(private val appFeatures: AppFeatures) {\n    val isEnabled: Boolean\n        get() = context.resources.getBoolean(R.bool.is_tablet) && appFeatures.isNavRailEnabled()\n}\nMini Player\nTransitioning from a Stretched Phone Layout Mini Player to a Right-Aligned Mini Player\nBefore: \u00e2\u009d\u008c Horizontally stretched phone layout Mini Player\n\n\n\n\n\n\nIn the past, SoundCloud\u00e2\u0080\u0099s Android app featured a Mini Player stretched horizontally across the screen. While this design worked for smaller screens, it resulted in a suboptimal user experience on larger devices due to the extended reach required to interact with it.\nAfter: \u00e2\u009c\u0085 Small right-aligned Mini Player optimized for large screens\n\n\n\n\n\n\nTo provide a more user-friendly interface we opted for a small Mini Player on the right side of the screen. This ensures controls are comfortably within thumb reach.\nCode Implementation\nThe Player is a BottomSheet with a ViewPager, the Mini Player is a view inside each page of the ViewPager. We use a BottomSheetBehavior to support  collapsed and expanded states. In the expanded state the player shows the full width and height of the ViewPager.\nIn collapsed state it shows only the Mini Player view, and the height is collapsed to 50dp. The width was always match_parent, but since we want it to be small, we set the width of the BottomSheet to 200dp.\nThe class BottomSheetBehavior provides us with a method setMaxWidth which we use to set the width while animating the collapse and expansion of the BottomSheet Player.\nThe other issue here is that we also have to set the width on the ViewPager and the ViewPager\u00e2\u0080\u0099s visible page.\nAdditionally, we must move the player to the right side thus setting the left margin on layout params on each player transition.\nTheBottomSheetBehavior also has a BottomSheetBehavior.BottomSheetCallback field.\nThe BottomSheetBehavior.BottomSheetCallback has an onSlide method which allows us to set the width and left margin on the BottomSheet and the ViewPager\u00e2\u0080\u0099s visible page.\nBelow is the code: \nbottomSheetBehavior.bottomSheetCallback = BottomSheetBehavior.BottomSheetCallback() {         \n    val miniplayerWidth = screenWidth * offset\n    val leftMargin = screenWidth - miniplayerWidth\n        \n    setLeftMargin(viewPager.views(), leftMargin)\n        \n    setWidth(viewPager.views(), bottomSheet, miniplayerWidth)\n};\nComments & Playqueue on Player\nThe SoundCloud Android app hosts two main features on its player screen - the comments and the Playqueue. Before, when a user accessed either of these features, a new screen would open, occupying the entire display and obstructing interaction with the player.\nBefore: \u00e2\u009d\u008c Horizontally stretched phone comments layout\n\n\n\n\n\n\nBefore: \u00e2\u009d\u008c Horizontally stretched phone playqueue layout\n\n\n\n\n\n\nWe revamped this experience in the following ways: Instead of taking up the whole screen, the Comments and Playqueue sections now open on the right side of the player. This allows users to engage with these features and interact with the player simultaneously.\nAdditionally, the buttons to access the comments and Playqueue were originally at the bottom of the screen. To increase accessibility and free up space at the bottom, we moved them to the left side.\nAfter: \u00e2\u009c\u0085 Right-aligned comments optimized for large screen\n\n\n\n\n\n\nAfter: \u00e2\u009c\u0085 Right-aligned playqueue optimized for large screen\n\n\n\n\n\n\nRepositioning the UI elements in this way contributes to a more ergonomic and intuitive user experience on larger screens, reinforcing our commitment to delivering the best listening experience across all devices.\nAddressing User Experience (UX) Challenges\nOur changes to the UI introduced some UX challenges, especially related to the comments feature. Two major questions emerged:\n\nWhen a track changes, should the comments update to correspond to the new track, or should it continue displaying comments from the previous track?\nWhat should happen to a comment a user is currently writing if the track changes?\n\nTo tackle the first issue, we opted to update the comments to align with the new track. We believe this adjustment is more in line with user expectations, as it helps keep the entire screen contextually relevant.\nFor the second scenario, we implemented a solution where the comments section doesn\u00e2\u0080\u0099t update if the text field is currently in focus. This prevents any in-progress comments being lost, thereby providing a more user-friendly commenting experience.\nCode Implementation\nTo integrate the comments and Playqueue screens over the player, we introduced a new FrameLayout named player_side_fragment_holder. This frame holds the additional features and ensures they are displayed without disrupting the main player.\nThis side fragment holder is positioned above the player and is assigned a transparent background along with a width of 400dp. Consequently, when the user taps on the comments or Playqueue button, the respective screen appears over the player. This is made possible by a secondary FragmentManager which adds either the CommentsFragment or the PlayqueueFragment to the FrameLayout.\nHere\u00e2\u0080\u0099s how the layout is structured:\n<FrameLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <Player\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n    <FrameLayout\n        android:id=\"@+id/player_side_fragment_holder\"\n        android:layout_width=\"400dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"right\" />\n</FrameLayout>\nIn this layout configuration, the player_side_fragment_holder is specified to align on the right side, allowing it to overlay the player when comments or the Playqueue are invoked. This approach ensures that the main player remains interactive while users are interacting with these features.\nSearch\nIn our drive to optimize the large screen experience, we revamped the search screen to offer both search suggestions and top results side by side. The updated design splits the screen into two sections when users begin a search. One side displays real-time search suggestions, while the other showcases the top results. This allows users to compare suggestions and top results instantly, leading to a more seamless and enriched search experience.\nBefore: \u00e2\u009d\u008c Horizontally stretched search suggestions\n\n\n\n\n\n\nAfter: \u00e2\u009c\u0085 Split search suggestions and search results\n\n\n\n\n\n\nCode Implementation\nCode Implementation for Split Search Screen\nIn order to implement our split-screen search feature, we use ConstraintLayout. This offers the ability to create layouts based on percentages, which we use to divide the screen between search suggestions and top results.\nTo split the screen, we defined a width constraint of 40% for the search suggestions, leaving the remaining 60% for the top results:\napp:layout_constraintWidth_default=\"percent\"\napp:layout_constraintWidth_percent=\".4\"\nHere is the full code for the side-by-side layout:\n<androidx.constraintlayout.widget.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <FrameLayout\n        android:id=\"@+id/search_container\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        app:layout_constraintWidth_default=\"percent\"\n        app:layout_constraintWidth_percent=\".4\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\">\n\n        <androidx.fragment.app.FragmentContainerView\n            android:id=\"@+id/search_suggestions\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" />\n    </FrameLayout>\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/section_results_top_items\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toEndOf=\"@id/search_container\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\nThis layout allocates 40% of the screen width to a FrameLayout which houses the search suggestions, while the remaining space is assigned to a RecyclerView for displaying top results. The constraints ensure the proper positioning and responsiveness of these elements, providing a dynamic, user-friendly search interface.\nArtist\nOur previous design for the Artist screen wasn\u00e2\u0080\u0099t well-optimized for larger screens. The result was a horizontally stretched layout with excessive padding and white space around the artist details. As a consequence, users had to scroll vertically to access tracks or albums from the artist.\nBefore: \u00e2\u009d\u008c Stretched artist profile\n\n\n\n\n\n\n\n\n\n\n\n\nTo improve this, we took advantage of the space available on larger screens. We moved the Artist details to the left side of the screen and displayed them more compactly. This makes all the necessary information immediately visible and reduces unnecessary scrolling.\nSimultaneously, the right side of the screen is dedicated to displaying the artist\u00e2\u0080\u0099s tracks and albums. This clear separation of content means that users can quickly view and interact with the artist\u00e2\u0080\u0099s music. Through this design, we\u00e2\u0080\u0099ve been able to optimize space and present a well-structured layout that enhances the navigation and interaction for our users on large screen devices.\nAfter: \u00e2\u009c\u0085 Compact artist profile\n\n\n\n\n\n\nKeyboard Tab Navigation\nWe needed to support keyboard tab navigation for devices that have keyboards attached. You can easily test your apps by connecting a bluetooth keyboard.\nIf you are using AppBarLayout you might end up not navigating through the toolbar icons.\nWe had to set touchscreenBlocksFocus = false to our AppBarLayout in order to allow navigating through the toolbar icons.\nAt first, we had problems navigating the player using a keyboard. The default navigation did not work correctly so we had to force set the navigation flow.\nTo do this we use the xml attribute android:nextFocusForward. \nFor better understanding, here\u00e2\u0080\u0099s the specified order for tab key navigation in the player:\n\nFirst, the focus lands on the artist\u00e2\u0080\u0099s name.\nThen, it moves to the track name.\nNext, it goes to the option to minimize the player.\nAfter that, it directs to the \u00e2\u0080\u0098Follow artist\u00e2\u0080\u0099 option.\nIt subsequently moves through options like \u00e2\u0080\u0098Like\u00e2\u0080\u0099, \u00e2\u0080\u0098Comments\u00e2\u0080\u0099, \u00e2\u0080\u0098Share\u00e2\u0080\u0099, \u00e2\u0080\u0098Playqueue\u00e2\u0080\u0099, and \u00e2\u0080\u0098More\u00e2\u0080\u0099 buttons.\nLastly, it settles on the \u00e2\u0080\u0098Play/Pause\u00e2\u0080\u0099 button.\n\nSpace bar toggles playback - Only for media playback apps\nOne of the requirements from Google is to support playback toggling through the space bar key. This feature allows users to play or pause music just by hitting the space bar on their keyboards, irrespective of their current position in the app.\nThe implementation of this functionality can be achieved by overriding the onKeyUp method. On detection of a key press, it verifies if the pressed key corresponds to the space bar, and if so it toggles the playback and returns true.\nIn all the Activity classes where the play/pause button is present, the onKeyUp method is overridden as shown below:\noverride fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean {\n    takeKeyEvents(true)\n    return if(keyCode == KeyEvent.KEYCODE_SPACE) {\n        true\n    } else {\n        super.onKeyUp(keyCode, event)\n    }\n}\nIt\u00e2\u0080\u0099s worth noting that we used the takeKeyEvents(true) method to ensure that the current activity can handle key events.\nFinally, to make sure the play/pause button is the default focus, we set android:focusedByDefault=\"true\" on the button. This is done to prevent other views from gaining focus by default, which could intercept the space bar key press event.\nTesting on Emulators and Devices\nWhen it comes to testing on large screens, we found the Desktop emulator to be the most suitable option. The key benefit is its ability to swiftly resize the app window, mirroring the actions performed on a typical device. This allows us to test responsive behavior on different devices like phones, tablets, and desktops.\nGoogle also offers support for emulators designed for foldable devices. These emulators can be useful for preliminary testing. However, we mostly relied on a physical device, the Samsung Fold, to conduct tests for foldable devices, as it proved to be more accurate.\nLastly, to ensure our app supports hover states and keyboard operations efficiently, we used the Samsung S7+ equipped with an S Pen and Keyboard Bundle. This allowed us to simulate an environment similar to a laptop or a tablet with a keyboard.\nConclusion\nOur journey to optimizing for large screens was filled with exciting challenges and insightful discoveries. We realized that providing a seamless experience across a variety of devices - from smartphones to tablets, desktops, TVs, foldables and more - was more than just stretching our existing user interface. It was about reimagining and reconfiguring every element and interaction to deliver a superior music streaming experience.\nIn addressing the various UI and UX challenges, we found that each element of our service had the potential to be adapted and improved. We reworked our Player and Search screen, redesigned the Artist screen layout, and made sure that keyboard navigation and hover states were smoothly implemented. This process of continuous improvement reinforced to us how important it is to stay flexible in the face of evolving trends.\nAs technology continues to change and expand, we are committed to staying ahead, making sure that SoundCloud remains the leading choice for music streaming, no matter the device.AndroidLarge ScreenOptimizationGoogle\u00e2\u0086\u0090 An update on our API: Changes to access for inactive appsStatusPrivacyCookiesImprint@SoundCloudDev",
  "latestPost": {
    "title": "Android Large Screen Optimization",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://developers.soundcloud.com/blog/blog.rss",
      "value": "Android Large Screen Optimization"
    },
    "summary": "Large Screen Devices - The New Frontier SoundCloud large screen optimized Recently, the Android team at SoundCloud took on a project to\u2026",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://developers.soundcloud.com/blog/blog.rss",
      "value": "Large Screen Devices - The New Frontier SoundCloud large screen optimized Recently, the Android team at SoundCloud took on a project to\u2026"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://developers.soundcloud.com/blog/soundcloud-android-large-screen"
      }
    ],
    "link": "https://developers.soundcloud.com/blog/soundcloud-android-large-screen",
    "id": "https://developers.soundcloud.com/blog/soundcloud-android-large-screen",
    "guidislink": false,
    "published": "Mon, 31 Jul 2023 00:00:00 GMT",
    "published_parsed": [
      2023,
      7,
      31,
      0,
      0,
      0,
      0,
      212,
      0
    ],
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://developers.soundcloud.com/blog/blog.rss",
        "value": "<h1>Large Screen Devices - The New Frontier</h1>\n<p><img alt=\"SoundCloud large screen optimized\" src=\"https://developers.soundcloud.com/blog/49926d7e44d44ca3f84a67148412ba7b/after_vid_.gif\" /></p>\n<p>Recently, the Android team at SoundCloud took on a project to optimize the Android app for large screen devices. With the increasing use of devices like tablets, foldables, and Chromebooks, we decided to provide better support for them.</p>\n<p>The data showed us users were adopting these devices rapidly. What is more, both Google and Samsung had been vocal about the importance of optimizing for larger screens.</p>\n<p>Google is even launching a new <a href=\"https://android-developers.googleblog.com/2023/07/introducing-new-play-store-for-large-screens.html?m=1r\">Playstore</a> for large screen optimized apps only.</p>\n<p>In this blog post, we\u2019ll go through some of the challenges we faced, the UX and UI changes we made, and the code implementation. We hope our experiences will help you in your own large-screen adventures.</p>\n<h2>Why did we invest in Large Screens?</h2>\n<p>We saw a trend among our users - more and more of them were using SoundCloud on their tablets, foldable devices, and Chromebooks. And it wasn\u2019t just happening in <em>our</em> user base. Google and Samsung have been going all-in on large screens, bringing them more into the mainstream.</p>\n<p>When Google rolled out their Pixel Tablet, well-known tech reviewer Marques Brownlee pointed out that SoundCloud stood out from the crowd. He appreciated that we didn\u2019t just stretch our phone app to fit the larger screen, but instead, we crafted an experience that fully utilized the extra space. If you\u2019re interested, you can check out the video <a href=\"https://www.youtube.com/watch?v=aTf7AMVOoDY\">here</a>.</p>\n<h2>Our Investigation</h2>\n<h3>Where and how is music on large screens heard?</h3>\n<p><strong>Fun fact</strong>: People listen to music on their Tablets mostly while cooking.</p>\n<p>Imagine you\u2019re in the middle of preparing a meal, your hands are busy, but you can still easily control your music - that\u2019s convenience at its best.</p>\n<p>But it\u2019s not just about individual experiences. Tablets come into play during social events as well. The larger screen makes it simpler for everyone to engage with the music, whether it\u2019s to see what\u2019s currently playing or to add their favorite track to the queue.</p>\n<p>Through understanding these usage scenarios, we can better tailor our services to enhance the music listening experiences of our users. Be it cooking dinner or hosting a gathering, SoundCloud is there to make those moments even better with great music.</p>\n<h2>Google\u2019s and Samsung\u2019s Large Screens Guide</h2>\n<p><a href=\"https://developer.android.com/large-screens/\">Google\u2019s</a> and <a href=\"https://developer.samsung.com/one-ui/foldable-and-largescreen/intro.html\">Samsung\u2019s</a> large screen guides are roadmaps for developers wanting to optimize their apps for large screens. It encourages using scalable images and responsive and dynamic layouts for a consistent user experience across different screen sizes.</p>\n<p>Google also highlights using the extra space for features like split-screen views, and emphasizes touch target sizing, clear text, and intuitive navigation. Following these best practices ensures apps are user-friendly and competitive in the large screen devices market.</p>\n<h2>Google\u2019s Large Screen Compatibility Checklist</h2>\n<p><a href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality\">Google\u2019s Large Screen Checklist</a>, available in their Android developer documentation, provides developers with a <strong>tier-based framework</strong> for ensuring high-quality app experiences on large screen devices. The checklist encompasses not only UI design but also considerations for navigation, keyboard/stylus input, and overall app usage.</p>\n<p>The checklist is divided into tiers, offering developers a structured approach to prioritize and implement essential features and optimizations based on the level of support desired for large screen devices. The tiers range from basic support to more advanced features and functionalities that fully leverage the potential of large screens.</p>\n<h2>The SoundCloud App</h2>\n<p>When we reviewed Google\u2019s checklist it was clear that the SoundCloud app fell short in certain areas, particularly in terms of adapting the screen layout. The app\u2019s tendency to merely stretch the phone layout to fit larger screens resulted in a less than optimal user interface. This realization was our call to action.</p>\n<p>In the upcoming sections, we\u2019ll take you on a visual tour of these components, accompanied by code snippets and technical explanations to provide you with an inside look at our optimization process.</p>\n<h3>Bottom Navigation Bar</h3>\n<p>Before: \u274c <strong>Horizontally stretched phone layout bottom navigation bar</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/2e21e/nav_before.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"Before\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/8ff1e/nav_before.png\" title=\"Before\" />\n  </a>\n    </span></p>\n<p>Traditionally, SoundCloud\u2019s Android app utilized a bottom navigation bar in a phone layout, which was stretched horizontally to fit larger screen sizes. This approach was straightforward, but it proved ineffective for larger screens. The extended navigation bar made it difficult for users to navigate the app, as it required them to move their focus from one end of the screen to the other.</p>\n<p>After: \u2705 <strong>Nav bar rail optimized for large screens</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/2e21e/nav_after_home.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"After\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/8ff1e/nav_after_home.png\" title=\"After\" />\n  </a>\n    </span></p>\n<p>To remedy this, we adopted a vertical navigation rail for large screen layouts, aligning it to the side of the screen. This is recommended by Google as it provides a more comfortable browsing experience. The menu options are now neatly stacked in a column, making them accessible without the need for extensive eye or cursor movement.</p>\n<h3>Code Implementation</h3>\n<p><strong>Before: BottomNavigationView</strong></p>\n<p>Previously, the SoundCloud Android app used a <code class=\"language-text\">BottomNavigationView</code> to create the bottom navigation bar. This worked well on smaller devices but led to a stretched UI on larger screens.</p>\n<p><strong>After: NavigationRailView</strong> </p>\n<p>To address this, we replaced the <code class=\"language-text\">BottomNavigationView</code> with <code class=\"language-text\">NavigationRailView</code> for larger screens. Both these classes implement the <code class=\"language-text\">NavigationBarView</code> interface. This allows for a smooth transition with minimal code changes.</p>\n<p>To differentiate between smaller and larger screens, we created two separate layout files. One uses the <code class=\"language-text\">BottomNavigationView</code>, and the other uses the <code class=\"language-text\">NavigationRailView</code>. In Kotlin, we dynamically set the layout file based on the size of the device.</p>\n<h3>Identifying Large Devices</h3>\n<p>We identify whether a device is large or small by using a boolean variable, <code class=\"language-text\">is_tablet</code>, defined in three separate XML value files based on the screen width.</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-text\"><code class=\"language-text\">// res/values-sw600dp/booleans.xml\n&lt;bool name=&quot;is_tablet&quot;&gt;true&lt;/bool&gt;\n\n// res/values-sw370dp/booleans.xml\n&lt;bool name=&quot;is_tablet&quot;&gt;false&lt;/bool&gt;\n\n// res/values/booleans.xml\n&lt;bool name=&quot;is_tablet&quot;&gt;false&lt;/bool&gt;</code></pre></div>\n<p>In Kotlin, we check the <code class=\"language-text\">is_tablet</code> boolean value and set the layout file accordingly. This is done using the following code:</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-text\"><code class=\"language-text\">val isTablet = context.resources.getBoolean(R.bool.is_tablet)\n\nif(isTablet) {\n    setContentView(R.layout.tablet_layout)\n} else {\n    setContentView(R.layout.phone_layout)\n}</code></pre></div>\n<p>Hardcoding resources is not the best solution. Google\u2019s documentation provides some great insights on supporting different screen sizes, including the concept of Window Size Classes. Window Sizes allow the UI to adapt to various window configurations on foldable and large screen devices. Here\u2019s the link for more details: <a href=\"https://developer.android.com/guide/topics/large-screens/support-different-screen-sizes\">Window Size Classes</a>.</p>\n<h3>Unit Testing and A/B Testing</h3>\n<p>To enable testing, we added a wrapper class around the <code class=\"language-text\">isTablet</code> boolean. We also leveraged feature flags to conduct A/B testing of our new layout. We introduced a class <code class=\"language-text\">NavRailExperiment</code> to check both the device type and the feature flag state:\nHere\u2019s a look at our implementation of this approach:</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-text\"><code class=\"language-text\">class NavRailExperiment(private val appFeatures: AppFeatures) {\n    val isEnabled: Boolean\n        get() = context.resources.getBoolean(R.bool.is_tablet) &amp;&amp; appFeatures.isNavRailEnabled()\n}</code></pre></div>\n<h2>Mini Player</h2>\n<p>Transitioning from a Stretched Phone Layout Mini Player to a Right-Aligned Mini Player</p>\n<p>Before: \u274c <strong>Horizontally stretched phone layout Mini Player</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/2e21e/before_mini_player.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"Before\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/8ff1e/before_mini_player.png\" title=\"Before\" />\n  </a>\n    </span></p>\n<p>In the past, SoundCloud\u2019s Android app featured a Mini Player stretched horizontally across the screen. While this design worked for smaller screens, it resulted in a suboptimal user experience on larger devices due to the extended reach required to interact with it.</p>\n<p>After: \u2705 <strong>Small right-aligned Mini Player optimized for large screens</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/2e21e/after_mini_player.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"After\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/8ff1e/after_mini_player.png\" title=\"After\" />\n  </a>\n    </span></p>\n<p>To provide a more user-friendly interface we opted for a small Mini Player on the right side of the screen. This ensures controls are comfortably within thumb reach.</p>\n<h3>Code Implementation</h3>\n<p>The Player is a BottomSheet with a ViewPager, the Mini Player is a view inside each page of the ViewPager. We use a <code class=\"language-text\">BottomSheetBehavior</code> to support  collapsed and expanded states. In the expanded state the player shows the full width and height of the ViewPager.\nIn collapsed state it shows only the Mini Player view, and the height is collapsed to 50dp. The width was always <code class=\"language-text\">match_parent</code>, but since we want it to be small, we set the width of the <code class=\"language-text\">BottomSheet</code> to <code class=\"language-text\">200dp</code>.</p>\n<p>The class <code class=\"language-text\">BottomSheetBehavior</code> provides us with a method <code class=\"language-text\">setMaxWidth</code> which we use to set the width while animating the collapse and expansion of the BottomSheet Player.\nThe other issue here is that we also have to set the width on the ViewPager and the ViewPager\u2019s visible page.\nAdditionally, we must move the player to the right side thus setting the left margin on layout params on each player transition.</p>\n<p>The<code class=\"language-text\">BottomSheetBehavior</code> also has a <code class=\"language-text\">BottomSheetBehavior.BottomSheetCallback</code> field.\nThe <code class=\"language-text\">BottomSheetBehavior.BottomSheetCallback</code> has an onSlide method which allows us to set the width and left margin on the <code class=\"language-text\">BottomSheet</code> and the <code class=\"language-text\">ViewPager</code>\u2019s visible page.</p>\n<p>Below is the code: </p>\n<div class=\"gatsby-highlight\"><pre class=\"language-text\"><code class=\"language-text\">bottomSheetBehavior.bottomSheetCallback = BottomSheetBehavior.BottomSheetCallback() {         \n    val miniplayerWidth = screenWidth * offset\n    val leftMargin = screenWidth - miniplayerWidth\n        \n    setLeftMargin(viewPager.views(), leftMargin)\n        \n    setWidth(viewPager.views(), bottomSheet, miniplayerWidth)\n};</code></pre></div>\n<h2>Comments &#x26; Playqueue on Player</h2>\n<p>The SoundCloud Android app hosts two main features on its player screen - the comments and the Playqueue. Before, when a user accessed either of these features, a new screen would open, occupying the entire display and obstructing interaction with the player.</p>\n<p>Before: \u274c <strong>Horizontally stretched phone comments layout</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/8b984/before_comments.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"Before Comments\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/8ff1e/before_comments.png\" title=\"Before Comments\" />\n  </a>\n    </span></p>\n<p>Before: \u274c <strong>Horizontally stretched phone playqueue layout</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/8b984/before_playqueue.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"Before Playqueue\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/8ff1e/before_playqueue.png\" title=\"Before Playqueue\" />\n  </a>\n    </span></p>\n<p>We revamped this experience in the following ways: Instead of taking up the whole screen, the Comments and Playqueue sections now open on the right side of the player. This allows users to engage with these features and interact with the player simultaneously.</p>\n<p>Additionally, the buttons to access the comments and Playqueue were originally at the bottom of the screen. To increase accessibility and free up space at the bottom, we moved them to the left side.</p>\n<p>After: \u2705 <strong>Right-aligned comments optimized for large screen</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/8b984/after_comments.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"After Comments\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/8ff1e/after_comments.png\" title=\"After Comments\" />\n  </a>\n    </span></p>\n<p>After: \u2705 <strong>Right-aligned playqueue optimized for large screen</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/8b984/after_playqueue.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"After Playqueue\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/8ff1e/after_playqueue.png\" title=\"After Playqueue\" />\n  </a>\n    </span></p>\n<p>Repositioning the UI elements in this way contributes to a more ergonomic and intuitive user experience on larger screens, reinforcing our commitment to delivering the best listening experience across all devices.</p>\n<h3>Addressing User Experience (UX) Challenges</h3>\n<p>Our changes to the UI introduced some UX challenges, especially related to the comments feature. Two major questions emerged:</p>\n<ul>\n<li>When a track changes, should the comments update to correspond to the new track, or should it continue displaying comments from the previous track?</li>\n<li>What should happen to a comment a user is currently writing if the track changes?</li>\n</ul>\n<p>To tackle the first issue, we opted to update the comments to align with the new track. We believe this adjustment is more in line with user expectations, as it helps keep the entire screen contextually relevant.</p>\n<p>For the second scenario, we implemented a solution where the comments section doesn\u2019t update if the text field is currently in focus. This prevents any in-progress comments being lost, thereby providing a more user-friendly commenting experience.</p>\n<h3>Code Implementation</h3>\n<p>To integrate the comments and Playqueue screens over the player, we introduced a new <code class=\"language-text\">FrameLayout</code> named <code class=\"language-text\">player_side_fragment_holder</code>. This frame holds the additional features and ensures they are displayed without disrupting the main player.</p>\n<p>This side fragment holder is positioned above the player and is assigned a transparent background along with a width of 400dp. Consequently, when the user taps on the comments or Playqueue button, the respective screen appears over the player. This is made possible by a secondary <code class=\"language-text\">FragmentManager</code> which adds either the <code class=\"language-text\">CommentsFragment</code> or the <code class=\"language-text\">PlayqueueFragment</code> to the <code class=\"language-text\">FrameLayout</code>.</p>\n<p>Here\u2019s how the layout is structured:</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FrameLayout</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Player</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FrameLayout</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/player_side_fragment_holder<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>400dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_gravity</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FrameLayout</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In this layout configuration, the <code class=\"language-text\">player_side_fragment_holder</code> is specified to align on the right side, allowing it to overlay the player when comments or the Playqueue are invoked. This approach ensures that the main player remains interactive while users are interacting with these features.</p>\n<h2>Search</h2>\n<p>In our drive to optimize the large screen experience, we revamped the search screen to offer both search suggestions and top results side by side. The updated design splits the screen into two sections when users begin a search. One side displays real-time search suggestions, while the other showcases the top results. This allows users to compare suggestions and top results instantly, leading to a more seamless and enriched search experience.</p>\n<p>Before: \u274c <strong>Horizontally stretched search suggestions</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/8b984/before_search.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"Before\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/8ff1e/before_search.png\" title=\"Before\" />\n  </a>\n    </span></p>\n<p>After: \u2705 <strong>Split search suggestions and search results</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/8b984/after_search.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"After\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/8ff1e/after_search.png\" title=\"After\" />\n  </a>\n    </span></p>\n<h3>Code Implementation</h3>\n<p><strong>Code Implementation for Split Search Screen</strong></p>\n<p>In order to implement our split-screen search feature, we use <code class=\"language-text\">ConstraintLayout</code>. This offers the ability to create layouts based on percentages, which we use to divide the screen between search suggestions and top results.</p>\n<p>To split the screen, we defined a width constraint of 40% for the search suggestions, leaving the remaining 60% for the top results:</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\">app:layout_constraintWidth_default=\"percent\"\napp:layout_constraintWidth_percent=\".4\"</code></pre></div>\n<p>Here is the full code for the side-by-side layout:</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FrameLayout</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/search_container<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintWidth_default</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>percent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintWidth_percent</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.4<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintBottom_toBottomOf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintStart_toStartOf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintTop_toTopOf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>androidx.fragment.app.FragmentContainerView</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/search_suggestions<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FrameLayout</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>androidx.recyclerview.widget.RecyclerView</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/section_results_top_items<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintBottom_toBottomOf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintEnd_toEndOf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintStart_toEndOf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@id/search_container<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintTop_toTopOf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This layout allocates 40% of the screen width to a <code class=\"language-text\">FrameLayout</code> which houses the search suggestions, while the remaining space is assigned to a <code class=\"language-text\">RecyclerView</code> for displaying top results. The constraints ensure the proper positioning and responsiveness of these elements, providing a dynamic, user-friendly search interface.</p>\n<h2>Artist</h2>\n<p>Our previous design for the Artist screen wasn\u2019t well-optimized for larger screens. The result was a horizontally stretched layout with excessive padding and white space around the artist details. As a consequence, users had to scroll vertically to access tracks or albums from the artist.</p>\n<p>Before: \u274c <strong>Stretched artist profile</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/8b984/before_artist.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"Before\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/8ff1e/before_artist.png\" title=\"Before\" />\n  </a>\n    </span>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/8b984/before_artist_1.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"Before Page 2\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/8ff1e/before_artist_1.png\" title=\"Before Page 2\" />\n  </a>\n    </span></p>\n<p>To improve this, we took advantage of the space available on larger screens. We moved the Artist details to the left side of the screen and displayed them more compactly. This makes all the necessary information immediately visible and reduces unnecessary scrolling.</p>\n<p>Simultaneously, the right side of the screen is dedicated to displaying the artist\u2019s tracks and albums. This clear separation of content means that users can quickly view and interact with the artist\u2019s music. Through this design, we\u2019ve been able to optimize space and present a well-structured layout that enhances the navigation and interaction for our users on large screen devices.</p>\n<p>After: \u2705 <strong>Compact artist profile</strong>\n<span class=\"gatsby-resp-image-wrapper\" style=\"display: block; margin-left: auto; margin-right: auto;\">\n      <a class=\"gatsby-resp-image-link\" href=\"https://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/8b984/after_artist.png\" rel=\"noopener\" style=\"display: block;\" target=\"_blank\">\n    <span class=\"gatsby-resp-image-background-image\" style=\"display: block;\"></span>\n  <img alt=\"After\" class=\"gatsby-resp-image-image\" src=\"https://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/8ff1e/after_artist.png\" title=\"After\" />\n  </a>\n    </span></p>\n<h2>Keyboard Tab Navigation</h2>\n<p>We needed to support keyboard tab navigation for devices that have keyboards attached. You can easily test your apps by connecting a bluetooth keyboard.</p>\n<p>If you are using <code class=\"language-text\">AppBarLayout</code> you might end up not navigating through the toolbar icons.\nWe had to set <code class=\"language-text\">touchscreenBlocksFocus = false</code> to our <code class=\"language-text\">AppBarLayout</code> in order to allow navigating through the toolbar icons.</p>\n<p>At first, we had problems navigating the player using a keyboard. The default navigation did not work correctly so we had to force set the navigation flow.\nTo do this we use the <a href=\"https://developer.android.com/develop/ui/views/touch-and-input/keyboard-input/navigation\">xml attribute</a> <code class=\"language-text\">android:nextFocusForward</code>. </p>\n<p>For better understanding, here\u2019s the specified order for tab key navigation in the player:</p>\n<ol>\n<li>First, the focus lands on the artist\u2019s name.</li>\n<li>Then, it moves to the track name.</li>\n<li>Next, it goes to the option to minimize the player.</li>\n<li>After that, it directs to the \u2018Follow artist\u2019 option.</li>\n<li>It subsequently moves through options like \u2018Like\u2019, \u2018Comments\u2019, \u2018Share\u2019, \u2018Playqueue\u2019, and \u2018More\u2019 buttons.</li>\n<li>Lastly, it settles on the \u2018Play/Pause\u2019 button.</li>\n</ol>\n<h2>Space bar toggles playback - Only for media playback apps</h2>\n<p>One of the requirements from Google is to support playback toggling through the space bar key. This feature allows users to play or pause music just by hitting the space bar on their keyboards, irrespective of their current position in the app.</p>\n<p>The implementation of this functionality can be achieved by overriding the <code class=\"language-text\">onKeyUp</code> method. On detection of a key press, it verifies if the pressed key corresponds to the space bar, and if so it toggles the playback and returns <code class=\"language-text\">true</code>.</p>\n<p>In all the <code class=\"language-text\">Activity</code> classes where the play/pause button is present, the <code class=\"language-text\">onKeyUp</code> method is overridden as shown below:</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onKeyUp</span><span class=\"token punctuation\">(</span>keyCode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> KeyEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">takeKeyEvents</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>keyCode <span class=\"token operator\">==</span> KeyEvent<span class=\"token punctuation\">.</span>KEYCODE_SPACE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onKeyUp</span><span class=\"token punctuation\">(</span>keyCode<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It\u2019s worth noting that we used the <code class=\"language-text\">takeKeyEvents(true)</code> method to ensure that the current activity can handle key events.</p>\n<p>Finally, to make sure the play/pause button is the default focus, we set <code class=\"language-text\">android:focusedByDefault=&quot;true&quot;</code> on the button. This is done to prevent other views from gaining focus by default, which could intercept the space bar key press event.</p>\n<h2>Testing on Emulators and Devices</h2>\n<p>When it comes to testing on large screens, we found the Desktop emulator to be the most suitable option. The key benefit is its ability to swiftly resize the app window, mirroring the actions performed on a typical device. This allows us to test responsive behavior on different devices like phones, tablets, and desktops.</p>\n<p>Google also offers support for emulators designed for foldable devices. These emulators can be useful for preliminary testing. However, we mostly relied on a physical device, the Samsung Fold, to conduct tests for foldable devices, as it proved to be more accurate.</p>\n<p>Lastly, to ensure our app supports hover states and keyboard operations efficiently, we used the Samsung S7+ equipped with an S Pen and Keyboard Bundle. This allowed us to simulate an environment similar to a laptop or a tablet with a keyboard.</p>\n<h2>Conclusion</h2>\n<p>Our journey to optimizing for large screens was filled with exciting challenges and insightful discoveries. We realized that providing a seamless experience across a variety of devices - from smartphones to tablets, desktops, TVs, foldables and more - was more than just stretching our existing user interface. It was about reimagining and reconfiguring every element and interaction to deliver a superior music streaming experience.</p>\n<p>In addressing the various UI and UX challenges, we found that each element of our service had the potential to be adapted and improved. We reworked our Player and Search screen, redesigned the Artist screen layout, and made sure that keyboard navigation and hover states were smoothly implemented. This process of continuous improvement reinforced to us how important it is to stay flexible in the face of evolving trends.</p>\n<p>As technology continues to change and expand, we are committed to staying ahead, making sure that SoundCloud remains the leading choice for music streaming, no matter the device.</p>"
      }
    ]
  }
}