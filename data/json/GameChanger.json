{
  "company": "GameChanger",
  "title": "GameChanger",
  "xmlUrl": "http://tech.gc.com/atom.xml",
  "htmlUrl": "http://tech.gc.com/",
  "content": "\n\n\n\nEvery Camera, Every Angle on Android: How we dealt with fragmented Android Camera APIs, and why it sucked \u2022 GameChanger Tech Blog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbout\n/\nCareers\n/\nOpen Source\n\n\n\n\n\n\n\nEvery Camera, Every Angle on Android\nHow we dealt with fragmented Android Camera APIs, and why it sucked\n\n\n\n\t\t\t        By Steven Popovich\n/ Software Engineer at GameChanger\n\n\nSeptember 20, 2021\n\n\n\n\n\nAt GameChanger, video streaming has become a huge part of our business and thus our tech stack. But as a small company that practices shipping often, we can\u2019t ship everything feature complete from day one and thus video streaming launched with the ability to only stream from your default rear camera lens.\nBut as we know, ultrawide lenses on phones have become common place and sure enough, customers began writing in, asking to be able to use their ultrawide cameras to stream their event. Baseball and softball fields are actually quite wide and it makes a lot of sense to be able to capture more of the field. So in time, ultrawide streaming became our priority and thus we engaged in battle with one of the most brittle Android APIs we have seen\u2026\nStreaming in the olden days\nWell, not really in the olden days, because we are using the most up to date APIs, but before we implemented ultrawide streaming, selecting the camera we wanted to stream with was generally pretty simple:\nprivate fun CameraManager.chooseCamera(teamId: TeamId) = cameraIdList.filter { id ->\n    val characteristics = getCameraCharacteristics(id)\n    val capabilities = characteristics.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES)!!\n\n    characteristics.get(CameraCharacteristics.LENS_FACING) == CameraMetadata.LENS_FACING_BACK &&\n        capabilities.contains(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE)\n}\n    .mapNotNull { id ->\n        val characteristics = getCameraCharacteristics(id)\n        val cameraConfig = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)!!\n\n        val (width, height) = arrayOf(1280, 720)\n        cameraConfig.getOutputSizes(MediaRecorder::class.java)\n            .filter { it.width <= width && it.height <= height }\n            .maxByOrNull { it.width * it.height }?.let { id to it }\n    }\n    .map { (id, resolution) -> CameraArgs(cameraId = id, width = resolution.width, height = resolution.height, fps = 30) }\n    .firstOrNull()\nTL;DR: Basically, get the first rear camera that supports 720p. Note the cameraId\u2014an ID corresponds to each camera on the device\u2026right?\nNope. Well sometimes, it depends.\nEnter Multi-Camera API\nAt the time of writing, the not-deprecated API for accessing cameras on Android is camera2. camera1 is deprecated. cameraX is built on top of camera2. Obviously.\nHere are some references for camera2. We are going to focus on the multi-camera training here as a jumping off point.\nThe multi-camera training page does a great job of explaining the differences between logical and physical camera setups, when it was introduced and why but for the purposes of this article here\u2019s what you need to know:\n\nAn Android device running above API level 28 runs either a logical or physical camera setup. Below 28 is strictly a physical camera setup.\nPhysical camera setups expose each camera sensor individually with cameraIds through cameraManager.cameraIdList. If you are lucky, you will have one camera id per physical sensor and be able to choose any id you want to stream with.\nLogical camera setups hide the details of the different physical cameras sensors on the back side of the phone, giving you just one id for the front and back of the device in the cameraManager.cameraIdList. However, if you continue to poke the camera API, you can get those physical sensor ids, but you still can\u2019t use them to open a camera session. You must use ids from cameraManager.cameraIdList. Thus, to actually stream with an ultrawide sensor on a logical camera setup, you have to do more\u2026things.\n\nOkay, doesn\u2019t sound too bad. It\u2019s easy enough to figure out if a device is a physical or logical camera setup:\nprivate fun CameraManager.getRearCameraIds(): List<CameraId> = cameraIdList.filter {\n    val characteristics = getCameraCharacteristics(it)\n    val capabilities = characteristics.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES)\n\n    characteristics.get(CameraCharacteristics.LENS_FACING) == CameraMetadata.LENS_FACING_BACK &&\n        capabilities?.contains(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE) == true\n}\n\nprivate fun CameraManager.hasRearLogicalCameras(): Boolean = this.getRearCameraIds().any {\n    this.getCameraCharacteristics(it).get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES)\n        ?.contains(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA) == true\n}\nSo let\u2019s start with the easy one.\nSupporting physical camera setups\nOnce we know that we are dealing with a physical camera setup, it\u2019s simply a matter of iterating over rear ids and calculating the widest one. Our camera feature only exposes the default and the widest sensor to the user, so this is the logic that works for us:\nprivate fun getWidestPhysicalCamera(streamingResolution: StreamingResolution): CameraInfo? {\n    return cameraManager\n        .getRearCameraIds()\n        .getWidestCameraId()\n        ?.mapNotNull { cameraId ->\n            cameraId.toString().getMaxSupportedResolution(streamingResolution)\n        }\n        ?.map { (cameraId, resolution) ->\n            CameraInfo(cameraId, CameraLensType.WidePhysical, StreamingResolution(resolution.width, resolution.height, streamingResolution.fps))\n        }\n        ?.firstOrNull()\n}\n\nprivate fun List<CameraId>.getWidestCameraId(): CameraId? = this.maxByOrNull {\n    it.computeCameraWidth()\n}\n\nprivate fun CameraId.computeCameraWidth(): Float {\n    val characteristics = cameraManager.getCameraCharacteristics(this)\n    val activeSize = characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE)\n    val physicalSize = characteristics.get(CameraCharacteristics.SENSOR_INFO_PHYSICAL_SIZE)\n    val pixelSize = characteristics.get(CameraCharacteristics.SENSOR_INFO_PIXEL_ARRAY_SIZE)\n    val focalLengths = characteristics.get(CameraCharacteristics.LENS_INFO_AVAILABLE_FOCAL_LENGTHS)\n\n    var cameraWidth = Float.MIN_VALUE\n\n    if (activeSize != null && physicalSize != null && pixelSize != null && focalLengths != null) {\n        val fractionX = activeSize.width().toFloat() / pixelSize.width.toFloat()\n\n        val firstFocalLength = focalLengths.firstOrNull()\n\n        firstFocalLength?.let {\n            cameraWidth = Math.toDegrees(2.0 * atan2((physicalSize.width * fractionX).toDouble(), 2.0 * firstFocalLength)).toFloat()\n        }\n    }\n\n    return cameraWidth\n}\nNote that we basically ripped the widest calculation logic from various SO posts. Here\u2019s one that offers a good explanation of what\u2019s going on there.\nThis logic along with the original logic to fetch the default rear camera yields two camera ids. Switching between them is just restarting your preview/capture session with the new id.\nSupporting logical camera setups\nOkay, we have to jump through a few more hoops when supporting logical camera setups. Once we have determined we do have a logical camera setup present, we have to determine which rear camera id has the logical cameras behind it:\n@RequiresApi(Build.VERSION_CODES.P)\nprivate fun List<CameraId>.getLogicalCameras(): List<CameraId> = this.filter {\n    val characteristics = cameraManager.getCameraCharacteristics(it)\n    val capabilities = characteristics.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES)\n    capabilities?.contains(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA) == true\n}\nNow we have a list of rear camera ids that have logical multi camera capabilities. This means that this camera id is a logical camera id. This means that this logical camera id has 2 or more physical camera ids behind it. We need those to address individual lenses. This is how we get them:\n@RequiresApi(Build.VERSION_CODES.P)\nprivate fun List<CameraId>.getAllLogicalPhysicalPairs(): List<Pair<CameraId, CameraId>> = this.flatMap { logicalCameraId ->\n    val physicalCameraIds = cameraManager.getCameraCharacteristics(logicalCameraId).physicalCameraIds.toList()\n    physicalCameraIds.map {\n        Pair(logicalCameraId, it)\n    }\n}\nNow we have physical ids paired up with their logical id. Now we need to figure out the widest lens of the physical ones. This is easier than the physical setup, because now we have LENS_INFO_AVAILABLE_FOCAL_LENGTHS available to us:\nprivate fun List<Pair<CameraId, CameraId>>.getWidestLogicalCamera(): CameraId? = this.minByOrNull {\n    val cameraCharacteristics = cameraManager.getCameraCharacteristics(it.second)\n    cameraCharacteristics.get(CameraCharacteristics.LENS_INFO_AVAILABLE_FOCAL_LENGTHS)?.minOrNull() ?: Float.MAX_VALUE\n}?.first\nExhausted yet? Finally, logical camera setups require you to set a zoom ratio to get the widest focal length. We get the number like so:\n@RequiresApi(Build.VERSION_CODES.R)\nprivate fun getMinimumControlZoomRatio(logicalCameraId: CameraId): Float {\n    val cameraCharacteristics = cameraManager.getCameraCharacteristics(logicalCameraId)\n    return cameraCharacteristics.get(CameraCharacteristics.CONTROL_ZOOM_RATIO_RANGE)?.lower ?: 1F\n}\nPutting it all together:\n@RequiresApi(Build.VERSION_CODES.R)\nprivate fun getWidestLogicalRearCamera(): CameraLensType.WideLogical? {\n    return cameraManager\n        .getRearCameraIds()\n        .getLogicalCameras()\n        .getAllLogicalPhysicalPairs()\n        .getWidestLogicalCamera()\n        ?.let {\n            CameraLensType.WideLogical(getMinimumControlZoomRatio(it))\n        }\n}\nSo we have the correct id to open the rear camera session with and a control zoom ratio. The capture request is built the same but now we use the control zoom ratio:\nif (cameraLensType is CameraLensType.WideLogical && Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\n    captureRequestBuilder.set(CaptureRequest.CONTROL_ZOOM_RATIO, cameraLensType.controlZoomRatio)\n}\nNote that you don\u2019t use physicalCameraIds to actually open a camera session. With logical camera setups, you still use a camera id found in cameraManager.cameraIdList to open a camera session. You then just give it a minimum zoom control ratio. Then the OS itself takes care of selecting the widest lens to reach the desired zoom control.\nGotcha!\nOkay, so code stuff out of the way. Figuring all the correct ways of doing this was tough as there are not a lot of code samples out there. But there is one\u2026\nOpenCamera. OpenCamera is a highly featured, open source camera app. And it includes support for physical and logical multi camera setups! Great, a perfect reference.\nSo I install OpenCamera on my OnePlus 7 Pro and it seamlessly switches between wide and ultrawide lenses. So a couple cmd+c, cmd+v strokes from the OpenCamera source later I had the multi-camera implementation inside the TeamManager app. And\u2026it didn\u2019t work. cameraManager.cameraIdList showed only the front camera and the rear standard lenses in my app (Note this is a physical setup). But in the OpenCamera app, the same API call cameraManager.cameraIdList showed the front camera, rear standard and rear ultrawide.\nThis really threw us for a loop. For whatever reason, the OpenCamera package name was white listed and thus allowed to access more camera ids.* Why? We aren\u2019t sure. Just OnePlus things, amirite? But what it means is that our app can not support wide angle streaming for OnePlus devices.\n*I can\u2019t find where I found this anymore, but it was buried deep in a SO post. Took us a couple of days at least to find out.\nAnd this was just the tip of the iceberg for dealing with manufacturers\u2019 implementation\u2026\nAt the mercy of the manufacturers\nReading this whole article, you may ask, how do we know which phones support which setup? Well, the short answer is that we have no idea. Here\u2019s a short list of what we have found so far, if the device has an ultrawide rear lens:\nOnePlus devices: Physical setup that doesn\u2019t expose ultrawide to our app, does expose ultrawide to OpenCamera. Ultrawide works in native camera app.\nMotorola devices: Physical setup that doesn\u2019t expose ultrawide to any app. Ultrawide works in native camera app.\nSamsung devices: Physical setup that exposes standard rear and ultrawide. Ultrawide works in native camera app and OpenCamera. We were able to support Samsung devices.\nPixel devices: Logical setup, but only the Pixel 5 has an ultrawide. The Pixel 4 has a standard and telephoto. So we needed to check if the device has a logical rear camera that is wider than the default camera. Pixels are the only devices we have found that support logical setups.\nAnd these are just the ones we know about! We don\u2019t have every device in the world and this can change with software updates and new devices.\nAs you can see, how each manufacturer decides to implement the multi-camera API is completely random and illogical. We ended not being able to support as many devices as we thought when the project was conceived. It is very disappointing to see the state of the multi camera API as manufacturers implement it. Especially considering how many devices are being built with multiple lenses.\nBut hey, I think we are \u201cfuture-proofed\u201d, whatever that means. Until the multi-camera API is deprecated anyway\u2026\n\n\n Share on Twitter\n Share on Facebook\n\n\n\n\n\n\n\n\n\n            \u00a9 2023 GameChanger Tech Blog powered by Jekyll + Skinny Bones.\n        \n\nAbout Us\nCareers\nGameChanger on GitHub\nCA Disclosures\n\nYour Privacy Choices\n\n\n\n\n\n\n\n\n\n\nAbout Us\nCareers\nGameChanger on GitHub\nCA Disclosures\n\nYour Privacy Choices\n\n\n\n\n\n\n\n\n            \u00a9 2023 GameChanger Tech Blog powered by Jekyll + Skinny Bones.\n        \n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "Every Camera, Every Angle on Android",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://tech.gc.com/atom.xml",
      "value": "Every Camera, Every Angle on Android"
    },
    "links": [
      {
        "href": "http://tech.gc.com/every-camera-every-angle-on-android/",
        "rel": "alternate",
        "type": "text/html"
      }
    ],
    "link": "http://tech.gc.com/every-camera-every-angle-on-android/",
    "updated": "2021-09-20T14:49:50+00:00",
    "updated_parsed": [
      2021,
      9,
      20,
      14,
      49,
      50,
      0,
      263,
      0
    ],
    "id": "http://tech.gc.com/every-camera-every-angle-on-android",
    "guidislink": false,
    "authors": [
      {
        "name": "GameChanger",
        "href": "http://tech.gc.com/"
      }
    ],
    "author_detail": {
      "name": "GameChanger",
      "href": "http://tech.gc.com/"
    },
    "href": "http://tech.gc.com/",
    "author": "GameChanger",
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://tech.gc.com/atom.xml",
        "value": "<p>At GameChanger, video streaming has become a huge part of our business and thus our tech stack. But as a small company that practices shipping often, we can\u2019t ship everything feature complete from day one and thus video streaming launched with the ability to only stream from your default rear camera lens.</p>\n\n<p>But as we know, ultrawide lenses on phones have become common place and sure enough, customers began writing in, asking to be able to use their ultrawide cameras to stream their event. Baseball and softball fields are actually quite wide and it makes a lot of sense to be able to capture more of the field. So in time, ultrawide streaming became our priority and thus we engaged in battle with one of the most brittle Android APIs we have seen\u2026</p>\n\n<h1 id=\"streaming-in-the-olden-days\">Streaming in the olden days</h1>\n\n<p>Well, not really in the olden days, because we are using the most up to date APIs, but before we implemented ultrawide streaming, selecting the camera we wanted to stream with was generally pretty simple:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraManager</span><span class=\"p\">.</span><span class=\"nf\">chooseCamera</span><span class=\"p\">(</span><span class=\"n\">teamId</span><span class=\"p\">:</span> <span class=\"nc\">TeamId</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">cameraIdList</span><span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">id</span> <span class=\"p\">-&gt;</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">capabilities</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span><span class=\"o\">!!</span>\n\n    <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"nc\">CameraMetadata</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING_BACK</span> <span class=\"p\">&amp;&amp;</span>\n        <span class=\"n\">capabilities</span><span class=\"p\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">mapNotNull</span> <span class=\"p\">{</span> <span class=\"n\">id</span> <span class=\"p\">-&gt;</span>\n        <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"kd\">val</span> <span class=\"py\">cameraConfig</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SCALER_STREAM_CONFIGURATION_MAP</span><span class=\"p\">)</span><span class=\"o\">!!</span>\n\n        <span class=\"kd\">val</span> <span class=\"p\">(</span><span class=\"py\">width</span><span class=\"p\">,</span> <span class=\"py\">height</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"nf\">arrayOf</span><span class=\"p\">(</span><span class=\"mi\">1280</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">)</span>\n        <span class=\"n\">cameraConfig</span><span class=\"p\">.</span><span class=\"nf\">getOutputSizes</span><span class=\"p\">(</span><span class=\"nc\">MediaRecorder</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">.</span><span class=\"n\">java</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"p\">&lt;=</span> <span class=\"n\">width</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"p\">&lt;=</span> <span class=\"n\">height</span> <span class=\"p\">}</span>\n            <span class=\"p\">.</span><span class=\"nf\">maxByOrNull</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"p\">*</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"p\">}</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span> <span class=\"n\">id</span> <span class=\"n\">to</span> <span class=\"n\">it</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">CameraArgs</span><span class=\"p\">(</span><span class=\"n\">cameraId</span> <span class=\"p\">=</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"p\">=</span> <span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"p\">=</span> <span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">fps</span> <span class=\"p\">=</span> <span class=\"mi\">30</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">firstOrNull</span><span class=\"p\">()</span></code></pre></figure>\n\n<p><strong>TL;DR:</strong> Basically, get the first rear camera that supports 720p. Note the <code class=\"language-plaintext highlighter-rouge\">cameraId</code>\u2014an ID corresponds to each camera on the device\u2026right?</p>\n\n<p>Nope. Well sometimes, it depends.</p>\n\n<h2 id=\"enter-multi-camera-api\">Enter Multi-Camera API</h2>\n\n<p>At the time of writing, the not-deprecated API for accessing cameras on Android is <code class=\"language-plaintext highlighter-rouge\">camera2</code>. <code class=\"language-plaintext highlighter-rouge\">camera1</code> is deprecated. <code class=\"language-plaintext highlighter-rouge\">cameraX</code> is built on top of <code class=\"language-plaintext highlighter-rouge\">camera2</code>. Obviously.</p>\n\n<p><a href=\"https://developer.android.com/training/camera2\">Here</a> are some references for <code class=\"language-plaintext highlighter-rouge\">camera2</code>. We are going to focus on the multi-camera training <a href=\"https://developer.android.com/training/camera2/multi-camera\">here</a> as a jumping off point.</p>\n\n<p>The multi-camera training page does a great job of explaining the differences between logical and physical camera setups, when it was introduced and why but for the purposes of this article here\u2019s what you need to know:</p>\n<ul>\n  <li>An Android device running above API level 28 runs either a logical or physical camera setup. Below 28 is strictly a physical camera setup.</li>\n  <li>Physical camera setups expose each camera sensor individually with <code class=\"language-plaintext highlighter-rouge\">cameraId</code>s through <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code>. If you are lucky, you will have one camera id per physical sensor and be able to choose any id you want to stream with.</li>\n  <li>Logical camera setups hide the details of the different physical cameras sensors on the back side of the phone, giving you just one id for the front and back of the device in the <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code>. However, if you continue to poke the camera API, you can get those physical sensor ids, but you still can\u2019t use them to open a camera session. You must use ids from <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code>. Thus, to actually stream with an ultrawide sensor on a logical camera setup, you have to do more\u2026things.</li>\n</ul>\n\n<p>Okay, doesn\u2019t sound too bad. It\u2019s easy enough to figure out if a device is a physical or logical camera setup:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraManager</span><span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"n\">cameraIdList</span><span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">capabilities</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span>\n\n    <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"nc\">CameraMetadata</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING_BACK</span> <span class=\"p\">&amp;&amp;</span>\n        <span class=\"n\">capabilities</span><span class=\"o\">?.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"k\">true</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraManager</span><span class=\"p\">.</span><span class=\"nf\">hasRearLogicalCameras</span><span class=\"p\">():</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">().</span><span class=\"nf\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">).</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span>\n        <span class=\"o\">?.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"k\">true</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>So let\u2019s start with the easy one.</p>\n\n<h1 id=\"supporting-physical-camera-setups\">Supporting physical camera setups</h1>\n\n<p>Once we know that we are dealing with a physical camera setup, it\u2019s simply a matter of iterating over rear ids and calculating the widest one. Our camera feature only exposes the default and the widest sensor to the user, so this is the logic that works for us:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getWidestPhysicalCamera</span><span class=\"p\">(</span><span class=\"n\">streamingResolution</span><span class=\"p\">:</span> <span class=\"nc\">StreamingResolution</span><span class=\"p\">):</span> <span class=\"nc\">CameraInfo</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">cameraManager</span>\n        <span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getWidestCameraId</span><span class=\"p\">()</span>\n        <span class=\"o\">?.</span><span class=\"nf\">mapNotNull</span> <span class=\"p\">{</span> <span class=\"n\">cameraId</span> <span class=\"p\">-&gt;</span>\n            <span class=\"n\">cameraId</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">().</span><span class=\"nf\">getMaxSupportedResolution</span><span class=\"p\">(</span><span class=\"n\">streamingResolution</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">?.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">cameraId</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span>\n            <span class=\"nc\">CameraInfo</span><span class=\"p\">(</span><span class=\"n\">cameraId</span><span class=\"p\">,</span> <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WidePhysical</span><span class=\"p\">,</span> <span class=\"nc\">StreamingResolution</span><span class=\"p\">(</span><span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">streamingResolution</span><span class=\"p\">.</span><span class=\"n\">fps</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">?.</span><span class=\"nf\">firstOrNull</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;.</span><span class=\"nf\">getWidestCameraId</span><span class=\"p\">():</span> <span class=\"nc\">CameraId</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">maxByOrNull</span> <span class=\"p\">{</span>\n    <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">computeCameraWidth</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraId</span><span class=\"p\">.</span><span class=\"nf\">computeCameraWidth</span><span class=\"p\">():</span> <span class=\"nc\">Float</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">activeSize</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SENSOR_INFO_ACTIVE_ARRAY_SIZE</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">physicalSize</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SENSOR_INFO_PHYSICAL_SIZE</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">pixelSize</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SENSOR_INFO_PIXEL_ARRAY_SIZE</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">focalLengths</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_INFO_AVAILABLE_FOCAL_LENGTHS</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">var</span> <span class=\"py\">cameraWidth</span> <span class=\"p\">=</span> <span class=\"nc\">Float</span><span class=\"p\">.</span><span class=\"nc\">MIN_VALUE</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">activeSize</span> <span class=\"p\">!=</span> <span class=\"k\">null</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">physicalSize</span> <span class=\"p\">!=</span> <span class=\"k\">null</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">pixelSize</span> <span class=\"p\">!=</span> <span class=\"k\">null</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">focalLengths</span> <span class=\"p\">!=</span> <span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">val</span> <span class=\"py\">fractionX</span> <span class=\"p\">=</span> <span class=\"n\">activeSize</span><span class=\"p\">.</span><span class=\"nf\">width</span><span class=\"p\">().</span><span class=\"nf\">toFloat</span><span class=\"p\">()</span> <span class=\"p\">/</span> <span class=\"n\">pixelSize</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">.</span><span class=\"nf\">toFloat</span><span class=\"p\">()</span>\n\n        <span class=\"kd\">val</span> <span class=\"py\">firstFocalLength</span> <span class=\"p\">=</span> <span class=\"n\">focalLengths</span><span class=\"p\">.</span><span class=\"nf\">firstOrNull</span><span class=\"p\">()</span>\n\n        <span class=\"n\">firstFocalLength</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n            <span class=\"n\">cameraWidth</span> <span class=\"p\">=</span> <span class=\"nc\">Math</span><span class=\"p\">.</span><span class=\"nf\">toDegrees</span><span class=\"p\">(</span><span class=\"mf\">2.0</span> <span class=\"p\">*</span> <span class=\"nf\">atan2</span><span class=\"p\">((</span><span class=\"n\">physicalSize</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"p\">*</span> <span class=\"n\">fractionX</span><span class=\"p\">).</span><span class=\"nf\">toDouble</span><span class=\"p\">(),</span> <span class=\"mf\">2.0</span> <span class=\"p\">*</span> <span class=\"n\">firstFocalLength</span><span class=\"p\">)).</span><span class=\"nf\">toFloat</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">cameraWidth</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Note that we basically ripped the widest calculation logic from various SO posts. <a href=\"https://stackoverflow.com/questions/39965408/what-is-the-android-camera2-api-equivalent-of-camera-parameters-gethorizontalvie/39983168\">Here\u2019s</a> one that offers a good explanation of what\u2019s going on there.</p>\n\n<p>This logic along with the original logic to fetch the default rear camera yields two camera ids. Switching between them is just restarting your preview/capture session with the new id.</p>\n\n<h1 id=\"supporting-logical-camera-setups\">Supporting logical camera setups</h1>\n\n<p>Okay, we have to jump through a few more hoops when supporting logical camera setups. Once we have determined we do have a logical camera setup present, we have to determine which rear camera id has the logical cameras behind it:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">P</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;.</span><span class=\"nf\">getLogicalCameras</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">capabilities</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">?.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"k\">true</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Now we have a list of rear camera ids that have logical multi camera capabilities. This means that this camera id is a <em>logical</em> camera id. This means that this <em>logical</em> camera id has 2 or more <em>physical</em> camera ids behind it. We need those to address individual lenses. This is how we get them:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">P</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;.</span><span class=\"nf\">getAllLogicalPhysicalPairs</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Pair</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">,</span> <span class=\"nc\">CameraId</span><span class=\"p\">&gt;&gt;</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">flatMap</span> <span class=\"p\">{</span> <span class=\"n\">logicalCameraId</span> <span class=\"p\">-&gt;</span>\n    <span class=\"kd\">val</span> <span class=\"py\">physicalCameraIds</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">).</span><span class=\"n\">physicalCameraIds</span><span class=\"p\">.</span><span class=\"nf\">toList</span><span class=\"p\">()</span>\n    <span class=\"n\">physicalCameraIds</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Pair</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">,</span> <span class=\"n\">it</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Now we have <em>physical</em> ids paired up with their logical id. Now we need to figure out the widest lens of the physical ones. This is easier than the physical setup, because now we have <code class=\"language-plaintext highlighter-rouge\">LENS_INFO_AVAILABLE_FOCAL_LENGTHS</code> available to us:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Pair</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">,</span> <span class=\"nc\">CameraId</span><span class=\"p\">&gt;&gt;.</span><span class=\"nf\">getWidestLogicalCamera</span><span class=\"p\">():</span> <span class=\"nc\">CameraId</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">minByOrNull</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">cameraCharacteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">)</span>\n    <span class=\"n\">cameraCharacteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_INFO_AVAILABLE_FOCAL_LENGTHS</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"nf\">minOrNull</span><span class=\"p\">()</span> <span class=\"o\">?:</span> <span class=\"nc\">Float</span><span class=\"p\">.</span><span class=\"nc\">MAX_VALUE</span>\n<span class=\"p\">}</span><span class=\"o\">?.</span><span class=\"n\">first</span></code></pre></figure>\n\n<p>Exhausted yet? Finally, logical camera setups require you to set a zoom ratio to get the widest focal length. We get the number like so:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">R</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getMinimumControlZoomRatio</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">:</span> <span class=\"nc\">CameraId</span><span class=\"p\">):</span> <span class=\"nc\">Float</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">cameraCharacteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cameraCharacteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">CONTROL_ZOOM_RATIO_RANGE</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"n\">lower</span> <span class=\"o\">?:</span> <span class=\"mf\">1F</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Putting it all together:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">R</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getWidestLogicalRearCamera</span><span class=\"p\">():</span> <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WideLogical</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">cameraManager</span>\n        <span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getLogicalCameras</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getAllLogicalPhysicalPairs</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getWidestLogicalCamera</span><span class=\"p\">()</span>\n        <span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n            <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WideLogical</span><span class=\"p\">(</span><span class=\"nf\">getMinimumControlZoomRatio</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>So we have the correct id to open the rear camera session with and a control zoom ratio. The capture request is built the same but now we use the control zoom ratio:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cameraLensType</span> <span class=\"k\">is</span> <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WideLogical</span> <span class=\"p\">&amp;&amp;</span> <span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION</span><span class=\"p\">.</span><span class=\"nc\">SDK_INT</span> <span class=\"p\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">captureRequestBuilder</span><span class=\"p\">.</span><span class=\"k\">set</span><span class=\"p\">(</span><span class=\"nc\">CaptureRequest</span><span class=\"p\">.</span><span class=\"nc\">CONTROL_ZOOM_RATIO</span><span class=\"p\">,</span> <span class=\"n\">cameraLensType</span><span class=\"p\">.</span><span class=\"n\">controlZoomRatio</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Note that you don\u2019t use <code class=\"language-plaintext highlighter-rouge\">physicalCameraIds</code> to actually open a camera session. With logical camera setups, you still use a camera id found in <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code> to open a camera session. You then just give it a minimum zoom control ratio. Then the OS itself takes care of selecting the widest lens to reach the desired zoom control.</p>\n\n<h2 id=\"gotcha\">Gotcha!</h2>\n\n<p>Okay, so code stuff out of the way. Figuring all the correct ways of doing this was tough as there are not a lot of code samples out there. But there is one\u2026</p>\n\n<p><a href=\"https://sourceforge.net/projects/opencamera/\">OpenCamera</a>. OpenCamera is a highly featured, open source camera app. And it includes support for physical and logical multi camera setups! Great, a perfect reference.</p>\n\n<p>So I install OpenCamera on my OnePlus 7 Pro and it seamlessly switches between wide and ultrawide lenses. So a couple cmd+c, cmd+v strokes from the OpenCamera source later I had the multi-camera implementation inside the TeamManager app. And\u2026it didn\u2019t work. <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code> showed only the front camera and the rear standard lenses in my app (Note this is a physical setup). But in the OpenCamera app, the same API call <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code> showed the front camera, rear standard and rear ultrawide.</p>\n\n<p>This really threw us for a loop. For whatever reason, the OpenCamera package name was white listed and thus allowed to access more camera ids.* Why? We aren\u2019t sure. Just OnePlus things, amirite? But what it means is that our app can not support wide angle streaming for OnePlus devices.</p>\n\n<p>*I can\u2019t find where I found this anymore, but it was buried deep in a SO post. Took us a couple of days at least to find out.</p>\n\n<p>And this was just the tip of the iceberg for dealing with manufacturers\u2019 implementation\u2026</p>\n\n<h2 id=\"at-the-mercy-of-the-manufacturers\">At the mercy of the manufacturers</h2>\n\n<p>Reading this whole article, you may ask, how do we know which phones support which setup? Well, the short answer is that we have no idea. Here\u2019s a short list of what we have found so far, if the device has an ultrawide rear lens:</p>\n\n<p><strong>OnePlus devices:</strong> Physical setup that doesn\u2019t expose ultrawide to our app, does expose ultrawide to OpenCamera. Ultrawide works in native camera app.</p>\n\n<p><strong>Motorola devices:</strong> Physical setup that doesn\u2019t expose ultrawide to <em>any</em> app. Ultrawide works in native camera app.</p>\n\n<p><strong>Samsung devices:</strong> Physical setup that exposes standard rear and ultrawide. Ultrawide works in native camera app and OpenCamera. We were able to support Samsung devices.</p>\n\n<p><strong>Pixel devices:</strong> Logical setup, but only the Pixel 5 has an ultrawide. The Pixel 4 has a standard and telephoto. So we needed to check if the device has a logical rear camera that is <em>wider</em> than the default camera. Pixels are the only devices we have found that support logical setups.</p>\n\n<p>And these are just the ones we know about! We don\u2019t have every device in the world and this can change with software updates and new devices.</p>\n\n<p>As you can see, how each manufacturer decides to implement the multi-camera API is completely random and illogical. We ended not being able to support as many devices as we thought when the project was conceived. It is very disappointing to see the state of the multi camera API as manufacturers implement it. Especially considering how many devices are being built with multiple lenses.</p>\n\n<p>But hey, I think we are \u201cfuture-proofed\u201d, whatever that means. Until the multi-camera API is deprecated anyway\u2026</p>"
      }
    ],
    "summary": "<p>At GameChanger, video streaming has become a huge part of our business and thus our tech stack. But as a small company that practices shipping often, we can\u2019t ship everything feature complete from day one and thus video streaming launched with the ability to only stream from your default rear camera lens.</p>\n\n<p>But as we know, ultrawide lenses on phones have become common place and sure enough, customers began writing in, asking to be able to use their ultrawide cameras to stream their event. Baseball and softball fields are actually quite wide and it makes a lot of sense to be able to capture more of the field. So in time, ultrawide streaming became our priority and thus we engaged in battle with one of the most brittle Android APIs we have seen\u2026</p>\n\n<h1 id=\"streaming-in-the-olden-days\">Streaming in the olden days</h1>\n\n<p>Well, not really in the olden days, because we are using the most up to date APIs, but before we implemented ultrawide streaming, selecting the camera we wanted to stream with was generally pretty simple:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraManager</span><span class=\"p\">.</span><span class=\"nf\">chooseCamera</span><span class=\"p\">(</span><span class=\"n\">teamId</span><span class=\"p\">:</span> <span class=\"nc\">TeamId</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">cameraIdList</span><span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">id</span> <span class=\"p\">-&gt;</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">capabilities</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span><span class=\"o\">!!</span>\n\n    <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"nc\">CameraMetadata</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING_BACK</span> <span class=\"p\">&amp;&amp;</span>\n        <span class=\"n\">capabilities</span><span class=\"p\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">mapNotNull</span> <span class=\"p\">{</span> <span class=\"n\">id</span> <span class=\"p\">-&gt;</span>\n        <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"kd\">val</span> <span class=\"py\">cameraConfig</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SCALER_STREAM_CONFIGURATION_MAP</span><span class=\"p\">)</span><span class=\"o\">!!</span>\n\n        <span class=\"kd\">val</span> <span class=\"p\">(</span><span class=\"py\">width</span><span class=\"p\">,</span> <span class=\"py\">height</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"nf\">arrayOf</span><span class=\"p\">(</span><span class=\"mi\">1280</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">)</span>\n        <span class=\"n\">cameraConfig</span><span class=\"p\">.</span><span class=\"nf\">getOutputSizes</span><span class=\"p\">(</span><span class=\"nc\">MediaRecorder</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">.</span><span class=\"n\">java</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"p\">&lt;=</span> <span class=\"n\">width</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"p\">&lt;=</span> <span class=\"n\">height</span> <span class=\"p\">}</span>\n            <span class=\"p\">.</span><span class=\"nf\">maxByOrNull</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"p\">*</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"p\">}</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span> <span class=\"n\">id</span> <span class=\"n\">to</span> <span class=\"n\">it</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">CameraArgs</span><span class=\"p\">(</span><span class=\"n\">cameraId</span> <span class=\"p\">=</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"p\">=</span> <span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"p\">=</span> <span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">fps</span> <span class=\"p\">=</span> <span class=\"mi\">30</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">firstOrNull</span><span class=\"p\">()</span></code></pre></figure>\n\n<p><strong>TL;DR:</strong> Basically, get the first rear camera that supports 720p. Note the <code class=\"language-plaintext highlighter-rouge\">cameraId</code>\u2014an ID corresponds to each camera on the device\u2026right?</p>\n\n<p>Nope. Well sometimes, it depends.</p>\n\n<h2 id=\"enter-multi-camera-api\">Enter Multi-Camera API</h2>\n\n<p>At the time of writing, the not-deprecated API for accessing cameras on Android is <code class=\"language-plaintext highlighter-rouge\">camera2</code>. <code class=\"language-plaintext highlighter-rouge\">camera1</code> is deprecated. <code class=\"language-plaintext highlighter-rouge\">cameraX</code> is built on top of <code class=\"language-plaintext highlighter-rouge\">camera2</code>. Obviously.</p>\n\n<p><a href=\"https://developer.android.com/training/camera2\">Here</a> are some references for <code class=\"language-plaintext highlighter-rouge\">camera2</code>. We are going to focus on the multi-camera training <a href=\"https://developer.android.com/training/camera2/multi-camera\">here</a> as a jumping off point.</p>\n\n<p>The multi-camera training page does a great job of explaining the differences between logical and physical camera setups, when it was introduced and why but for the purposes of this article here\u2019s what you need to know:</p>\n<ul>\n  <li>An Android device running above API level 28 runs either a logical or physical camera setup. Below 28 is strictly a physical camera setup.</li>\n  <li>Physical camera setups expose each camera sensor individually with <code class=\"language-plaintext highlighter-rouge\">cameraId</code>s through <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code>. If you are lucky, you will have one camera id per physical sensor and be able to choose any id you want to stream with.</li>\n  <li>Logical camera setups hide the details of the different physical cameras sensors on the back side of the phone, giving you just one id for the front and back of the device in the <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code>. However, if you continue to poke the camera API, you can get those physical sensor ids, but you still can\u2019t use them to open a camera session. You must use ids from <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code>. Thus, to actually stream with an ultrawide sensor on a logical camera setup, you have to do more\u2026things.</li>\n</ul>\n\n<p>Okay, doesn\u2019t sound too bad. It\u2019s easy enough to figure out if a device is a physical or logical camera setup:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraManager</span><span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"n\">cameraIdList</span><span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">capabilities</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span>\n\n    <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"nc\">CameraMetadata</span><span class=\"p\">.</span><span class=\"nc\">LENS_FACING_BACK</span> <span class=\"p\">&amp;&amp;</span>\n        <span class=\"n\">capabilities</span><span class=\"o\">?.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"k\">true</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraManager</span><span class=\"p\">.</span><span class=\"nf\">hasRearLogicalCameras</span><span class=\"p\">():</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">().</span><span class=\"nf\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">).</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span>\n        <span class=\"o\">?.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"k\">true</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>So let\u2019s start with the easy one.</p>\n\n<h1 id=\"supporting-physical-camera-setups\">Supporting physical camera setups</h1>\n\n<p>Once we know that we are dealing with a physical camera setup, it\u2019s simply a matter of iterating over rear ids and calculating the widest one. Our camera feature only exposes the default and the widest sensor to the user, so this is the logic that works for us:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getWidestPhysicalCamera</span><span class=\"p\">(</span><span class=\"n\">streamingResolution</span><span class=\"p\">:</span> <span class=\"nc\">StreamingResolution</span><span class=\"p\">):</span> <span class=\"nc\">CameraInfo</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">cameraManager</span>\n        <span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getWidestCameraId</span><span class=\"p\">()</span>\n        <span class=\"o\">?.</span><span class=\"nf\">mapNotNull</span> <span class=\"p\">{</span> <span class=\"n\">cameraId</span> <span class=\"p\">-&gt;</span>\n            <span class=\"n\">cameraId</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">().</span><span class=\"nf\">getMaxSupportedResolution</span><span class=\"p\">(</span><span class=\"n\">streamingResolution</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">?.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">cameraId</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span>\n            <span class=\"nc\">CameraInfo</span><span class=\"p\">(</span><span class=\"n\">cameraId</span><span class=\"p\">,</span> <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WidePhysical</span><span class=\"p\">,</span> <span class=\"nc\">StreamingResolution</span><span class=\"p\">(</span><span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">streamingResolution</span><span class=\"p\">.</span><span class=\"n\">fps</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">?.</span><span class=\"nf\">firstOrNull</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;.</span><span class=\"nf\">getWidestCameraId</span><span class=\"p\">():</span> <span class=\"nc\">CameraId</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">maxByOrNull</span> <span class=\"p\">{</span>\n    <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">computeCameraWidth</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">CameraId</span><span class=\"p\">.</span><span class=\"nf\">computeCameraWidth</span><span class=\"p\">():</span> <span class=\"nc\">Float</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">activeSize</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SENSOR_INFO_ACTIVE_ARRAY_SIZE</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">physicalSize</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SENSOR_INFO_PHYSICAL_SIZE</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">pixelSize</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">SENSOR_INFO_PIXEL_ARRAY_SIZE</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">focalLengths</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_INFO_AVAILABLE_FOCAL_LENGTHS</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">var</span> <span class=\"py\">cameraWidth</span> <span class=\"p\">=</span> <span class=\"nc\">Float</span><span class=\"p\">.</span><span class=\"nc\">MIN_VALUE</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">activeSize</span> <span class=\"p\">!=</span> <span class=\"k\">null</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">physicalSize</span> <span class=\"p\">!=</span> <span class=\"k\">null</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">pixelSize</span> <span class=\"p\">!=</span> <span class=\"k\">null</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">focalLengths</span> <span class=\"p\">!=</span> <span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">val</span> <span class=\"py\">fractionX</span> <span class=\"p\">=</span> <span class=\"n\">activeSize</span><span class=\"p\">.</span><span class=\"nf\">width</span><span class=\"p\">().</span><span class=\"nf\">toFloat</span><span class=\"p\">()</span> <span class=\"p\">/</span> <span class=\"n\">pixelSize</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">.</span><span class=\"nf\">toFloat</span><span class=\"p\">()</span>\n\n        <span class=\"kd\">val</span> <span class=\"py\">firstFocalLength</span> <span class=\"p\">=</span> <span class=\"n\">focalLengths</span><span class=\"p\">.</span><span class=\"nf\">firstOrNull</span><span class=\"p\">()</span>\n\n        <span class=\"n\">firstFocalLength</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n            <span class=\"n\">cameraWidth</span> <span class=\"p\">=</span> <span class=\"nc\">Math</span><span class=\"p\">.</span><span class=\"nf\">toDegrees</span><span class=\"p\">(</span><span class=\"mf\">2.0</span> <span class=\"p\">*</span> <span class=\"nf\">atan2</span><span class=\"p\">((</span><span class=\"n\">physicalSize</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"p\">*</span> <span class=\"n\">fractionX</span><span class=\"p\">).</span><span class=\"nf\">toDouble</span><span class=\"p\">(),</span> <span class=\"mf\">2.0</span> <span class=\"p\">*</span> <span class=\"n\">firstFocalLength</span><span class=\"p\">)).</span><span class=\"nf\">toFloat</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">cameraWidth</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Note that we basically ripped the widest calculation logic from various SO posts. <a href=\"https://stackoverflow.com/questions/39965408/what-is-the-android-camera2-api-equivalent-of-camera-parameters-gethorizontalvie/39983168\">Here\u2019s</a> one that offers a good explanation of what\u2019s going on there.</p>\n\n<p>This logic along with the original logic to fetch the default rear camera yields two camera ids. Switching between them is just restarting your preview/capture session with the new id.</p>\n\n<h1 id=\"supporting-logical-camera-setups\">Supporting logical camera setups</h1>\n\n<p>Okay, we have to jump through a few more hoops when supporting logical camera setups. Once we have determined we do have a logical camera setup present, we have to determine which rear camera id has the logical cameras behind it:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">P</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;.</span><span class=\"nf\">getLogicalCameras</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">characteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">capabilities</span> <span class=\"p\">=</span> <span class=\"n\">characteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES</span><span class=\"p\">)</span>\n    <span class=\"n\">capabilities</span><span class=\"o\">?.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"k\">true</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Now we have a list of rear camera ids that have logical multi camera capabilities. This means that this camera id is a <em>logical</em> camera id. This means that this <em>logical</em> camera id has 2 or more <em>physical</em> camera ids behind it. We need those to address individual lenses. This is how we get them:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">P</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">&gt;.</span><span class=\"nf\">getAllLogicalPhysicalPairs</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Pair</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">,</span> <span class=\"nc\">CameraId</span><span class=\"p\">&gt;&gt;</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">flatMap</span> <span class=\"p\">{</span> <span class=\"n\">logicalCameraId</span> <span class=\"p\">-&gt;</span>\n    <span class=\"kd\">val</span> <span class=\"py\">physicalCameraIds</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">).</span><span class=\"n\">physicalCameraIds</span><span class=\"p\">.</span><span class=\"nf\">toList</span><span class=\"p\">()</span>\n    <span class=\"n\">physicalCameraIds</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Pair</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">,</span> <span class=\"n\">it</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Now we have <em>physical</em> ids paired up with their logical id. Now we need to figure out the widest lens of the physical ones. This is easier than the physical setup, because now we have <code class=\"language-plaintext highlighter-rouge\">LENS_INFO_AVAILABLE_FOCAL_LENGTHS</code> available to us:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Pair</span><span class=\"p\">&lt;</span><span class=\"nc\">CameraId</span><span class=\"p\">,</span> <span class=\"nc\">CameraId</span><span class=\"p\">&gt;&gt;.</span><span class=\"nf\">getWidestLogicalCamera</span><span class=\"p\">():</span> <span class=\"nc\">CameraId</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">minByOrNull</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">cameraCharacteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">)</span>\n    <span class=\"n\">cameraCharacteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">LENS_INFO_AVAILABLE_FOCAL_LENGTHS</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"nf\">minOrNull</span><span class=\"p\">()</span> <span class=\"o\">?:</span> <span class=\"nc\">Float</span><span class=\"p\">.</span><span class=\"nc\">MAX_VALUE</span>\n<span class=\"p\">}</span><span class=\"o\">?.</span><span class=\"n\">first</span></code></pre></figure>\n\n<p>Exhausted yet? Finally, logical camera setups require you to set a zoom ratio to get the widest focal length. We get the number like so:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">R</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getMinimumControlZoomRatio</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">:</span> <span class=\"nc\">CameraId</span><span class=\"p\">):</span> <span class=\"nc\">Float</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">cameraCharacteristics</span> <span class=\"p\">=</span> <span class=\"n\">cameraManager</span><span class=\"p\">.</span><span class=\"nf\">getCameraCharacteristics</span><span class=\"p\">(</span><span class=\"n\">logicalCameraId</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cameraCharacteristics</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"nc\">CameraCharacteristics</span><span class=\"p\">.</span><span class=\"nc\">CONTROL_ZOOM_RATIO_RANGE</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"n\">lower</span> <span class=\"o\">?:</span> <span class=\"mf\">1F</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Putting it all together:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"nd\">@RequiresApi</span><span class=\"p\">(</span><span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">R</span><span class=\"p\">)</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getWidestLogicalRearCamera</span><span class=\"p\">():</span> <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WideLogical</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">cameraManager</span>\n        <span class=\"p\">.</span><span class=\"nf\">getRearCameraIds</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getLogicalCameras</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getAllLogicalPhysicalPairs</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">getWidestLogicalCamera</span><span class=\"p\">()</span>\n        <span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n            <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WideLogical</span><span class=\"p\">(</span><span class=\"nf\">getMinimumControlZoomRatio</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>So we have the correct id to open the rear camera session with and a control zoom ratio. The capture request is built the same but now we use the control zoom ratio:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-kotlin\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cameraLensType</span> <span class=\"k\">is</span> <span class=\"nc\">CameraLensType</span><span class=\"p\">.</span><span class=\"nc\">WideLogical</span> <span class=\"p\">&amp;&amp;</span> <span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION</span><span class=\"p\">.</span><span class=\"nc\">SDK_INT</span> <span class=\"p\">&gt;=</span> <span class=\"nc\">Build</span><span class=\"p\">.</span><span class=\"nc\">VERSION_CODES</span><span class=\"p\">.</span><span class=\"nc\">R</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">captureRequestBuilder</span><span class=\"p\">.</span><span class=\"k\">set</span><span class=\"p\">(</span><span class=\"nc\">CaptureRequest</span><span class=\"p\">.</span><span class=\"nc\">CONTROL_ZOOM_RATIO</span><span class=\"p\">,</span> <span class=\"n\">cameraLensType</span><span class=\"p\">.</span><span class=\"n\">controlZoomRatio</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Note that you don\u2019t use <code class=\"language-plaintext highlighter-rouge\">physicalCameraIds</code> to actually open a camera session. With logical camera setups, you still use a camera id found in <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code> to open a camera session. You then just give it a minimum zoom control ratio. Then the OS itself takes care of selecting the widest lens to reach the desired zoom control.</p>\n\n<h2 id=\"gotcha\">Gotcha!</h2>\n\n<p>Okay, so code stuff out of the way. Figuring all the correct ways of doing this was tough as there are not a lot of code samples out there. But there is one\u2026</p>\n\n<p><a href=\"https://sourceforge.net/projects/opencamera/\">OpenCamera</a>. OpenCamera is a highly featured, open source camera app. And it includes support for physical and logical multi camera setups! Great, a perfect reference.</p>\n\n<p>So I install OpenCamera on my OnePlus 7 Pro and it seamlessly switches between wide and ultrawide lenses. So a couple cmd+c, cmd+v strokes from the OpenCamera source later I had the multi-camera implementation inside the TeamManager app. And\u2026it didn\u2019t work. <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code> showed only the front camera and the rear standard lenses in my app (Note this is a physical setup). But in the OpenCamera app, the same API call <code class=\"language-plaintext highlighter-rouge\">cameraManager.cameraIdList</code> showed the front camera, rear standard and rear ultrawide.</p>\n\n<p>This really threw us for a loop. For whatever reason, the OpenCamera package name was white listed and thus allowed to access more camera ids.* Why? We aren\u2019t sure. Just OnePlus things, amirite? But what it means is that our app can not support wide angle streaming for OnePlus devices.</p>\n\n<p>*I can\u2019t find where I found this anymore, but it was buried deep in a SO post. Took us a couple of days at least to find out.</p>\n\n<p>And this was just the tip of the iceberg for dealing with manufacturers\u2019 implementation\u2026</p>\n\n<h2 id=\"at-the-mercy-of-the-manufacturers\">At the mercy of the manufacturers</h2>\n\n<p>Reading this whole article, you may ask, how do we know which phones support which setup? Well, the short answer is that we have no idea. Here\u2019s a short list of what we have found so far, if the device has an ultrawide rear lens:</p>\n\n<p><strong>OnePlus devices:</strong> Physical setup that doesn\u2019t expose ultrawide to our app, does expose ultrawide to OpenCamera. Ultrawide works in native camera app.</p>\n\n<p><strong>Motorola devices:</strong> Physical setup that doesn\u2019t expose ultrawide to <em>any</em> app. Ultrawide works in native camera app.</p>\n\n<p><strong>Samsung devices:</strong> Physical setup that exposes standard rear and ultrawide. Ultrawide works in native camera app and OpenCamera. We were able to support Samsung devices.</p>\n\n<p><strong>Pixel devices:</strong> Logical setup, but only the Pixel 5 has an ultrawide. The Pixel 4 has a standard and telephoto. So we needed to check if the device has a logical rear camera that is <em>wider</em> than the default camera. Pixels are the only devices we have found that support logical setups.</p>\n\n<p>And these are just the ones we know about! We don\u2019t have every device in the world and this can change with software updates and new devices.</p>\n\n<p>As you can see, how each manufacturer decides to implement the multi-camera API is completely random and illogical. We ended not being able to support as many devices as we thought when the project was conceived. It is very disappointing to see the state of the multi camera API as manufacturers implement it. Especially considering how many devices are being built with multiple lenses.</p>\n\n<p>But hey, I think we are \u201cfuture-proofed\u201d, whatever that means. Until the multi-camera API is deprecated anyway\u2026</p>"
  }
}