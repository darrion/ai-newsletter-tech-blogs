{
  "company": "Advanced Web Machinery",
  "title": "Advanced Web Machinery",
  "xmlUrl": "https://advancedweb.hu/atom.xml",
  "htmlUrl": "https://advancedweb.hu/",
  "content": "How to use CloudFront signed cookies to serve MPD or HLS videos - Advanced Web Machinery      \u00a0HomeBooks & CoursesAll articlesAboutShare           How to use CloudFront signed cookies to serve MPD or HLS videosProtected content without changing the URLsTam\u00e1s Sallai 3 mins Photo by Dan Cristian P\u0103dure\u021b on Unsplash  Want to learn AWS serverless development? Click here Signed URLsSigned URLs is a mechanism to securely give access to protected content. It works by the backend generating a signature that the clients then can use directly with S3 or CloudFront to get the content. It's the primary way to offer downloads and uploads in serverless applications.For example, if an image is stored at images/abc.jpg then a signed URL for it would be images/abc.jpg?x-id=GetObject&....Notice that URL for the file is changed. This is usually not a problem, as when the user clicks the \"download\" button, there is no expectation about where the file is downloaded from so the backend is free to return a signed URL.Segmented video formatsBut in some cases, the client expects the file to have a specific URL. One of the most common examples for this is segmented video files, such as HLS or MPD. Here, the video stream is broken up to segments and a manifest file defines where the individual files can be found.For example, an MPD manifest looks like this:&LTRepresentation\n\tid=\"0\"\n\tmimeType=\"video/mp4\"\n\tcodecs=\"avc1.4d401f\"\n\tbandwidth=\"800000\"\n\twidth=\"1280\"\n\theight=\"720\"\n\tsar=\"1:1\"\n>\n\t&LTSegmentTemplate\n\t\ttimescale=\"15360\"\n\t\tinitialization=\"init-stream$RepresentationID$.m4s\"\n\t\tmedia=\"chunk-stream$RepresentationID$-$Number%05d$.m4s\"\n\t\tstartNumber=\"1\"\n\t>\n\t\t&LTSegmentTimeline>\n\t\t\t&LTS t=\"0\" d=\"122880\" />\n\t\t\t&LTS d=\"30720\" />\n\t\t</SegmentTimeline>\n\t</SegmentTemplate>\n</Representation>\nWhen the client reads this and plays the video, it knows how to download the segments:chunk-stream0-00001.m4schunk-stream0-00002.m4schunk-stream0-00003.m4s...But then it does not work with signed URLs anymore as the client can not possibly calculate the signature for each file.This is where signed cookies are useful.CloudFront signed cookiesSigned cookies is another mechanism to give controlled access to protected files. Instead of modifying a URL, the backend returns a set of cookies for the client. By the standard, these cookies are attached to the requests automatically by the browser, which means there is no change needed on the client.An example set of signed cookies:{\n\t\"CloudFront-Key-Pair-Id\": \"KJX6ADYM9FBCS\",\n\t\"CloudFront-Signature\": \"kAqF32fiDKmOUpDPUNQ...\",\n\t\"CloudFront-Policy\": \"eyJTdGF0ZW1lbnQiOlt7IlJlc29...\"\n}\nThe signature can contain wildcards for signed cookies, in practice that means that it's possible to sign them for all files under a directory. This gives an easy-to-use structure where each video can be stored in a folder and the signature can give access to a specific one the client wants to play.For example, the S3 bucket can contain two videos:bunny/bunny.mpd\nbunny/chunk-stream0-00001.m4s\nbunny/chunk-stream0-00002.m4s\nbunny/chunk-stream1-00001.m4s\nbunny/chunk-stream1-00002.m4s\nbunny/init-stream0.m4s\nbunny/init-stream1.m4s\n\nsintel/sintel.mpd\nsintel/chunk-stream0-00001.m4s\nsintel/chunk-stream0-00002.m4s\nsintel/chunk-stream1-00001.m4s\nsintel/chunk-stream1-00002.m4s\nsintel/init-stream0.m4s\nsintel/init-stream1.m4s\nThis S3 bucket is then used as an origin for the CloudFront distribution and mapped to a path, let's say /videos/*During signing, the backend generates the cookies for a specific folder under this path:import {getSignedCookies} from \"@aws-sdk/cloudfront-signer\";\n\nreturn getSignedCookies({\n\tkeyPairId: process.env.KEYPAIR_ID,\n\tprivateKey: (await getCfPrivateKey()).Parameter.Value,\n\tpolicy: JSON.stringify({\n\t\tStatement: [\n\t\t\t{\n\t\t\t\tResource:\n\t`https://${process.env.DISTRIBUTION_DOMAIN}/videos/${video}/*`,\n\t\t\t\tCondition: {\n\t\t\t\t\tDateLessThan: {\n\t\t\t\t\t\t\"AWS:EpochTime\":\n\t\t\t\t\t\t\tMath.round(\n\t\t\t\t\t\t\t\tnew Date(\n\t\t\t\t\t\t\t\t\tnew Date().getTime() + 60 * 60 * 1000\n\t\t\t\t\t\t\t\t).getTime() / 1000\n\t\t\t\t\t\t\t),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t})\n});\nThe only thing left is to set the cookies in the HTTP response:return {\n\tstatusCode: 307,\n\tcookies: Object.entries(signedCookies).map(([name, value]) => {\n\t\treturn [\n\t\t\t`${name}=${value}`,\n\t\t\t\"HttpOnly\",\n\t\t\t`Path=/videos/${videoName}`,\n\t\t\t\"SameSite=Strict\",\n\t\t\t\"Secure\",\n\t\t].join(\"; \");\n\t}),\n\theaders: {\n\t\tLocation: `/videos/${videoName}/${videoName}.mpd`,\n\t},\n};\nNotice the Path here: since the name of the cookies are fixed, setting them on the / would overwrite earlier cookies. That could cause problems when the client plays multiple videos in parallel, such as using several tabs. The best practice here is to use the most specific path for the cookies.Master AWS serverless app developmentWell-researched, in-depth content to help you with your serverless journey.  Diving deepS3 and CloudFront Signed URLsHow to handle files in an AWS serverless environment Read more >   SpecializationBuilding GraphQL APIs with AWS AppSyncHow to design, implement, and deploy GraphQL-based APIs on the AWS cloud Read more >   FoundationPromises and Async/Await in JavaScriptThe building blocks of modern asynchronous programming Read more > AWS 181CloudFront 30January 9, 2024Would you share this article? If you learned something from it, someone else might too.           You won't miss out future posts by joining our mailing list and subscribing to the RSS feed! Tam\u00e1s Sallai                 I came to believe that great software craftsmanship starts with understanding the underlying technologies better. You can't rely on \"easy solutions\" and \"quick fixes\" when you want dependable systems. I write about technology to deepen my knowledge and also to help others solve problems.I'm the author of the Building GraphQL APIs with AWS AppSync, the S3 and CloudFront Signed URLs, and the Promises and Async/Await in JavaScript books.Check out the Books & Courses page for the other content I made.How to remove a resource before creating it with the CDK \u00bbHi, I'm Tam\u00e1s,I write articles about AWS, Javascript, security, and web technologies.I'm the author of the Building GraphQL APIs with AWS AppSync, the S3 and CloudFront Signed URLs, and the Promises and Async/Await in JavaScript books.Sign up to the newsletter and keep in touch.                In this articleSigned URLsSegmented video formatsCloudFront signed cookiesStatisticsTo make sure we don't lose counts:375Posts2AuthorsFeedsRSSAtomFavouritesA categorized list of all Java and JVM features since JDK 8 to 21What is the principle of least privilege and why it's such a hard thing to achieveHow to change a blog's permalinks and not lose all organic trafficAre S3 signed URLs secure?What is the optimal password length\u00a9 2024 Advanced Web MachineryTam\u00e1s Sallai",
  "latestPost": {
    "title": "How to use CloudFront signed cookies to serve MPD or HLS videos",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://advancedweb.hu/atom.xml",
      "value": "How to use CloudFront signed cookies to serve MPD or HLS videos"
    },
    "links": [
      {
        "href": "https://advancedweb.hu/how-to-use-cloudfront-signed-cookies-to-serve-mpd-or-hls-videos/",
        "rel": "alternate",
        "type": "text/html"
      }
    ],
    "link": "https://advancedweb.hu/how-to-use-cloudfront-signed-cookies-to-serve-mpd-or-hls-videos/",
    "updated": "2024-01-09T00:00:00+00:00",
    "updated_parsed": [
      2024,
      1,
      9,
      0,
      0,
      0,
      1,
      9,
      0
    ],
    "id": "https://advancedweb.hu/how-to-use-cloudfront-signed-cookies-to-serve-mpd-or-hls-videos",
    "guidislink": false,
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://advancedweb.hu/atom.xml",
        "value": "<a href=\"https://advancedweb.hu/how-to-use-cloudfront-signed-cookies-to-serve-mpd-or-hls-videos/\">(Read this article on the blog)</a><h2 id=\"signed-urls\" tabindex=\"-1\">Signed URLs</h2>\n<p>Signed URLs is a mechanism to securely give access to protected content. It works by the backend generating a signature that the clients then can use directly\nwith S3 or CloudFront to get the content. It's the primary way to offer downloads and uploads in serverless applications.</p>\n<p>For example, if an image is stored at <code>images/abc.jpg</code> then a signed URL for it would be <code>images/abc.jpg?x-id=GetObject&...</code>.</p>\n<p>Notice that URL for the file is changed. This is usually not a problem, as when the user clicks the \"download\" button, there is no expectation about where the\nfile is downloaded from so the backend is free to return a signed URL.</p>\n<h2 id=\"segmented-video-formats\" tabindex=\"-1\">Segmented video formats</h2>\n<p>But in some cases, the client expects the file to have a specific URL. One of the most common examples for this is segmented video files, such as HLS or MPD.\nHere, the video stream is broken up to segments and a manifest file defines where the individual files can be found.</p>\n<p>For example, an MPD manifest looks like this:</p>\n<pre class=\"highlight\"><code>\n\t\n\t\t\n\t\t\t<s>\n\t\t\t<s>\n\t\t\n\t\n\n</code></pre>\n<p>When the client reads this and plays the video, it knows how to download the segments:</p>\n<ul>\n<li><code>chunk-stream0-00001.m4s</code></li>\n<li><code>chunk-stream0-00002.m4s</code></li>\n<li><code>chunk-stream0-00003.m4s</code></li>\n<li>...</li>\n</ul>\n<p>But then it does not work with signed URLs anymore as the client can not possibly calculate the signature for each file.</p>\n<p>This is where signed cookies are useful.</p>\n<h2 id=\"cloudfront-signed-cookies\" tabindex=\"-1\">CloudFront signed cookies</h2>\n<p>Signed cookies is another mechanism to give controlled access to protected files. Instead of modifying a URL, the backend returns a set of cookies for the\nclient. By the standard, these cookies are attached to the requests automatically by the browser, which means there is no change needed on the client.</p>\n<p>An example set of signed cookies:</p>\n<pre class=\"highlight\"><code><span class=\"hljs-punctuation\">{</span>\n\t<span class=\"hljs-attr\">\"CloudFront-Key-Pair-Id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"KJX6ADYM9FBCS\"</span><span class=\"hljs-punctuation\">,</span>\n\t<span class=\"hljs-attr\">\"CloudFront-Signature\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"kAqF32fiDKmOUpDPUNQ...\"</span><span class=\"hljs-punctuation\">,</span>\n\t<span class=\"hljs-attr\">\"CloudFront-Policy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"eyJTdGF0ZW1lbnQiOlt7IlJlc29...\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>The signature can contain wildcards for signed cookies, in practice that means that it's possible to sign them for all files under a directory. This gives an\neasy-to-use structure where each video can be stored in a folder and the signature can give access to a specific one the client wants to play.</p>\n<p>For example, the S3 bucket can contain two videos:</p>\n<pre class=\"highlight\"><code>bunny/bunny.mpd\nbunny/chunk-stream0-00001.m4s\nbunny/chunk-stream0-00002.m4s\nbunny/chunk-stream1-00001.m4s\nbunny/chunk-stream1-00002.m4s\nbunny/init-stream0.m4s\nbunny/init-stream1.m4s\n\nsintel/sintel.mpd\nsintel/chunk-stream0-00001.m4s\nsintel/chunk-stream0-00002.m4s\nsintel/chunk-stream1-00001.m4s\nsintel/chunk-stream1-00002.m4s\nsintel/init-stream0.m4s\nsintel/init-stream1.m4s\n</code></pre>\n<p>This S3 bucket is then used as an origin for the CloudFront distribution and mapped to a path, let's say <code>/videos/*</code></p>\n<p>During signing, the backend generates the cookies for a specific folder under this path:</p>\n<pre class=\"highlight\"><code><span class=\"hljs-keyword\">import</span> {getSignedCookies} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@aws-sdk/cloudfront-signer\"</span>;\n\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getSignedCookies</span>({\n\t<span class=\"hljs-attr\">keyPairId</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">KEYPAIR_ID</span>,\n\t<span class=\"hljs-attr\">privateKey</span>: (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCfPrivateKey</span>()).<span class=\"hljs-property\">Parameter</span>.<span class=\"hljs-property\">Value</span>,\n\t<span class=\"hljs-attr\">policy</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({\n\t\t<span class=\"hljs-title class_\">Statement</span>: [\n\t\t\t{\n\t\t\t\t<span class=\"hljs-title class_\">Resource</span>:\n\t<span class=\"hljs-string\">`https://<span class=\"hljs-subst\">${process.env.DISTRIBUTION_DOMAIN}</span>/videos/<span class=\"hljs-subst\">${video}</span>/*`</span>,\n\t\t\t\t<span class=\"hljs-title class_\">Condition</span>: {\n\t\t\t\t\t<span class=\"hljs-title class_\">DateLessThan</span>: {\n\t\t\t\t\t\t<span class=\"hljs-string\">\"AWS:EpochTime\"</span>:\n\t\t\t\t\t\t\t<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(\n\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(\n\t\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>() + <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>\n\t\t\t\t\t\t\t\t).<span class=\"hljs-title function_\">getTime</span>() / <span class=\"hljs-number\">1000</span>\n\t\t\t\t\t\t\t),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t})\n});\n</code></pre>\n<p>The only thing left is to set the cookies in the HTTP response:</p>\n<pre class=\"highlight\"><code><span class=\"hljs-keyword\">return</span> {\n\t<span class=\"hljs-attr\">statusCode</span>: <span class=\"hljs-number\">307</span>,\n\t<span class=\"hljs-attr\">cookies</span>: <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">entries</span>(signedCookies).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[name, value]</span>) =></span> {\n\t\t<span class=\"hljs-keyword\">return</span> [\n\t\t\t<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>=<span class=\"hljs-subst\">${value}</span>`</span>,\n\t\t\t<span class=\"hljs-string\">\"HttpOnly\"</span>,\n\t\t\t<span class=\"hljs-string\">`Path=/videos/<span class=\"hljs-subst\">${videoName}</span>`</span>,\n\t\t\t<span class=\"hljs-string\">\"SameSite=Strict\"</span>,\n\t\t\t<span class=\"hljs-string\">\"Secure\"</span>,\n\t\t].<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"; \"</span>);\n\t}),\n\t<span class=\"hljs-attr\">headers</span>: {\n\t\t<span class=\"hljs-title class_\">Location</span>: <span class=\"hljs-string\">`/videos/<span class=\"hljs-subst\">${videoName}</span>/<span class=\"hljs-subst\">${videoName}</span>.mpd`</span>,\n\t},\n};\n</code></pre>\n<p>Notice the <code>Path</code> here: since the name of the cookies are fixed, setting them on the <code>/</code> would overwrite earlier cookies. That could cause problems when\nthe client plays multiple videos in parallel, such as using several tabs. The best practice here is to use the most specific path for the cookies.</p>"
      }
    ],
    "summary": "<a href=\"https://advancedweb.hu/how-to-use-cloudfront-signed-cookies-to-serve-mpd-or-hls-videos/\">(Read this article on the blog)</a><h2 id=\"signed-urls\" tabindex=\"-1\">Signed URLs</h2>\n<p>Signed URLs is a mechanism to securely give access to protected content. It works by the backend generating a signature that the clients then can use directly\nwith S3 or CloudFront to get the content. It's the primary way to offer downloads and uploads in serverless applications.</p>\n<p>For example, if an image is stored at <code>images/abc.jpg</code> then a signed URL for it would be <code>images/abc.jpg?x-id=GetObject&...</code>.</p>\n<p>Notice that URL for the file is changed. This is usually not a problem, as when the user clicks the \"download\" button, there is no expectation about where the\nfile is downloaded from so the backend is free to return a signed URL.</p>\n<h2 id=\"segmented-video-formats\" tabindex=\"-1\">Segmented video formats</h2>\n<p>But in some cases, the client expects the file to have a specific URL. One of the most common examples for this is segmented video files, such as HLS or MPD.\nHere, the video stream is broken up to segments and a manifest file defines where the individual files can be found.</p>\n<p>For example, an MPD manifest looks like this:</p>\n<pre class=\"highlight\"><code>\n\t\n\t\t\n\t\t\t<s>\n\t\t\t<s>\n\t\t\n\t\n\n</code></pre>\n<p>When the client reads this and plays the video, it knows how to download the segments:</p>\n<ul>\n<li><code>chunk-stream0-00001.m4s</code></li>\n<li><code>chunk-stream0-00002.m4s</code></li>\n<li><code>chunk-stream0-00003.m4s</code></li>\n<li>...</li>\n</ul>\n<p>But then it does not work with signed URLs anymore as the client can not possibly calculate the signature for each file.</p>\n<p>This is where signed cookies are useful.</p>\n<h2 id=\"cloudfront-signed-cookies\" tabindex=\"-1\">CloudFront signed cookies</h2>\n<p>Signed cookies is another mechanism to give controlled access to protected files. Instead of modifying a URL, the backend returns a set of cookies for the\nclient. By the standard, these cookies are attached to the requests automatically by the browser, which means there is no change needed on the client.</p>\n<p>An example set of signed cookies:</p>\n<pre class=\"highlight\"><code><span class=\"hljs-punctuation\">{</span>\n\t<span class=\"hljs-attr\">\"CloudFront-Key-Pair-Id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"KJX6ADYM9FBCS\"</span><span class=\"hljs-punctuation\">,</span>\n\t<span class=\"hljs-attr\">\"CloudFront-Signature\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"kAqF32fiDKmOUpDPUNQ...\"</span><span class=\"hljs-punctuation\">,</span>\n\t<span class=\"hljs-attr\">\"CloudFront-Policy\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"eyJTdGF0ZW1lbnQiOlt7IlJlc29...\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>The signature can contain wildcards for signed cookies, in practice that means that it's possible to sign them for all files under a directory. This gives an\neasy-to-use structure where each video can be stored in a folder and the signature can give access to a specific one the client wants to play.</p>\n<p>For example, the S3 bucket can contain two videos:</p>\n<pre class=\"highlight\"><code>bunny/bunny.mpd\nbunny/chunk-stream0-00001.m4s\nbunny/chunk-stream0-00002.m4s\nbunny/chunk-stream1-00001.m4s\nbunny/chunk-stream1-00002.m4s\nbunny/init-stream0.m4s\nbunny/init-stream1.m4s\n\nsintel/sintel.mpd\nsintel/chunk-stream0-00001.m4s\nsintel/chunk-stream0-00002.m4s\nsintel/chunk-stream1-00001.m4s\nsintel/chunk-stream1-00002.m4s\nsintel/init-stream0.m4s\nsintel/init-stream1.m4s\n</code></pre>\n<p>This S3 bucket is then used as an origin for the CloudFront distribution and mapped to a path, let's say <code>/videos/*</code></p>\n<p>During signing, the backend generates the cookies for a specific folder under this path:</p>\n<pre class=\"highlight\"><code><span class=\"hljs-keyword\">import</span> {getSignedCookies} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@aws-sdk/cloudfront-signer\"</span>;\n\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getSignedCookies</span>({\n\t<span class=\"hljs-attr\">keyPairId</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">KEYPAIR_ID</span>,\n\t<span class=\"hljs-attr\">privateKey</span>: (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCfPrivateKey</span>()).<span class=\"hljs-property\">Parameter</span>.<span class=\"hljs-property\">Value</span>,\n\t<span class=\"hljs-attr\">policy</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({\n\t\t<span class=\"hljs-title class_\">Statement</span>: [\n\t\t\t{\n\t\t\t\t<span class=\"hljs-title class_\">Resource</span>:\n\t<span class=\"hljs-string\">`https://<span class=\"hljs-subst\">${process.env.DISTRIBUTION_DOMAIN}</span>/videos/<span class=\"hljs-subst\">${video}</span>/*`</span>,\n\t\t\t\t<span class=\"hljs-title class_\">Condition</span>: {\n\t\t\t\t\t<span class=\"hljs-title class_\">DateLessThan</span>: {\n\t\t\t\t\t\t<span class=\"hljs-string\">\"AWS:EpochTime\"</span>:\n\t\t\t\t\t\t\t<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(\n\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(\n\t\t\t\t\t\t\t\t\t<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>() + <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>\n\t\t\t\t\t\t\t\t).<span class=\"hljs-title function_\">getTime</span>() / <span class=\"hljs-number\">1000</span>\n\t\t\t\t\t\t\t),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t})\n});\n</code></pre>\n<p>The only thing left is to set the cookies in the HTTP response:</p>\n<pre class=\"highlight\"><code><span class=\"hljs-keyword\">return</span> {\n\t<span class=\"hljs-attr\">statusCode</span>: <span class=\"hljs-number\">307</span>,\n\t<span class=\"hljs-attr\">cookies</span>: <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">entries</span>(signedCookies).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[name, value]</span>) =></span> {\n\t\t<span class=\"hljs-keyword\">return</span> [\n\t\t\t<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>=<span class=\"hljs-subst\">${value}</span>`</span>,\n\t\t\t<span class=\"hljs-string\">\"HttpOnly\"</span>,\n\t\t\t<span class=\"hljs-string\">`Path=/videos/<span class=\"hljs-subst\">${videoName}</span>`</span>,\n\t\t\t<span class=\"hljs-string\">\"SameSite=Strict\"</span>,\n\t\t\t<span class=\"hljs-string\">\"Secure\"</span>,\n\t\t].<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"; \"</span>);\n\t}),\n\t<span class=\"hljs-attr\">headers</span>: {\n\t\t<span class=\"hljs-title class_\">Location</span>: <span class=\"hljs-string\">`/videos/<span class=\"hljs-subst\">${videoName}</span>/<span class=\"hljs-subst\">${videoName}</span>.mpd`</span>,\n\t},\n};\n</code></pre>\n<p>Notice the <code>Path</code> here: since the name of the cookies are fixed, setting them on the <code>/</code> would overwrite earlier cookies. That could cause problems when\nthe client plays multiple videos in parallel, such as using several tabs. The best practice here is to use the most specific path for the cookies.</p>"
  }
}