{
  "company": "Small Improvements",
  "title": "Small Improvements",
  "xmlUrl": "https://tech.small-improvements.com/rss",
  "htmlUrl": "https://tech.small-improvements.com/",
  "content": "Interview with Jesper | Small Improvements Tech            Small Improvements Tech    Small Improvements Tech   Tech Blog   Navigation Visit Small-Improvements.comWe\u2019re hiringVisit Small-Improvements.comWe\u2019re hiringInterview with JesperThis is an interview with Small Improvement\u2019s software developer Jesper Oskarsson about how the development team works together, what the tech stack looks like, and how big feature releases are tackled. If you want to read on, you find another developer interview here.Hey Jesper! You recently had your 5-year anniversary at Small Improvements, so congratulations again. Could you briefly summarize your professional journey?Thanks! Yeah, time flies\u2026 I\u2019ve basically been programming most of my life now. I got interested in game development when I was a teenager, because I used to play a lot of video games and was fascinated by computers. After school, I studied software engineering with focus on game development. Before joining Small Improvements in 2017, I worked as freelance mobile developer for a couple of years.Do you have a specific technological focus at SI?I probably work more in the backend than in the frontend, but like everyone else in the dev team, I write code for the entire stack. Together with one of my teammates, I\u2019m also responsible for overseeing security-related aspects of our application.Can you tell us more about this security work?Security is an important topic for us, because we handle sensitive personal data from our customers. Even though our security setup and mechanisms are pretty solid in general, there are always things to update and improve. For example, we have a HackerOne program, where ethical \u201cwhite-hat hackers\u201d try to uncover potential issues in our application. They report them to us, so that we can fix them, and in return they get a financial reward from us. Another example is a penetration test and security audit, which was conducted by external security researchers last year.How much time do you spend with security-related tasks every week?The workload depends of course, but it\u2019s typically a few hours per week. I also don\u2019t have to fix all bugs myself, by the way (laughs): we treat them as regular sprint tickets, which can be picked up by any developer. Our general philosophy is that responsibilities should be divided equally across the team: so certain people drive specific topics they are passionate or knowledgeable about, but at the same time, we want to avoid building up silos. It\u2019s important for us that every developer stays in touch with all technical aspects of the application.What programming languages and technologies does the app consist of?We have a single-page-application in the frontend, which is connected to a monolithic JSON API in the backend. The frontend is mainly ReactJS, but there is also some older AngularJS code from the early days. The backend is implemented in Java using the Spring framework. It runs on Google App Engine in data centers in the US and EU. We are using Google Firestore as our main database, which is a document store, and then also some miscellaneous cloud services, such as task queues, or a secondary storage for our data warehouse.What do you think about this tech stack?Well, the grass on the other side of the fence always looks greener, doesn\u2019t it? (laughs) But all jokes aside: I\u2019m actually pretty happy with it. At the end of the day, our customers don\u2019t pay us for what frameworks or programming languages we use. Instead, it\u2019s important for them that the app works reliably and that it solves their business requirements. We have a content and stable customer base, so it seems like we made some good technical decisions.Can you give an example of what works well and what doesn\u2019t?A good example is App Engine, which is Google\u2019s managed cloud infrastructure that we use for hosting. The advantage is that we don\u2019t have to bother with operational duties like scaling or database replication, because this is all taken care of by Google. The time that we save that way, we can invest into developing new features. On the other hand, App Engine has some limitations, so it\u2019s sometimes annoying that we have to deal with or work around certain restrictions. I still think that the positive aspects outweigh the negative ones, though: when I look back at the last years, we only had a handful of minor incidents, even though we deploy multiple times per week. All in all, I would say that our infrastructure \u201cjust works\u201d for the most part.How does the team go about introducing new technologies?Introducing new technologies is always a balancing act. On the one hand, we want to stay modern and take advantage of innovation, but on the other hand we can\u2019t jump onboard of every new hype and refactor the entire code base all at once. I suppose our approach towards innovation can be best described as incremental: when someone sees an opportunity to implement something in a better way, they try it out and bring it up in our weekly developer meeting. It then gets reviewed and discussed in the entire team, and together we decide how we want to move forward. If we feel positive about it, and when it then stands the test of time, we gradually adopt it and make it our new \u201cstandard\u201d. Examples of this from the past are our transition from AngularJS to ReactJS in the frontend, or, more recently, the introduction of a new testing library in the backend.You recently worked on a new feature called \u201cAutomations\u201c. What is this about?The idea of the \u201cAutomations\u201d feature is to make the lives of HR administrators easier. HR admins are the users within a company account who manage the HR-related processes for their companies\u2019 staff, such as performance reviews or 360 feedback. Let\u2019s say that company hires someone: the new employee needs to have access to the companies\u2019\u00a0Small Improvements account, in order to prepare 1:1 meetings with their manager, or to participate in a feedback survey. Some of these administrative tasks can be quite repetitive, though, so with the new \u201cAutomations\u201d feature the HR admin can create recurring workflows and schedule certain events ahead of time.You implemented large parts of the new \u201cAutomations\u201d feature. How did you approach this, and what did you find most difficult?The most tricky challenge regarding the implementation was to carve out the right domain model that reflects the flows and rules in the code in a way that\u2019s both neat and accurate. Although we had a clear vision of what the \u201cAutomations\u201d feature should be capable of, there were many details regarding its usage, which we were uncertain about at the beginning. Our product manager and customer support team did a lot of research, so we started out by building a first prototype. That way, we could play around with the feature ourselves, and we also were able to show it to customers in order to receive external feedback.How do you make these prototypes available? Do you have a separate testing environment?We have a dedicated environment that we can deploy experimental features to. We only use this for internal testing, though. We generally try to integrate work-in-progress features into our main branch early on, to avoid long-running branches and the potential hassle that they can entail. We make use of a mechanism called \u201cfeature flags\u201d. This effectively allows us to hide new functionality from end-users, even though the code is already merged in and deployed to production.Is this a typical example of the feature development lifecycle?For larger features, this is a common practice for us. It first starts on the machine of an individual developer. Once we have something working, we deploy it to our internal testing stage, where we can play around with it ourselves. If a prototype reaches a state that is somewhat stable, we can make it available as beta feature to curious customers. Finally, once we are happy with everything, we roll it out to the entire user base. During that whole process, we keep iterating on the functionality and continuously refine the implementation. For smaller features, we don\u2019t need such a sophisticated procedure, of course: if a tweak or fix is straightforward enough, we usually release it right after merging.Were you able to build the \u201cAutomations\u201d feature on top of the existing infrastructure, or did you have to make bigger architectural changes?Initially, we considered using cloud functions for running the scheduled background tasks, so that we could deploy and scale them separately. But eventually, we realized that it was better to implement the functionality within our existing system setup. This was also a matter of complexity: due to the iterative way we developed the feature itself, we wanted to avoid making bigger infrastructure changes at the same time. Another caveat was the burden of maintenance: while it would have been cool to dabble with new cloud technology, we felt that the benefits wouldn\u2019t have been worth the additional overhead in this case.Thanks, Jesper, for sharing these insights with us!If you want to learn more about the development team, you find another developer interview here. Company Culture,  How we work,  Inside SI August 16, 2022Jan HeuermannRelated Articles  Interview with Laura Company Culture,  How we work,  Inside SI Jan Heuermann August 16, 2022This is an interview with Small Improvement\u2019s software developer Laura Sochaczewski about how the development \u2026Read More   Implementing Domain Driven Design at Small Improvements Case studies,  How we work,  Java,  Programming Matthew Reid May 3, 2019We all love reading about the latest software developments trends and buzzwords but they can \u2026Read More   Building a Data Warehouse in our 20% time using Google Cloud Company Culture,  Google App Engine,  How we work,  Programming Matthew Reid January 22, 2019At Small Improvements, we are always keen to learn about our customers and how we \u2026Read More Small ImprovementsJoin our Berlin officeWe're always looking for friendlynew team members.Learn moreTrusted by 750+ companies in the US & worldwide.           ",
  "latestPost": {
    "title": "Interview with Jesper",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://tech.small-improvements.com/feed/",
      "value": "Interview with Jesper"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://tech.small-improvements.com/interview-with-jesper/"
      }
    ],
    "link": "https://tech.small-improvements.com/interview-with-jesper/",
    "authors": [
      {
        "name": "Jan Heuermann"
      }
    ],
    "author": "Jan Heuermann",
    "author_detail": {
      "name": "Jan Heuermann"
    },
    "published": "Tue, 16 Aug 2022 12:16:22 +0000",
    "published_parsed": [
      2022,
      8,
      16,
      12,
      16,
      22,
      1,
      228,
      0
    ],
    "tags": [
      {
        "term": "Company Culture",
        "scheme": null,
        "label": null
      },
      {
        "term": "How we work",
        "scheme": null,
        "label": null
      },
      {
        "term": "Inside SI",
        "scheme": null,
        "label": null
      }
    ],
    "id": "https://tech.small-improvements.com/?p=8614",
    "guidislink": false,
    "summary": "This is an interview with Small Improvement\u2019s software developer Jesper Oskarsson about how the development ... <div><a class=\"more-link\" href=\"https://tech.small-improvements.com/interview-with-jesper/\">Read More <i class=\"x-icon x-icon-long-arrow-right\"></i></a></div>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://tech.small-improvements.com/feed/",
      "value": "This is an interview with Small Improvement\u2019s software developer Jesper Oskarsson about how the development ... <div><a class=\"more-link\" href=\"https://tech.small-improvements.com/interview-with-jesper/\">Read More <i class=\"x-icon x-icon-long-arrow-right\"></i></a></div>"
    },
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://tech.small-improvements.com/feed/",
        "value": "<p><i>This is an interview with Small Improvement\u2019s software developer Jesper Oskarsson about how the development team works together, what the tech stack looks like, and how big feature releases are tackled. If you want to read on, you find <a href=\"https://tech.small-improvements.com/interview-with-laura/\">another developer interview here</a>.</i></p>\n<p><strong>Hey Jesper! You recently had your 5-year anniversary at Small Improvements, so congratulations again. Could you briefly summarize your professional journey?</strong></p>\n<p><span style=\"font-weight: 400;\">Thanks! Yeah, time flies\u2026 I\u2019ve basically been programming most of my life now. I got interested in game development when I was a teenager, because I used to play a lot of video games and was fascinated by computers. After school, I studied software engineering with focus on game development. Before joining Small Improvements in 2017, I worked as freelance mobile developer for a couple of years.</span></p>\n<p><strong>Do you have a specific technological focus at SI?</strong></p>\n<p><span style=\"font-weight: 400;\">I probably work more in the backend than in the frontend, but like everyone else in the dev team, I write code for the entire stack. Together with one of my teammates, I\u2019m also responsible for overseeing security-related aspects of our application.</span></p>\n<p><strong>Can you tell us more about this security work?</strong></p>\n<p><span style=\"font-weight: 400;\">Security is an important topic for us, because we handle sensitive personal data from our customers. Even though our security setup and mechanisms are pretty solid in general, there are always things to update and improve. For example, we have a HackerOne program, where ethical \u201cwhite-hat hackers\u201d try to uncover potential issues in our application. They report them to us, so that we can fix them, and in return they get a financial reward from us. Another example is a penetration test and security audit, which was conducted by external security researchers last year.</span></p>\n<p><strong>How much time do you spend with security-related tasks every week?</strong></p>\n<p><span style=\"font-weight: 400;\">The workload depends of course, but it\u2019s typically a few hours per week. I also don\u2019t have to fix all bugs myself, by the way </span><i><span style=\"font-weight: 400;\">(laughs)</span></i><span style=\"font-weight: 400;\">: we treat them as regular sprint tickets, which can be picked up by any developer. Our general philosophy is that responsibilities should be divided equally across the team: so certain people drive specific topics they are passionate or knowledgeable about, but at the same time, we want to avoid building up silos. It\u2019s important for us that every developer stays in touch with all technical aspects of the application.</span></p>\n<p><strong>What programming languages and technologies does the app consist of?</strong></p>\n<p><span style=\"font-weight: 400;\">We have a single-page-application in the frontend, which is connected to a monolithic JSON API in the backend. The frontend is mainly ReactJS, but there is also some older AngularJS code from the early days. The backend is implemented in Java using the Spring framework. It runs on Google App Engine in data centers in the US and EU. We are using Google Firestore as our main database, which is a document store, and then also some miscellaneous cloud services, such as task queues, or a secondary storage for our data warehouse.</span></p>\n<p><strong>What do you think about this tech stack?</strong></p>\n<p><span style=\"font-weight: 400;\">Well, the grass on the other side of the fence always looks greener, doesn\u2019t it? </span><i><span style=\"font-weight: 400;\">(laughs)</span></i><span style=\"font-weight: 400;\"> But all jokes aside: I\u2019m actually pretty happy with it. At the end of the day, our customers don\u2019t pay us for what frameworks or programming languages we use. Instead, it\u2019s important for them that the app works reliably and that it solves their business requirements. We have a content and stable customer base, so it seems like we made some good technical decisions.</span></p>\n<p><strong>Can you give an example of what works well and what doesn\u2019t?</strong></p>\n<p><span style=\"font-weight: 400;\">A good example is App Engine, which is Google\u2019s managed cloud infrastructure that we use for hosting. The advantage is that we don\u2019t have to bother with operational duties like scaling or database replication, because this is all taken care of by Google. The time that we save that way, we can invest into developing new features. On the other hand, App Engine has some limitations, so it\u2019s sometimes annoying that we have to deal with or work around certain restrictions. I still think that the positive aspects outweigh the negative ones, though: when I look back at the last years, we only had a handful of minor incidents, even though we deploy multiple times per week. All in all, I would say that our infrastructure \u201cjust works\u201d for the most part.</span></p>\n<p><strong>How does the team go about introducing new technologies?</strong></p>\n<p><span style=\"font-weight: 400;\">Introducing new technologies is always a balancing act. On the one hand, we want to stay modern and take advantage of innovation, but on the other hand we can\u2019t jump onboard of every new hype and refactor the entire code base all at once. I suppose our approach towards innovation can be best described as incremental: when someone sees an opportunity to implement something in a better way, they try it out and bring it up in our weekly developer meeting. It then gets reviewed and discussed in the entire team, and together we decide how we want to move forward. If we feel positive about it, and when it then stands the test of time, we gradually adopt it and make it our new \u201cstandard\u201d. Examples of this from the past are our transition from AngularJS to ReactJS in the frontend, or, more recently, the introduction of a new testing library in the backend.</span></p>\n<p><strong>You recently worked on a new feature called \u201cAutomations\u201c. What is this about?</strong></p>\n<p><span style=\"font-weight: 400;\">The idea of the \u201cAutomations\u201d feature is to make the lives of HR administrators easier. HR admins are the users within a company account who manage the HR-related processes for their companies\u2019 staff, such as performance reviews or 360 feedback. Let\u2019s say that company hires someone: the new employee needs to have access to the companies\u2019\u00a0Small Improvements account, in order to prepare 1:1 meetings with their manager, or to participate in a feedback survey. Some of these administrative tasks can be quite repetitive, though, so with the new \u201cAutomations\u201d feature the HR admin can create recurring workflows and schedule certain events ahead of time.</span></p>\n<p><strong>You implemented large parts of the new \u201cAutomations\u201d feature. How did you approach this, and what did you find most difficult?</strong></p>\n<p><span style=\"font-weight: 400;\">The most tricky challenge regarding the implementation was to carve out the right domain model that reflects the flows and rules in the code in a way that\u2019s both neat and accurate. Although we had a clear vision of what the \u201cAutomations\u201d feature should be capable of, there were many details regarding its usage, which we were uncertain about at the beginning. Our product manager and customer support team did a lot of research, so we started out by building a first prototype. That way, we could play around with the feature ourselves, and we also were able to show it to customers in order to receive external feedback.</span></p>\n<p><strong>How do you make these prototypes available? Do you have a separate testing environment?</strong></p>\n<p><span style=\"font-weight: 400;\">We have a dedicated environment that we can deploy experimental features to. We only use this for internal testing, though. We generally try to integrate work-in-progress features into our main branch early on, to avoid long-running branches and the potential hassle that they can entail. We make use of a mechanism called \u201cfeature flags\u201d. This effectively allows us to hide new functionality from end-users, even though the code is already merged in and deployed to production.</span></p>\n<p><strong>Is this a typical example of the feature development lifecycle?</strong></p>\n<p><span style=\"font-weight: 400;\">For larger features, this is a common practice for us. It first starts on the machine of an individual developer. Once we have something working, we deploy it to our internal testing stage, where we can play around with it ourselves. If a prototype reaches a state that is somewhat stable, we can make it available as beta feature to curious customers. Finally, once we are happy with everything, we roll it out to the entire user base. During that whole process, we keep iterating on the functionality and continuously refine the implementation. For smaller features, we don\u2019t need such a sophisticated procedure, of course: if a tweak or fix is straightforward enough, we usually release it right after merging.</span></p>\n<p><strong>Were you able to build the \u201cAutomations\u201d feature on top of the existing infrastructure, or did you have to make bigger architectural changes?</strong></p>\n<p><span style=\"font-weight: 400;\">Initially, we considered using cloud functions for running the scheduled background tasks, so that we could deploy and scale them separately. But eventually, we realized that it was better to implement the functionality within our existing system setup. This was also a matter of complexity: due to the iterative way we developed the feature itself, we wanted to avoid making bigger infrastructure changes at the same time. Another caveat was the burden of maintenance: while it would have been cool to dabble with new cloud technology, we felt that the benefits wouldn\u2019t have been worth the additional overhead in this case.</span></p>\n<p><strong>Thanks, Jesper, for sharing these insights with us!</strong></p>\n<p><i>If you want to learn more about the development team, you find <a href=\"https://tech.small-improvements.com/interview-with-laura/\">another developer interview here</a>.</i></p>"
      }
    ],
    "media_thumbnail": [
      {
        "url": "https://tech.small-improvements.com/wp-content/uploads/2022/08/Untitled2-1024x767.jpg",
        "width": "880",
        "height": "659"
      }
    ],
    "href": ""
  }
}