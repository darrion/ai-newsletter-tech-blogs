{
  "company": "Moove-it",
  "title": "Moove-it",
  "xmlUrl": "https://blog.moove-it.com/rss",
  "htmlUrl": "https://blog.moove-it.com/",
  "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat\u2019s new in Kotlin for Android? - Qubika\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbout Us\nOur Work\nInsights\nCareers\nContact Us\n \n\n\n\n\n\n\n\n\n\n\n\n\nSoftware Engineering\n\n\nJune 21, 2023\n\nWhat\u2019s new in Kotlin for Android?\n\nCheck out what is new in Kotlin, a widely used programming language for Android. \n\n\n\n\n \n\n\n\n\n\n\nKotlin has become one of the most popular programming languages for Android development in recent years. It is now widely used by developers across the globe to create high-quality Android apps. Kotlin offers several advantages, such as better code quality, enhanced performance, and improved developer productivity. Today, we will explore the latest features and updates in Kotlin for Android development, which is utilized by our Mobile Studio.\nThe Kotlin 2.0 compiler\nAlso known as the codename \u201cK2\u201d, the Kotlin 2.0 compiler is a drop-in replacement for most code, so the developer using it doesn\u2019t have to change their Kotlin source. The new architecture will be faster and have better build performance, and it is said to be twice as fast as the current Kotlin compiler.\nThe Kotlin 2.0 compiler is expected to have a stable release in 2024, but it\u2019s currently able to be tried out as soon as possible to verify it works correctly.\nYou can test it out by the setting the language version to 2.0, as shown below:\n\n\n\n\n\n// build.gradle.kts (module) \r\nkotlin { \r\n    sourceSets.all { \r\n        languageSettings { \r\n            languageVersion = \"2.0\" \r\n        } \r\n    } \r\n} \n\n\n\n\n\nKotlin DSL for Gradle builds\nAndroid has primarily used Kotlin for years, due to higher productivity and more stable apps for developers. Even with a Kotlin preference, the default language to define builds has been Groovy, even with a Kotlin Gradle option.\nAndroid has recently announced that they will be switching to Kotlin for the default languages for build scripts. This is a beneficial change for Android developers, since there are a lot of benefits to having Kotlin as the default language. Kotlin builds scripts by using statically typed values, so code hinting is more precise and helpful. Syntax errors are also more accurate and displayed while editing Kotlin build scripts instead of when the developer is trying to sync the project. Kotlin DSL also includes type and method documentation. There is also the option to migrate your build to version catalogs, if you\u2019re looking to add and maintain your dependencies and plugins in a scalable way. If you\u2019re looking for resources on how to make the changes, here are some guides from Android Studio:\n\nMigrate your build configuration from Groovy to Kotlin\u00a0\nMigrate your build to version catalogs\n\nKotlin symbol processing\nCode generation initially began with the Kotlin Annotation Processing Tool (KAPT), which generates Java stubs for Kotlin code and allows annotation processors written for Java to work with Kotlin. This stub generation has been a time consuming process, and over has had a significant impact on the build speed of projects that use annotation processing.\nHowever, KSP is a Kotlin-first alternative to KAPT, which analyzes Kotlin code and has shown to have several advantages such as:\n\nUp to two times the speed. KSP requires no stub generation.\nBetter typing.\u00a0KSP understands Kotlin specific languages such as nullability.\nMultiplatform-ready. Doesn\u2019t depend on Java source code.\n\nMigration is recommended to be done as soon as possible. Here is how to set it up:\n\nAdd the plugin\n\n\n\n\n\n\n// build.gradle.kts (root) \r\nplugins { \r\n    id(\"com.google.devtools.ksp\") version \"1.8.10-1.0.9\" apply false \r\n}\n\n\n\n\n\n\nChange KAPT for KSP whenever possible. (note: some libraries might not support KSP yet.)\n\n\n\n\n\n\n// build.gradle.kts (module)\r\nplugins {\r\n  id(\"com.google.devtools.ksp\")\r\n}\r\n\r\ndependencies {\r\n  kapt(\"androidx.room:room-compiler:2.5.0\")\r\n  ksp(\"androidx.room:room-compiler:2.5.0\")\r\n\r\n  kapt(\"com.squareup.moshi:moshi-kotlin-codegen:1.14.0\")\r\n}\n\n\n\n\n\nFor more information, check out the official libraries for KSP support:\nKotlin Symbol Processing API\u00a0\nKotlin Multiplatform (Beta)\u00a0\nKotlin Multiplatform is made to simplify the development of cross-platform projects by sharing Kotlin code across different platforms. It reduces the overall time spent writing and maintaining the code for different platforms, while maintaining the benefits of native programming.\n\nKotlin Multiplatform is currently in Beta, and Google is currently experimenting with code sharing in Kotlin across Android, iOS and web while utilizing Google Suite applications.\n\nWith the benefits of native programming while working on different platforms, Kotlin provides the following code sharing mechanics:\n\nShare common code among all the platforms that are being used in your project\nShare code among only some of the platforms included in your project in order to reuse the code in similar platforms\nIf platform specific APIS need to be accessed from the shared code, you can use the Kotlin mechanism of expected and actual declarations.\n\nSome Jetpack libraries are bringing support for\u00a0 Kotlin Multiplatform, to learn more about the Jetpack libraries,\u00a0click here.\nConclusion\nKotlin has introduced several new features that will continue to make it a great language for Android development. Kotlin is continuing to make it easier for developers to write clean and efficient code, and making it more efficient to migrate their existing code to Kotlin.\nOverall, Kotlin is a powerful language, and as Google continues to support Kotlin and add new features to the language, we can expect even more exciting features in the future. To learn more about what our Mobile Studio is doing in Android development, check out our Mobile Studio site at App Solutions Studio.\n\n\n\nTags\n\nAndroid\nApp Development\nApp Solutions Studio\nMobile Development\n\n\n\n\n\n\n\n\n\n \n\nBy Andres De La Grana\n\n\t\t\t\t\t\t\tMobile Developer\t\t\t\t\t\t\n\n\n\n\t\t\t\t\tAndres de la Grana is a Mobile Developer at Qubika. With 5+ years of experience, Andres is passionate about Android development. He has worked on various scalable applications with lots of users, and believes in creating clean code and following best practices.\t\t\t\t\n\n\n\n\n\n\n\nRelated Articles\n\n\n\n\n\n\n\n \nAndres De La Grana\n\n\n\nAndroid developers \u2013 Here are the best practices for saving the UI state\nCheck out some tips on how to save the UI state during Android development. \n\n\n\nJune 7, 2023\n8 mins read\n\nSoftware Engineering\n\n\n\n\n\n \n\n\n\n\n\n\n\n \nMarco Perez\n\n\n\nIntroduction to ML Kit\u2019s Barcode Module\nOne of our members from Qubika\u2019s App Solutions Studio share how to utilize ML Kit\u2019s Barcode Module.\n\n\n\nFebruary 13, 2023\n8 mins read\n\nSoftware Engineering\n\n\n\n\n\n \n\n\n\n\n\n\n\n \nAndres De La Grana\n\n\n\nJetpack Compose vs XML: Android UI development compared\nWhat are the differences between Jetpack Compose and XML? Read more to find out!\n\n\n\nFebruary 9, 2023\n9 mins read\n\nSoftware Engineering\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\nNews and things that inspire us\nReceive regular updates about our latest work\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet\u2019s work together\nGet in touch with our experts to review your idea or product, and discuss options for the best approach\nGet in touch\n\n\n\n\n\n\n\n\n\n\n\n\n\nAustin\n1141 Shady Lane\n\n\n\n\n\nHouston\n1801 Main Street\n\n\n\n\n\nSan Francisco\n548 Market St\n\n\n\n\n\nMontevideo\nJos\u00e9 A. Iturriaga 3597Bulevar Artigas 1112\n\n\n\n\n\nCali\nCarrera 102, #16-45\n\n\n\n\n\n\nStudiosArtificial Intelligence\nCloud, SRE & Cybersecurity\nPlatform Engineering\nData\nApp Solutions\nProduct Design & Usability\nQuality Assurance\nFirmware & IoT\nBlockchain\nProduct Management\n\nWorkCase Studies\nCelbrea\nYouScience\nShopify\nLand id\nVooks\nComputer Vision\nWearables\nBrain.fm\nRipple\nTabula Rasa\nOne Signal\n\nAboutAbout Us\nInformation Security Policy\n\nCommunityInsights\nCareers\n\n\n\n\n\n\nFollow us\n\n\n\n\n\n\n\n\u00a92024 Qubika. All rights reserved.\n\nPrivacy Policy\nTerms & Conditions\nCookie Settings\n\n\n\n\n\n\n\n\n\nContact Us\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "What\u2019s new in Kotlin for Android?",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://blog.moove-it.com/feed/",
      "value": "What\u2019s new in Kotlin for Android?"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://blog.moove-it.com/whats-new-in-kotlin-for-android/"
      }
    ],
    "link": "https://blog.moove-it.com/whats-new-in-kotlin-for-android/",
    "authors": [
      {
        "name": "Andres De La Grana"
      }
    ],
    "author": "Andres De La Grana",
    "author_detail": {
      "name": "Andres De La Grana"
    },
    "published": "Wed, 21 Jun 2023 15:07:14 +0000",
    "published_parsed": [
      2023,
      6,
      21,
      15,
      7,
      14,
      2,
      172,
      0
    ],
    "tags": [
      {
        "term": "All",
        "scheme": null,
        "label": null
      },
      {
        "term": "Mobile Studio",
        "scheme": null,
        "label": null
      }
    ],
    "id": "https://blog.moove-it.com/?p=6856",
    "guidislink": false,
    "summary": "<p>Kotlin has become one of the most popular programming languages for Android development in recent years. It is now widely used by developers across the globe to create high-quality Android apps. Kotlin offers several advantages, such as better...</p>\n<p>The post <a href=\"https://blog.moove-it.com/whats-new-in-kotlin-for-android/\" rel=\"nofollow\">What&#8217;s new in Kotlin for Android?</a> appeared first on <a href=\"https://blog.moove-it.com\" rel=\"nofollow\">Moove It</a>.</p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://blog.moove-it.com/feed/",
      "value": "<p>Kotlin has become one of the most popular programming languages for Android development in recent years. It is now widely used by developers across the globe to create high-quality Android apps. Kotlin offers several advantages, such as better...</p>\n<p>The post <a href=\"https://blog.moove-it.com/whats-new-in-kotlin-for-android/\" rel=\"nofollow\">What&#8217;s new in Kotlin for Android?</a> appeared first on <a href=\"https://blog.moove-it.com\" rel=\"nofollow\">Moove It</a>.</p>"
    },
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://blog.moove-it.com/feed/",
        "value": "<p><span style=\"font-weight: 400;\">Kotlin has become one of the most popular programming languages for Android development in recent years. It is now widely used by developers across the globe to create high-quality Android apps. Kotlin offers several advantages, such as better code quality, enhanced performance, and improved developer productivity. Today, we will explore the latest features and updates in Kotlin for Android development, which is utilized by our Mobile Studio.</span></p>\n<h4><b>The Kotlin 2.0 compiler</b></h4>\n<p><span style=\"font-weight: 400;\">Also known as the codename \u201cK2\u201d, the Kotlin 2.0 compiler is a drop-in replacement for most code, so the developer using it doesn&#8217;t have to change their Kotlin source. The new architecture will be faster and have better build performance, and it is said to be twice as fast as the current Kotlin compiler.\u00a0</span></p>\n<p><span style=\"font-weight: 400;\">The Kotlin 2.0 compiler is expected to have a stable release in 2024, but it\u2019s currently able to be tried out as soon as possible to verify it works correctly.\u00a0</span></p>\n<p><span style=\"font-weight: 400;\">You can test it out by the setting the language version to 2.0, as shown below:</span></p>\n<p><img alt=\"\" class=\"alignnone wp-image-6857\" height=\"336\" src=\"https://blog.moove-it.com/wp-content/uploads/2023/06/image1-300x164.png\" width=\"615\" /></p>\n<h4><b>Kotlin DSL for Gradle builds</b></h4>\n<p><span style=\"font-weight: 400;\">Android has primarily used Kotlin for years, due to higher productivity and more stable apps for developers. Even with a Kotlin preference, the default language to define builds has been Groovy, even with a Kotlin Gradle option.\u00a0</span></p>\n<p><span style=\"font-weight: 400;\">Android has recently announced that they will be switching to Kotlin for the default languages for build scripts. This is a beneficial change for Android developers, since there are a lot of benefits to having Kotlin as the default language. Kotlin builds scripts by using statically typed values, so code hinting is more precise and helpful. Syntax errors are also more accurate and displayed while editing Kotlin build scripts instead of when the developer is trying to sync the project. Kotlin DSL also includes type and method documentation. There is also the option to migrate your build to version catalogs, if you&#8217;re looking to add and maintain your dependencies and plugins in a scalable way. If you\u2019re looking for resources on how to make the changes, here are some guides from Android Studio:</span></p>\n<ul>\n<li style=\"font-weight: 400;\"><a href=\"https://developer.android.com/build/migrate-to-kotlin-dsl\"><span style=\"font-weight: 400;\">Migrate your build configuration from Groovy to Kotlin\u00a0</span></a></li>\n<li style=\"font-weight: 400;\"><a href=\"https://developer.android.com/build/migrate-to-catalogs\"><span style=\"font-weight: 400;\">Migrate your build to version catalogs</span></a></li>\n</ul>\n<p>&nbsp;</p>\n<h4><b>Kotlin symbol processing</b><span style=\"font-weight: 400;\">\u00a0</span></h4>\n<p><span style=\"font-weight: 400;\">Code generation initially began with the Kotlin Annotation Processing Tool (KAPT), which generates Java stubs for Kotlin code and allows annotation processors written for Java to work with Kotlin. This stub generation has been a time consuming process, and over has had a significant impact on the build speed of projects that use annotation processing.\u00a0</span></p>\n<p><span style=\"font-weight: 400;\">However, KSP is a Kotlin-first alternative to KAPT, which analyzes Kotlin code and has shown to have several advantages such as:\u00a0</span></p>\n<ul>\n<li style=\"font-weight: 400;\"><b>Up to two times the speed</b><span style=\"font-weight: 400;\">. KSP requires no stub generation.</span></li>\n<li style=\"font-weight: 400;\"><b>Better typing.</b><span style=\"font-weight: 400;\"> KSP understands Kotlin specific languages such as nullability.\u00a0</span></li>\n<li style=\"font-weight: 400;\"><b>Multiplatform-ready</b><span style=\"font-weight: 400;\">. Doesn\u2019t depend on Java source code.\u00a0</span></li>\n</ul>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Migration is recommended to be done as soon as possible. Here is how to set it up:</span></p>\n<ul>\n<li><span style=\"font-weight: 400;\">Add the plugin </span></li>\n</ul>\n<p><img alt=\"\" class=\"alignnone wp-image-6859\" height=\"104\" src=\"https://blog.moove-it.com/wp-content/uploads/2023/06/image2-1-300x48.png\" width=\"650\" /></p>\n<ul>\n<li><span style=\"font-weight: 400;\">Change KAPT for KSP whenever possible. (note: some libraries might not support KSP yet.)</span></li>\n</ul>\n<p><img alt=\"\" class=\"alignnone wp-image-6860\" height=\"299\" src=\"https://blog.moove-it.com/wp-content/uploads/2023/06/image3-300x138.png\" width=\"650\" /></p>\n<p><span style=\"font-weight: 400;\">For more information, check out the official libraries for KSP support:</span></p>\n<p><a href=\"https://kotlinlang.org/docs/ksp-overview.html#supported-libraries\"><span style=\"font-weight: 400;\">Kotlin Symbol Processing API\u00a0</span></a></p>\n<p>&nbsp;</p>\n<h4><b>Kotlin Multiplatform (Beta)\u00a0</b></h4>\n<p><span style=\"font-weight: 400;\">Kotlin Multiplatform is made to simplify the development of cross-platform projects by sharing Kotlin code across different platforms. It reduces the overall time spent writing and maintaining the code for different platforms, while maintaining the benefits of native programming.</span></p>\n<p><img alt=\"\" class=\"alignnone wp-image-6864\" height=\"310\" src=\"https://blog.moove-it.com/wp-content/uploads/2023/06/graph-300x143.png\" width=\"650\" /></p>\n<p><span style=\"font-weight: 400;\">Kotlin Multiplatform is currently in Beta, and Google is currently experimenting with code sharing in Kotlin across Android, iOS and web while utilizing Google Suite applications. </span></p>\n<p><img alt=\"\" class=\"alignnone wp-image-6861\" height=\"82\" src=\"https://blog.moove-it.com/wp-content/uploads/2023/06/image5-300x37.png\" width=\"665\" /></p>\n<p><span style=\"font-weight: 400;\">With the benefits of native programming while working on different platforms, Kotlin provides the following code sharing mechanics:\u00a0</span></p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Share common code among all the platforms that are being used in your project</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Share code among only some of the platforms included in your project in order to reuse the code in similar platforms\u00a0</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If platform specific APIS need to be accessed from the shared code, you can use the Kotlin mechanism of expected and actual declarations.\u00a0</span></li>\n</ul>\n<p><span style=\"font-weight: 400;\">Some Jetpack libraries are bringing support for\u00a0 Kotlin Multiplatform, to learn more about the Jetpack libraries, </span><a href=\"https://github.com/android/kotlin-multiplatform-samples\"><span style=\"font-weight: 400;\">click here</span></a><span style=\"font-weight: 400;\">.\u00a0</span></p>\n<h4><b>Conclusion</b></h4>\n<p><span style=\"font-weight: 400;\">Kotlin has introduced several new features that will continue to make it a great language for Android development. Kotlin is continuing to make it easier for developers to write clean and efficient code, and making it more efficient to migrate their existing code to Kotlin.\u00a0</span></p>\n<p><span style=\"font-weight: 400;\">Overall, Kotlin is a powerful language, and as Google continues to support Kotlin and add new features to the language, we can expect even more exciting features in the future.</span><span style=\"font-weight: 400;\">To learn more about what our Mobile Studio is doing in Android development, check out our Mobile Studio site at: </span><a href=\"https://moove-it.com/studios/mobile-studio\"><span style=\"font-weight: 400;\">https://moove-it.com/studios/mobile-studio</span></a></p>\n<p>The post <a href=\"https://blog.moove-it.com/whats-new-in-kotlin-for-android/\" rel=\"nofollow\">What&#8217;s new in Kotlin for Android?</a> appeared first on <a href=\"https://blog.moove-it.com\" rel=\"nofollow\">Moove It</a>.</p>"
      }
    ]
  }
}