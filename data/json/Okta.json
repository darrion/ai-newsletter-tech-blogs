{
  "company": "Okta",
  "title": "Okta",
  "xmlUrl": "https://developer.okta.com/feed.xml",
  "htmlUrl": "https://developer.okta.com/blog/",
  "content": "\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nHow I Built an Okta Documentation Chatbot in Python | Okta Developer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSearch\n\n\n\n\n\n\n\n\n\n\n\nCommunity \n\n\nForum\n\n\nToolkit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog\n\n\n\n                            Pricing\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                            Okta.com\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                            Admin Console\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                            Sign Up\n                        \n\n\n\n\nGuides\n\n\nConcept\n\n\nReference\n\n\nLanguages & SDKs\n\n\n\n\n\n\n\n                    Sign Up\n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out the free virtual workshops on how to take your SaaS app to the next level in the enterprise-ready identity journey!\n\n\n\n\n\n\n\n\n\n\n\n\nai\n\n\nautomation\n\n\nokta-documentation\n\n\npython\n\n\npython-chatbot\n\n\n\n\n\nHow I Built an Okta Documentation Chatbot in Python\n\n\n\n\n\n\n\nTanish Kumar\n\n\n\n\n\nDecember 20, 2023\n\n\n\n\n\n\n              \n\n\n\n\n\n\n\n5 MIN READ\n\n            \n\n\n CODE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn today\u2019s fast-paced world of technology, developers must navigate through detailed API documentation to integrate with software solutions. As a Developer Support Intern at Okta, I noticed developers underutilizing Okta\u2019s Developer Documentation. To help them benefit from the wealth of information in these docs, I was inspired to build a tool using OpenAI. Leveraging ChatGPT, I built \u2728Oktanaut\u2728, a versatile Python chatbot running on Jupyter Notebook that makes access to information on Okta\u2019s Developer Documentation simple and straightforward.\n \n\u2013 Image source: Okta Developer GitHub\nEvolution of Oktanaut, a Python Chatbot\nI developed two versions of Oktanaut. The first version was a specific approach, offering greater precision rather than general knowledge. I built the prototype chatbot using LlamaIndex and trained it on the Okta Developer Documentation. While this version generated accurate responses due to its focused training, it could not handle diverse questions.\nThe second version, a versatile approach, utilized the capabilities of the OpenAI GPT-3.5 API; it generated responses based on a broader sample of user inquiries. This version handled various questions, providing a dynamic, self-learning, and interactive experience.\nThe trade-off between precision and versatility was obvious when comparing the two versions. The LLamaIndex-based Oktanaut version excelled in accuracy, while the GPT-3.5-powered version generated better responses to a broader set of questions. The final chatbot I chose to demo in this blog uses OpenAI API as it has bigger models to run inquiries and is more user-friendly.\nMeticulous Training on Okta\u2019s Developer Documentation for Enhanced Performance\nFor both versions, meticulous training was a necessary building block. Carefully refining the training data helped the bot produce more accurate responses to edge cases and custom-specific questions. I collected training data, including curated sample questions, answers, and information provided by Okta\u2019s Developer Support Engineers. I stored this data in Google Drive to run on Colab. Additionally, I transformed the chatbot into a self-learning entity by storing historical interactions, allowing it to learn from its mistakes. This self-improvement mechanism allowed the chatbot to utilize context information from past responses within the session to provide more informed responses.\nPersonalizing the Conversational Experience with the Python Chatbot AI\nI programmed the chatbot to greet users with its name, functionality, and purpose. Doing so added a personal touch that will help minimize potential confusion users may have when interacting with the chatbot.\nI utilized a Python library called Panel on the frontend to achieve a user-friendly interface. Building the interface was not as simple as I first expected. The Panel library has several bugs and glitches, and considering a frontend built-in Python is uncommon. When I considered deployment options, I decided to run Oktanaut on Jupyter Notebook to ensure a simple setup process for everyone.\nDemonstrating Oktanaut\u2019s AI Chat Potential\nThe completed code for the OpenAI version of the chatbot can be found here.\nKey terms to note before diving into the Python code:\n\nmodel:\"gpt-3.5-turbo\": Specifies the GPT-3.5 Turbo model used for conversation.\nmessages: The list of messages that make up the conversation.\ntemperature: A parameter that controls the randomness of the model\u2019s responses.\ncontinue_conversation: This function takes a list of messages as input and continues the conversation with the GPT-3.5 Turbo model. It sends the messages to the model and receives a response.\nadd_prompts_conversation: This function adds prompts to the conversation and retrieves responses from the chatbot.\nclient_prompt: The user asks a question about Okta in this input field.\nrole: The user\u2019s input adds to the conversation with the role \u201cuser.\u201d\ncontinue_conversation: This function retrieves the chatbot\u2019s response in string format.\nassistant: This role adds The chatbot\u2019s response to the conversation.\ncontext list: This initializes the conversation with a system message that introduces Oktanaut, the chatbot. It provides information about the bot\u2019s purpose and capabilities.\npn.extension(): This line initializes the Panel library.\npanels list: This list stores the components displayed in the web interface.\nclient_prompt input field: This widget allows users to input their questions or prompts for Oktanaut.\nbutton_conversation: This submits the user\u2019s question, calls the function and queries the API, leading to the conversation with the chatbot.\ninteractive_conversation function binding: This binds the add_prompts_conversation function to the button_conversation button, so the function is called when the user clicks the button.\ndashboard layout: This section assembles the dashboard for the chatbot, including the input field, the conversation button, and the chatbot\u2019s responses.\n\ndef continue_conversation(messages, temperature=0):\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=messages,\n        temperature=temperature,\n    )\n    #print(str(response.choices[0].message[\"content\"]))\n    return response.choices[0].message[\"content\"]\n\ndef add_prompts_conversation(_):\n    prompt = client_prompt.value_input\n    client_prompt.value = ''\n\n    context.append({'role':'user', 'content':f\"{prompt}\"})\n\n    response = continue_conversation(context)\n\n    context.append({'role':'assistant', 'content':f\"{response}\"})\n\n    panels.append(\n        pn.Row('Developer:', pn.pane.Markdown(prompt, width=600)))\n    panels.append(\n        pn.Row('Oktanaut:', pn.pane.Markdown(response, width=600)))\n\n    return pn.Column(*panels)\n\ncontext = [ {'role':'system', 'content':\"\"\"'I am Oktanaut, a helpful chatbot meant to answer your questions about Okta and OAuth Developer Documentation. I answer questions from Okta Developer Documentation. How may I help you? (Say \"thank you\" to end the session) \\n'\"\"\"} ]\n\npn.extension()\n\npanels = []\n\nclient_prompt = pn.widgets.TextInput(value=\"Hi\", placeholder='Enter your questions here...')\nbutton_conversation = pn.widgets.Button(name=\"Chat with Oktanaut!\")\n\ninteractive_conversation = pn.bind(add_prompts_conversation, button_conversation)\n\ndashboard = pn.Column(\n    client_prompt,\n    pn.Row(button_conversation),\n    pn.panel(interactive_conversation, loading_indicator=True),\n)\n\ndashboard\n\nThe code for the Jupiter Python Notebook above, okta-python-chatbot-example\n/GPTChatbot.ipynb, is for summoning Oktanaut.\nHere\u2019s a step-by-step walkthrough of how to run the code:\n\n\nWith a Google account, ensure you have access to Colab; this will be the environment we will use to run the Python scripts.\n\n\nLibrary installation: The script begins with installing the required Python packages:\n\nOpenAI\nPanel\nLlamaIndex\n\n\n\nThese packages work with the GPT-3.5 model, create the web interface, and manage the chatbot\u2019s conversation. The LlamaIndex package is only used to read data in the OpenAI implementation of the bot.\n\nCreate an OpenAI account and follow these instructions to obtain an API Key. On line 161 of GPTChatbot.ipynb, replace the API Key code snippet with your API Key. ChatGPT used to offer free credits to use, but it now costs five or more dollars to purchase API usage.\n\n\n\n\nDownload the Okta Developer Documentation files from here, and extract the archive. Upload the archive contents to a folder named \u2018oktanaut\u2019 in your Google Drive.\n Make sure the training files are in the oktanaut folder, not in an additional folder within it. If you change the name of the folder where you keep the files in your Google Drive, update line 167 of GPTChatbot.ipynb to the correct path.  Alternatively, you can download the files directly from the Okta Developer Documentation Repository, or supply your own custom training data.\n\n\nRun the GPTChatbot.ipynb notebook in your Colab development environment.\n\n\nAfter running the script, a web interface displays an input field and a \u201cChat with Oktanaut!\u201d button.\n\n\nEnter your questions about the Okta Developer Documentation in the input field.\n\n\nTo submit your question, click the \u201cChat with Oktanaut!\u201d button to begin a conversation with the Python chatbot.\n\n\nOktanaut will answer your question with an AI-generated response using its knowledge from the developer documentation, training data from internal support engineers, and the OpenAI API. The responses will appear on the web interface in real-time.\n\n\nContinue the conversation by entering additional questions or prompts and clicking the button. The bot will use your questions from earlier in the conversation to improve its understanding of your needs, and provide contextually appropriate answers as you converse with it.\n\n\nTo end the session, say \u201cThank you\u201d or leave the web page.\n\n\n\nFurther Python Chatbot Improvements\nI am enthusiastic about enhancing Oktanaut\u2019s training by incorporating information from the Okta Dev Forum and Okta\u2019s Software Developer Kits (SDKs). In the future, I hope to collaborate with the Okta Developer Documentation team to improve information gaps in the documentation. I also want to add a feature to automatically update to the latest version of the Okta Developer Documentation so that the data Oktanaut references is up-to-date and reliable.\nHave you thought about building your own chatbot with AI? Would you like to know more about how I built Oktanaut? Let me know in the comments below! Want to stay in touch? Follow our social channels @oktadev on Twitter and subscribe to our YouTube channel.\nPython Chatbot Resources\n\nCheat Sheet: Mastering Temperature and Top_p in ChatGPT API (a few tips and tricks on controlling the creativity/deterministic output of prompt responses.)\nUnderstanding OpenAI\u2019s Temperature Parameter\n\n\n\n\n\nTanish Kumar\n\n\n\n\n\n\n\n\n  Previous post\n\n\n\n\n\nOkta Developer Blog Comment Policy\nWe welcome relevant and respectful comments. Off-topic comments may be removed.\n\n\n\n          Please enable JavaScript to view the comments inline. Visit the forum to comment.\n        \n\n\n\n\n\n\n\n\nNeed Support?\n\n              You can reach us directly at developers@okta.com or you can also ask us on the \n              forum.\n            \n\n\nSocial\n\n\n\nGitHub\n\n\n\n\nTwitter\n\n\n\n\nYouTube\n\n\n\n\nForum\n\n\n\n\nBlog RSS\n\n\n\n\n\nContact & Legal\n\nContact our team\nContact sales\nTerms & conditions\nPrivacy policy\n\n\n\nMore Info\n\nPricing\nIntegrate with Okta\nChange Log\n3rd-party notes\nAuth0 platform\n\n\n\n\nOKTA.COM\nProducts, case studies, resources\n\n\nHELP CENTER\nKnowledgebase, roadmaps, and more\n\n\nTRUST\nSystem status, security, compliance\n\n\nCopyright \u00a9 2024 Okta.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "How I Built an Okta Documentation Chatbot in Python",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://developer.okta.com/feed.xml",
      "value": "How I Built an Okta Documentation Chatbot in Python"
    },
    "summary": "<p>In today\u2019s fast-paced world of technology, developers must navigate through detailed API documentation to integrate with software solutions. As a Developer Support Intern at Okta, I noticed developers underutilizing <a href=\"https://developer.okta.com/\">Okta\u2019s Developer Documentation</a>. To help them benefit from the wealth of information in these docs, I was inspired to build a tool using OpenAI. Leveraging ChatGPT, I built \u2728Oktanaut\u2728, a versatile Python chatbot running on Jupyter Notebook that makes access to information on Okta\u2019s Developer Documentation simple and straightforward.</p>\n\n<p><img alt=\"OktaDev Forum and SDK logo\" class=\"center-image\" height=\"400\" src=\"https://developer.okta.com/assets-jekyll/blog/okta-documentation-chatbot/oktadevforumsdk-c888c276f3cc4d9a230aa1f0800a6bd7504977c57282dee890eb58ea402f6004.jpg\" /> \n\u2013 Image source: <cite><a href=\"https://raw.githubusercontent.com/oktadev/.github/main/images/okta-dev-header.png\">Okta Developer GitHub</a></cite></p>\n\n<h2 id=\"evolution-of-oktanaut-a-python-chatbot\">Evolution of Oktanaut, a Python Chatbot</h2>\n<p>I developed two versions of Oktanaut. The first version was a specific approach, offering greater precision rather than general knowledge. I built the prototype chatbot using LlamaIndex and trained it on the Okta Developer Documentation. While this version generated accurate responses due to its focused training, it could not handle diverse questions.</p>\n\n<p>The second version, a versatile approach, utilized the capabilities of the <a href=\"https://chat.openai.com/auth/login\">OpenAI GPT-3.5 API</a>; it generated responses based on a broader sample of user inquiries. This version handled various questions, providing a dynamic, self-learning, and interactive experience.</p>\n\n<p>The trade-off between precision and versatility was obvious when comparing the two versions. The LLamaIndex-based Oktanaut version excelled in accuracy, while the GPT-3.5-powered version generated better responses to a broader set of questions. The final chatbot I chose to demo in this blog uses OpenAI API as it has bigger models to run inquiries and is more user-friendly.</p>\n\n<h2 id=\"meticulous-training-on-oktas-developer-documentation-for-enhanced-performance\">Meticulous Training on Okta\u2019s Developer Documentation for Enhanced Performance</h2>\n<p>For both versions, meticulous training was a necessary building block. Carefully refining the training data helped the bot produce more accurate responses to edge cases and custom-specific questions. I collected training data, including curated sample questions, answers, and information provided by Okta\u2019s Developer Support Engineers. I stored this data in Google Drive to run on <a href=\"https://colab.google/\">Colab</a>. Additionally, I transformed the chatbot into a self-learning entity by storing historical interactions, allowing it to learn from its mistakes. This self-improvement mechanism allowed the chatbot to utilize context information from past responses within the session to provide more informed responses.</p>\n\n<h2 id=\"personalizing-the-conversational-experience-with-the-python-chatbot-ai\">Personalizing the Conversational Experience with the Python Chatbot AI</h2>\n<p>I programmed the chatbot to greet users with its name, functionality, and purpose. Doing so added a personal touch that will help minimize potential confusion users may have when interacting with the chatbot.</p>\n\n<p>I utilized a Python library called <a href=\"https://panel.holoviz.org/getting_started/installation.html\">Panel</a> on the frontend to achieve a user-friendly interface. Building the interface was not as simple as I first expected. The Panel library has several bugs and glitches, and considering a frontend built-in Python is uncommon. When I considered deployment options, I decided to run Oktanaut on Jupyter Notebook to ensure a simple setup process for everyone.</p>\n\n<h2 id=\"demonstrating-oktanauts-ai-chat-potential\">Demonstrating Oktanaut\u2019s AI Chat Potential</h2>\n<p>The completed code for the OpenAI version of the chatbot can be found <a href=\"https://github.com/oktadev/okta-python-chatbot-example\">here</a>.</p>\n\n<p>Key terms to note before diving into the Python code:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">model:\"gpt-3.5-turbo\"</code>: Specifies the GPT-3.5 Turbo model used for conversation.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">messages</code>: The list of messages that make up the conversation.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">temperature</code>: A parameter that controls the randomness of the model\u2019s responses.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">continue_conversation</code>: This function takes a list of messages as input and continues the conversation with the GPT-3.5 Turbo model. It sends the messages to the model and receives a response.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">add_prompts_conversation</code>: This function adds prompts to the conversation and retrieves responses from the chatbot.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">client_prompt</code>: The user asks a question about Okta in this input field.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">role</code>: The user\u2019s input adds to the conversation with the role \u201cuser.\u201d</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">continue_conversation</code>: This function retrieves the chatbot\u2019s response in string format.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">assistant</code>: This role adds The chatbot\u2019s response to the conversation.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">context list</code>: This initializes the conversation with a system message that introduces Oktanaut, the chatbot. It provides information about the bot\u2019s purpose and capabilities.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">pn.extension()</code>: This line initializes the Panel library.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">panels list</code>: This list stores the components displayed in the web interface.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">client_prompt input field</code>: This widget allows users to input their questions or prompts for Oktanaut.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">button_conversation</code>: This submits the user\u2019s question, calls the function and queries the API, leading to the conversation with the chatbot.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">interactive_conversation function binding</code>: This binds the add_prompts_conversation function to the button_conversation button, so the function is called when the user clicks the button.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">dashboard layout</code>: This section assembles the dashboard for the chatbot, including the input field, the conversation button, and the chatbot\u2019s responses.</li>\n</ul>\n\n<div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">continue_conversation</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">ChatCompletion</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n        <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s\">\"gpt-3.5-turbo\"</span><span class=\"p\">,</span>\n        <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">messages</span><span class=\"p\">,</span>\n        <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"n\">temperature</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\">#print(str(response.choices[0].message[\"content\"]))\n</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s\">\"content\"</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">add_prompts_conversation</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">):</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"n\">client_prompt</span><span class=\"p\">.</span><span class=\"n\">value_input</span>\n    <span class=\"n\">client_prompt</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">''</span>\n\n    <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s\">'role'</span><span class=\"p\">:</span><span class=\"s\">'user'</span><span class=\"p\">,</span> <span class=\"s\">'content'</span><span class=\"p\">:</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"n\">prompt</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">})</span>\n\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">continue_conversation</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n\n    <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s\">'role'</span><span class=\"p\">:</span><span class=\"s\">'assistant'</span><span class=\"p\">,</span> <span class=\"s\">'content'</span><span class=\"p\">:</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">})</span>\n\n    <span class=\"n\">panels</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n        <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Row</span><span class=\"p\">(</span><span class=\"s\">'Developer:'</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">pane</span><span class=\"p\">.</span><span class=\"n\">Markdown</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">)))</span>\n    <span class=\"n\">panels</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n        <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Row</span><span class=\"p\">(</span><span class=\"s\">'Oktanaut:'</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">pane</span><span class=\"p\">.</span><span class=\"n\">Markdown</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">panels</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s\">'role'</span><span class=\"p\">:</span><span class=\"s\">'system'</span><span class=\"p\">,</span> <span class=\"s\">'content'</span><span class=\"p\">:</span><span class=\"s\">\"\"\"'I am Oktanaut, a helpful chatbot meant to answer your questions about Okta and OAuth Developer Documentation. I answer questions from Okta Developer Documentation. How may I help you? (Say \"thank you\" to end the session) </span><span class=\"se\">\\n</span><span class=\"s\">'\"\"\"</span><span class=\"p\">}</span> <span class=\"p\">]</span>\n\n<span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">extension</span><span class=\"p\">()</span>\n\n<span class=\"n\">panels</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">client_prompt</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">widgets</span><span class=\"p\">.</span><span class=\"n\">TextInput</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">\"Hi\"</span><span class=\"p\">,</span> <span class=\"n\">placeholder</span><span class=\"o\">=</span><span class=\"s\">'Enter your questions here...'</span><span class=\"p\">)</span>\n<span class=\"n\">button_conversation</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">widgets</span><span class=\"p\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"Chat with Oktanaut!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">interactive_conversation</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">add_prompts_conversation</span><span class=\"p\">,</span> <span class=\"n\">button_conversation</span><span class=\"p\">)</span>\n\n<span class=\"n\">dashboard</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span>\n    <span class=\"n\">client_prompt</span><span class=\"p\">,</span>\n    <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Row</span><span class=\"p\">(</span><span class=\"n\">button_conversation</span><span class=\"p\">),</span>\n    <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">panel</span><span class=\"p\">(</span><span class=\"n\">interactive_conversation</span><span class=\"p\">,</span> <span class=\"n\">loading_indicator</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">dashboard</span>\n</code></pre></div></div>\n\n<p>The code for the Jupiter Python Notebook above, <a href=\"https://github.com/oktadev/okta-python-chatbot-example/blob/main/GPTChatbot.ipynb\">okta-python-chatbot-example\n/GPTChatbot.ipynb</a>, is for summoning Oktanaut.</p>\n\n<p>Here\u2019s a step-by-step walkthrough of how to run the code:</p>\n\n<ol>\n  <li>\n    <p>With a Google account, ensure you have access to <a href=\"https://colab.google/\">Colab</a>; this will be the environment we will use to run the Python scripts.</p>\n  </li>\n  <li>\n    <p>Library installation: The script begins with installing the required Python packages:</p>\n    <ul>\n      <li><a href=\"https://pypi.org/project/openai/\">OpenAI</a></li>\n      <li><a href=\"https://panel.holoviz.org/getting_started/installation.html\">Panel</a></li>\n      <li><a href=\"https://pypi.org/project/llama-index/\">LlamaIndex</a></li>\n    </ul>\n  </li>\n</ol>\n\n<p>These packages work with the GPT-3.5 model, create the web interface, and manage the chatbot\u2019s conversation. The LlamaIndex package is only used to read data in the OpenAI implementation of the bot.</p>\n\n<ol>\n  <li>Create an OpenAI account and follow these <a href=\"https://help.openai.com/en/articles/4936850-where-do-i-find-my-api-key\">instructions</a> to obtain an API Key. On line 161 of <code class=\"language-plaintext highlighter-rouge\">GPTChatbot.ipynb</code>, replace the API Key code snippet with your API Key. ChatGPT used to offer free credits to use, but it now costs five or more dollars to purchase API usage.</li>\n</ol>\n\n<p><img alt=\"Image with an arrow pointing to where the OpenAI API key should be added in the code.\" class=\"center-image\" height=\"400\" src=\"https://developer.okta.com/assets-jekyll/blog/okta-documentation-chatbot/openai-api-key-e8d78ac3a43c75963f066dcfa99f4afeb1aa4f02bdbd52a1ffb21045f394d969.jpg\" /></p>\n\n<ol>\n  <li>\n    <p>Download the Okta Developer Documentation files from <a href=\"https://github.com/oktadev/okta-python-chatbot-example/tree/tar-file\">here</a>, and extract the archive. Upload the archive contents to a folder named \u2018oktanaut\u2019 in your Google Drive.<br />\n Make sure the training files are in the <code class=\"language-plaintext highlighter-rouge\">oktanaut</code> folder, not in an additional folder within it. If you change the name of the folder where you keep the files in your Google Drive, update line 167 of <code class=\"language-plaintext highlighter-rouge\">GPTChatbot.ipynb</code> to the correct path.  Alternatively, you can download the files directly from the Okta Developer Documentation Repository, or supply your own custom training data.</p>\n  </li>\n  <li>\n    <p>Run the <code class=\"language-plaintext highlighter-rouge\">GPTChatbot.ipynb</code> notebook in your Colab development environment.</p>\n  </li>\n  <li>\n    <p>After running the script, a web interface displays an input field and a \u201cChat with Oktanaut!\u201d button.</p>\n  </li>\n  <li>\n    <p>Enter your questions about the Okta Developer Documentation in the input field.</p>\n  </li>\n  <li>\n    <p>To submit your question, click the \u201cChat with Oktanaut!\u201d button to begin a conversation with the Python chatbot.</p>\n  </li>\n  <li>\n    <p>Oktanaut will answer your question with an AI-generated response using its knowledge from the developer documentation, training data from internal support engineers, and the OpenAI API. The responses will appear on the web interface in real-time.</p>\n  </li>\n  <li>\n    <p>Continue the conversation by entering additional questions or prompts and clicking the button. The bot will use your questions from earlier in the conversation to improve its understanding of your needs, and provide contextually appropriate answers as you converse with it.</p>\n  </li>\n  <li>\n    <p>To end the session, say \u201cThank you\u201d or leave the web page.</p>\n  </li>\n</ol>\n\n<p><img alt=\"Image of Oktanaut's answer to, 'What is OIDC?'\" class=\"center-image\" height=\"400\" src=\"https://developer.okta.com/assets-jekyll/blog/okta-documentation-chatbot/openai-oidc-1addb48f146ee8edee1d214084a186e452c1aa910212c3f4e73f0bbc605c8e62.jpg\" /></p>\n\n<h2 id=\"further-python-chatbot-improvements\">Further Python Chatbot Improvements</h2>\n<p>I am enthusiastic about enhancing Oktanaut\u2019s training by incorporating information from the Okta Dev Forum and Okta\u2019s Software Developer Kits (SDKs). In the future, I hope to collaborate with the Okta Developer Documentation team to improve information gaps in the documentation. I also want to add a feature to automatically update to the latest version of the Okta Developer Documentation so that the data Oktanaut references is up-to-date and reliable.</p>\n\n<p>Have you thought about building your own chatbot with AI? Would you like to know more about how I built Oktanaut? Let me know in the comments below! Want to stay in touch? Follow our social channels @oktadev on <a href=\"https://twitter.com/oktadev\">Twitter</a> and subscribe to our <a href=\"https://www.youtube.com/c/oktadev\">YouTube</a> channel.</p>\n\n<h2 id=\"python-chatbot-resources\">Python Chatbot Resources</h2>\n<ul>\n  <li><a href=\"https://community.openai.com/t/cheat-sheet-mastering-temperature-and-top-p-in-chatgpt-api-a-few-tips-and-tricks-on-controlling-the-creativity-deterministic-output-of-prompt-responses/172683/10\">Cheat Sheet: Mastering Temperature and Top_p in ChatGPT API (a few tips and tricks on controlling the creativity/deterministic output of prompt responses.)</a></li>\n  <li><a href=\"https://www.coltsteele.com/tips/understanding-openai-s-temperature-parameter\">Understanding OpenAI\u2019s Temperature Parameter</a></li>\n</ul>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://developer.okta.com/feed.xml",
      "value": "<p>In today\u2019s fast-paced world of technology, developers must navigate through detailed API documentation to integrate with software solutions. As a Developer Support Intern at Okta, I noticed developers underutilizing <a href=\"https://developer.okta.com/\">Okta\u2019s Developer Documentation</a>. To help them benefit from the wealth of information in these docs, I was inspired to build a tool using OpenAI. Leveraging ChatGPT, I built \u2728Oktanaut\u2728, a versatile Python chatbot running on Jupyter Notebook that makes access to information on Okta\u2019s Developer Documentation simple and straightforward.</p>\n\n<p><img alt=\"OktaDev Forum and SDK logo\" class=\"center-image\" height=\"400\" src=\"https://developer.okta.com/assets-jekyll/blog/okta-documentation-chatbot/oktadevforumsdk-c888c276f3cc4d9a230aa1f0800a6bd7504977c57282dee890eb58ea402f6004.jpg\" /> \n\u2013 Image source: <cite><a href=\"https://raw.githubusercontent.com/oktadev/.github/main/images/okta-dev-header.png\">Okta Developer GitHub</a></cite></p>\n\n<h2 id=\"evolution-of-oktanaut-a-python-chatbot\">Evolution of Oktanaut, a Python Chatbot</h2>\n<p>I developed two versions of Oktanaut. The first version was a specific approach, offering greater precision rather than general knowledge. I built the prototype chatbot using LlamaIndex and trained it on the Okta Developer Documentation. While this version generated accurate responses due to its focused training, it could not handle diverse questions.</p>\n\n<p>The second version, a versatile approach, utilized the capabilities of the <a href=\"https://chat.openai.com/auth/login\">OpenAI GPT-3.5 API</a>; it generated responses based on a broader sample of user inquiries. This version handled various questions, providing a dynamic, self-learning, and interactive experience.</p>\n\n<p>The trade-off between precision and versatility was obvious when comparing the two versions. The LLamaIndex-based Oktanaut version excelled in accuracy, while the GPT-3.5-powered version generated better responses to a broader set of questions. The final chatbot I chose to demo in this blog uses OpenAI API as it has bigger models to run inquiries and is more user-friendly.</p>\n\n<h2 id=\"meticulous-training-on-oktas-developer-documentation-for-enhanced-performance\">Meticulous Training on Okta\u2019s Developer Documentation for Enhanced Performance</h2>\n<p>For both versions, meticulous training was a necessary building block. Carefully refining the training data helped the bot produce more accurate responses to edge cases and custom-specific questions. I collected training data, including curated sample questions, answers, and information provided by Okta\u2019s Developer Support Engineers. I stored this data in Google Drive to run on <a href=\"https://colab.google/\">Colab</a>. Additionally, I transformed the chatbot into a self-learning entity by storing historical interactions, allowing it to learn from its mistakes. This self-improvement mechanism allowed the chatbot to utilize context information from past responses within the session to provide more informed responses.</p>\n\n<h2 id=\"personalizing-the-conversational-experience-with-the-python-chatbot-ai\">Personalizing the Conversational Experience with the Python Chatbot AI</h2>\n<p>I programmed the chatbot to greet users with its name, functionality, and purpose. Doing so added a personal touch that will help minimize potential confusion users may have when interacting with the chatbot.</p>\n\n<p>I utilized a Python library called <a href=\"https://panel.holoviz.org/getting_started/installation.html\">Panel</a> on the frontend to achieve a user-friendly interface. Building the interface was not as simple as I first expected. The Panel library has several bugs and glitches, and considering a frontend built-in Python is uncommon. When I considered deployment options, I decided to run Oktanaut on Jupyter Notebook to ensure a simple setup process for everyone.</p>\n\n<h2 id=\"demonstrating-oktanauts-ai-chat-potential\">Demonstrating Oktanaut\u2019s AI Chat Potential</h2>\n<p>The completed code for the OpenAI version of the chatbot can be found <a href=\"https://github.com/oktadev/okta-python-chatbot-example\">here</a>.</p>\n\n<p>Key terms to note before diving into the Python code:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">model:\"gpt-3.5-turbo\"</code>: Specifies the GPT-3.5 Turbo model used for conversation.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">messages</code>: The list of messages that make up the conversation.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">temperature</code>: A parameter that controls the randomness of the model\u2019s responses.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">continue_conversation</code>: This function takes a list of messages as input and continues the conversation with the GPT-3.5 Turbo model. It sends the messages to the model and receives a response.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">add_prompts_conversation</code>: This function adds prompts to the conversation and retrieves responses from the chatbot.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">client_prompt</code>: The user asks a question about Okta in this input field.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">role</code>: The user\u2019s input adds to the conversation with the role \u201cuser.\u201d</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">continue_conversation</code>: This function retrieves the chatbot\u2019s response in string format.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">assistant</code>: This role adds The chatbot\u2019s response to the conversation.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">context list</code>: This initializes the conversation with a system message that introduces Oktanaut, the chatbot. It provides information about the bot\u2019s purpose and capabilities.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">pn.extension()</code>: This line initializes the Panel library.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">panels list</code>: This list stores the components displayed in the web interface.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">client_prompt input field</code>: This widget allows users to input their questions or prompts for Oktanaut.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">button_conversation</code>: This submits the user\u2019s question, calls the function and queries the API, leading to the conversation with the chatbot.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">interactive_conversation function binding</code>: This binds the add_prompts_conversation function to the button_conversation button, so the function is called when the user clicks the button.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">dashboard layout</code>: This section assembles the dashboard for the chatbot, including the input field, the conversation button, and the chatbot\u2019s responses.</li>\n</ul>\n\n<div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">continue_conversation</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">ChatCompletion</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n        <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s\">\"gpt-3.5-turbo\"</span><span class=\"p\">,</span>\n        <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">messages</span><span class=\"p\">,</span>\n        <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"n\">temperature</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\">#print(str(response.choices[0].message[\"content\"]))\n</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s\">\"content\"</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">add_prompts_conversation</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">):</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"n\">client_prompt</span><span class=\"p\">.</span><span class=\"n\">value_input</span>\n    <span class=\"n\">client_prompt</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">''</span>\n\n    <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s\">'role'</span><span class=\"p\">:</span><span class=\"s\">'user'</span><span class=\"p\">,</span> <span class=\"s\">'content'</span><span class=\"p\">:</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"n\">prompt</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">})</span>\n\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">continue_conversation</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n\n    <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s\">'role'</span><span class=\"p\">:</span><span class=\"s\">'assistant'</span><span class=\"p\">,</span> <span class=\"s\">'content'</span><span class=\"p\">:</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">})</span>\n\n    <span class=\"n\">panels</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n        <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Row</span><span class=\"p\">(</span><span class=\"s\">'Developer:'</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">pane</span><span class=\"p\">.</span><span class=\"n\">Markdown</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">)))</span>\n    <span class=\"n\">panels</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n        <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Row</span><span class=\"p\">(</span><span class=\"s\">'Oktanaut:'</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">pane</span><span class=\"p\">.</span><span class=\"n\">Markdown</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">panels</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s\">'role'</span><span class=\"p\">:</span><span class=\"s\">'system'</span><span class=\"p\">,</span> <span class=\"s\">'content'</span><span class=\"p\">:</span><span class=\"s\">\"\"\"'I am Oktanaut, a helpful chatbot meant to answer your questions about Okta and OAuth Developer Documentation. I answer questions from Okta Developer Documentation. How may I help you? (Say \"thank you\" to end the session) </span><span class=\"se\">\\n</span><span class=\"s\">'\"\"\"</span><span class=\"p\">}</span> <span class=\"p\">]</span>\n\n<span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">extension</span><span class=\"p\">()</span>\n\n<span class=\"n\">panels</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">client_prompt</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">widgets</span><span class=\"p\">.</span><span class=\"n\">TextInput</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">\"Hi\"</span><span class=\"p\">,</span> <span class=\"n\">placeholder</span><span class=\"o\">=</span><span class=\"s\">'Enter your questions here...'</span><span class=\"p\">)</span>\n<span class=\"n\">button_conversation</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">widgets</span><span class=\"p\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"Chat with Oktanaut!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">interactive_conversation</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">add_prompts_conversation</span><span class=\"p\">,</span> <span class=\"n\">button_conversation</span><span class=\"p\">)</span>\n\n<span class=\"n\">dashboard</span> <span class=\"o\">=</span> <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span>\n    <span class=\"n\">client_prompt</span><span class=\"p\">,</span>\n    <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">Row</span><span class=\"p\">(</span><span class=\"n\">button_conversation</span><span class=\"p\">),</span>\n    <span class=\"n\">pn</span><span class=\"p\">.</span><span class=\"n\">panel</span><span class=\"p\">(</span><span class=\"n\">interactive_conversation</span><span class=\"p\">,</span> <span class=\"n\">loading_indicator</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">dashboard</span>\n</code></pre></div></div>\n\n<p>The code for the Jupiter Python Notebook above, <a href=\"https://github.com/oktadev/okta-python-chatbot-example/blob/main/GPTChatbot.ipynb\">okta-python-chatbot-example\n/GPTChatbot.ipynb</a>, is for summoning Oktanaut.</p>\n\n<p>Here\u2019s a step-by-step walkthrough of how to run the code:</p>\n\n<ol>\n  <li>\n    <p>With a Google account, ensure you have access to <a href=\"https://colab.google/\">Colab</a>; this will be the environment we will use to run the Python scripts.</p>\n  </li>\n  <li>\n    <p>Library installation: The script begins with installing the required Python packages:</p>\n    <ul>\n      <li><a href=\"https://pypi.org/project/openai/\">OpenAI</a></li>\n      <li><a href=\"https://panel.holoviz.org/getting_started/installation.html\">Panel</a></li>\n      <li><a href=\"https://pypi.org/project/llama-index/\">LlamaIndex</a></li>\n    </ul>\n  </li>\n</ol>\n\n<p>These packages work with the GPT-3.5 model, create the web interface, and manage the chatbot\u2019s conversation. The LlamaIndex package is only used to read data in the OpenAI implementation of the bot.</p>\n\n<ol>\n  <li>Create an OpenAI account and follow these <a href=\"https://help.openai.com/en/articles/4936850-where-do-i-find-my-api-key\">instructions</a> to obtain an API Key. On line 161 of <code class=\"language-plaintext highlighter-rouge\">GPTChatbot.ipynb</code>, replace the API Key code snippet with your API Key. ChatGPT used to offer free credits to use, but it now costs five or more dollars to purchase API usage.</li>\n</ol>\n\n<p><img alt=\"Image with an arrow pointing to where the OpenAI API key should be added in the code.\" class=\"center-image\" height=\"400\" src=\"https://developer.okta.com/assets-jekyll/blog/okta-documentation-chatbot/openai-api-key-e8d78ac3a43c75963f066dcfa99f4afeb1aa4f02bdbd52a1ffb21045f394d969.jpg\" /></p>\n\n<ol>\n  <li>\n    <p>Download the Okta Developer Documentation files from <a href=\"https://github.com/oktadev/okta-python-chatbot-example/tree/tar-file\">here</a>, and extract the archive. Upload the archive contents to a folder named \u2018oktanaut\u2019 in your Google Drive.<br />\n Make sure the training files are in the <code class=\"language-plaintext highlighter-rouge\">oktanaut</code> folder, not in an additional folder within it. If you change the name of the folder where you keep the files in your Google Drive, update line 167 of <code class=\"language-plaintext highlighter-rouge\">GPTChatbot.ipynb</code> to the correct path.  Alternatively, you can download the files directly from the Okta Developer Documentation Repository, or supply your own custom training data.</p>\n  </li>\n  <li>\n    <p>Run the <code class=\"language-plaintext highlighter-rouge\">GPTChatbot.ipynb</code> notebook in your Colab development environment.</p>\n  </li>\n  <li>\n    <p>After running the script, a web interface displays an input field and a \u201cChat with Oktanaut!\u201d button.</p>\n  </li>\n  <li>\n    <p>Enter your questions about the Okta Developer Documentation in the input field.</p>\n  </li>\n  <li>\n    <p>To submit your question, click the \u201cChat with Oktanaut!\u201d button to begin a conversation with the Python chatbot.</p>\n  </li>\n  <li>\n    <p>Oktanaut will answer your question with an AI-generated response using its knowledge from the developer documentation, training data from internal support engineers, and the OpenAI API. The responses will appear on the web interface in real-time.</p>\n  </li>\n  <li>\n    <p>Continue the conversation by entering additional questions or prompts and clicking the button. The bot will use your questions from earlier in the conversation to improve its understanding of your needs, and provide contextually appropriate answers as you converse with it.</p>\n  </li>\n  <li>\n    <p>To end the session, say \u201cThank you\u201d or leave the web page.</p>\n  </li>\n</ol>\n\n<p><img alt=\"Image of Oktanaut's answer to, 'What is OIDC?'\" class=\"center-image\" height=\"400\" src=\"https://developer.okta.com/assets-jekyll/blog/okta-documentation-chatbot/openai-oidc-1addb48f146ee8edee1d214084a186e452c1aa910212c3f4e73f0bbc605c8e62.jpg\" /></p>\n\n<h2 id=\"further-python-chatbot-improvements\">Further Python Chatbot Improvements</h2>\n<p>I am enthusiastic about enhancing Oktanaut\u2019s training by incorporating information from the Okta Dev Forum and Okta\u2019s Software Developer Kits (SDKs). In the future, I hope to collaborate with the Okta Developer Documentation team to improve information gaps in the documentation. I also want to add a feature to automatically update to the latest version of the Okta Developer Documentation so that the data Oktanaut references is up-to-date and reliable.</p>\n\n<p>Have you thought about building your own chatbot with AI? Would you like to know more about how I built Oktanaut? Let me know in the comments below! Want to stay in touch? Follow our social channels @oktadev on <a href=\"https://twitter.com/oktadev\">Twitter</a> and subscribe to our <a href=\"https://www.youtube.com/c/oktadev\">YouTube</a> channel.</p>\n\n<h2 id=\"python-chatbot-resources\">Python Chatbot Resources</h2>\n<ul>\n  <li><a href=\"https://community.openai.com/t/cheat-sheet-mastering-temperature-and-top-p-in-chatgpt-api-a-few-tips-and-tricks-on-controlling-the-creativity-deterministic-output-of-prompt-responses/172683/10\">Cheat Sheet: Mastering Temperature and Top_p in ChatGPT API (a few tips and tricks on controlling the creativity/deterministic output of prompt responses.)</a></li>\n  <li><a href=\"https://www.coltsteele.com/tips/understanding-openai-s-temperature-parameter\">Understanding OpenAI\u2019s Temperature Parameter</a></li>\n</ul>"
    },
    "published": "Wed, 20 Dec 2023 00:00:00 -0500",
    "published_parsed": [
      2023,
      12,
      20,
      5,
      0,
      0,
      2,
      354,
      0
    ],
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://developer.okta.com/blog/2023/12/20/okta-documentation-chatbot"
      }
    ],
    "link": "https://developer.okta.com/blog/2023/12/20/okta-documentation-chatbot",
    "id": "https://developer.okta.com/blog/2023/12/20/okta-documentation-chatbot",
    "guidislink": false
  }
}