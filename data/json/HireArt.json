{
  "company": "HireArt",
  "title": "HireArt",
  "xmlUrl": "http://code.hireart.com/feed.xml",
  "htmlUrl": "http://code.hireart.com/",
  "content": "Developing our first iOS App with React Native (pt 2) - User Auth | Code at HireArthireart.comCode at HireArtDeveloping our first iOS App with React Native (pt 2) - User AuthTom TangMarch 22, 2016metaIn this post, I will be going through how we setup Authentication for our HireArt Mobile App. If you've missed our first post about why we chose React Native to develop our first iOS app, you can read about it here Before jumping in, I just want to address how we're handling saving to the local device and how we handle API calls. We looked at a bunch of options including flux and redux, but found that they felt like overkill or didn't seem to solve our particular problem. So we went with our own approach of a super simple API/Store. The details of that implementation will be in another post, but for now we'll just assume that there's a module to handle API/Store which we can interact with, and the module is capable of making API calls to our Rails endpoints.  You'll notice right away that this appears to break React's uni-directional flow of data. However, I assure you that it does not. When a view calls an action, that action may interact with the store, server, or both. After which it can either update the state of the view that called it, store the return value to the device, or navigate to a different view. At no point does the Action return a value to the View. We'll start with an overview of the views we use, the methods that support these views, and the react-native npm packages we use to make things easier. Views We have 4 views dedicated to authentication:  Welcome.js - This is the main welcome page which conditionally displays login links if the user is not found/authenticated yet. Authentication.js - The Sign In/Sign Up form lives here along with the FB Login button FbRequirePassword.js - This view, if authenticated from FB and is an existing user, will prompt the user to enter their HireArt password to link to their FB account. ForgotPassword.js - For users who forgot their passwords. Prompts them to enter their email.  Methods We've implemented 3 methods to make our authentication work:  getUser() - Checks local storeage for a user object, returns user if it exists authenticate(userForm) - Invoked after SignIn or SignUp, will send the user info to our Rails endpoint. If it gets a valid user in return, it calls HandleAfterAuth() with the user. handleAfterAuth(user) - Handles navigation after successful authentication. There are three possible outcomes:  Existing User - navigate to Dashboard New User - navigate to Onboarding Facebook Login for Existing User - navigate to FbRequirePassword to link their FB account to their existing HA account.   NPM Packages  tcomb-form-native - really helpful in building forms with some basic validation and keyboard controls. https://www.npmjs.com/package/tcomb-form-native react-native-router-flux - Greatly simplified navigation. https://github.com/aksonov/react-native-router-flux react-native-simple-store - Saving and loading user data to the device was super easy with Simple Store. https://www.npmjs.com/package/react-native-simple-store  Overall Diagram Now that we have a broad overview of the system, I've put together a diagram that shows how it all comes together. Here is an overly complicated diagram showing our authentication process:  The dotted lines indicate view navigation sequence, blues are JS modules, green indicates servers. Load User Using Simple Store, this is quite trivial, just look for the user and if it exists, check to see if it has a valid auth token. Store.get('user').then((user)=> {\n  this._isUserValid(user)\n})\n Sign Up/Sign In Form In the even there is no user, we setup a form using tcomb form requiring tcomb form var t = require('tcomb-form-native')\n setting up form structure var signInUser = t.struct({\n  email: t.Str,\n  password: t.Str,\n})\n\nvar signUpUser = t.struct({\n  first_name: t.Str,\n  last_name: t.Str,\n  email: t.Str,\n  password: t.Str,\n})\n setting form options and keyboard restrictions var options = {\n  auto: 'placeholders',\n  stylesheet: LoginFormStyle,\n  fields: {\n    password: {\n      password: true,\n      secureTextEntry: true,\n    },\n    email: {\n      keyboardType: 'email-address',\n      autoCorrect: false,\n      autoCapitalize: false,\n    },\n    first_name: {\n      autoCorrect: false,\n    },\n    last_name: {\n      autoCorrect: false,\n    },\n  },\n}\n The form itself in render() <Form\n  ref=\"form\"\n  type={formType}\n  options={options}\n  value={this.state.formValue}\n  onChange={this.onChange.bind(this)}\n  />\n<TouchableHighlight\n  style={[Styles.buttonInset, {marginTop: 7}]}\n  onPress={this.handleSubmit.bind(this)}\n  underlayColor='#E3A90C'>\n  <Text style={Styles.buttonText}>{submitText}</Text>\n</TouchableHighlight>\n When the form is submitted handleSubmit() {\n  var value = this.refs.form.getValue()\n  if (value && this.passwordLengthCheck()) {\n    this.setState({\n      isLoading: true,\n    })\n    this._authenticate()\n  } else {\n    if (!this.passwordLengthCheck()) {\n      AlertIOS.alert('Your password needs to be at least 8 characters long.')\n    }\n  }\n}\n Handling authentication _authenticate(parent, user) {\n  var obj = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      user: user,\n    }),\n  }\n  var url = // YOUR ENDPOINT\n  fetch(url, obj)\n    .then((res)=> {\n      return res.json()\n    }).then((json)=> {\n      _handleAfterAuthenticate(parent, json, user)\n    }).catch((error) => {\n      console.warn(error)\n    })\n    .done()\n}\n The handleAfterAuthenticate() method simply saves the user data to the Store and decides which view to show next and navigates to it: Dashboard if existing user, OnBoarding if new user. Facebook Login Integration We used react-native-facebook-login which worked great. It took a few tries to get it setup properly and there are a lot of steps which I won't repeat here. Just make sure you follow every step and if it didn't work, start from the beginning. Thanks for reading and keep an eye out for my next entry on Fetch/API!   Tom Tang leads mobile development at HireArt. Feel free to reach out: tom@hireart.com  Code at HireArt is a blog about programming, technology, and product development. Our goal is to share a bit of what goes on behind the scenes at HireArt and give ourselves the chance to share what we've learned with others.\u00a9 2024 HireArt",
  "latestPost": {
    "title": "Developing our first iOS App with React Native (pt 2) - User Auth",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "http://code.hireart.com/feed.xml",
      "value": "Developing our first iOS App with React Native (pt 2) - User Auth"
    },
    "links": [
      {
        "rel": "alternate",
        "href": "http://code.hireart.com/2016/03/22/react-native-user-login-and-fb-login/",
        "type": "text/html"
      }
    ],
    "link": "http://code.hireart.com/2016/03/22/react-native-user-login-and-fb-login/",
    "id": "http://code.hireart.com/2016/03/22/react-native-user-login-and-fb-login/",
    "guidislink": false,
    "published": "2016-03-22T00:00:00+00:00",
    "published_parsed": [
      2016,
      3,
      22,
      0,
      0,
      0,
      1,
      82,
      0
    ],
    "updated": "2016-03-23T18:51:12+00:00",
    "updated_parsed": [
      2016,
      3,
      23,
      18,
      51,
      12,
      2,
      83,
      0
    ],
    "summary": "<p>In this post, I will be going through how we setup Authentication for our HireArt Mobile App.  If you've missed our first post about why we chose React Native to develop our first iOS app, you can read about it <a href=\"http://code.hireart.com/2016/02/24/react-native-ios-app/\">here</a></p>\n\n<p>Before jumping in, I just want...</p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "http://code.hireart.com/feed.xml",
      "value": "<p>In this post, I will be going through how we setup Authentication for our HireArt Mobile App.  If you've missed our first post about why we chose React Native to develop our first iOS app, you can read about it <a href=\"http://code.hireart.com/2016/02/24/react-native-ios-app/\">here</a></p>\n\n<p>Before jumping in, I just want...</p>"
    },
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "http://code.hireart.com/feed.xml",
        "value": "<p>In this post, I will be going through how we setup Authentication for our HireArt Mobile App.  If you've missed our first post about why we chose React Native to develop our first iOS app, you can read about it <a href=\"http://code.hireart.com/2016/02/24/react-native-ios-app/\">here</a></p>\n\n<p>Before jumping in, I just want to address how we're handling saving to the local device and how we handle API calls.  We looked at a bunch of options including flux and redux, but found that they felt like overkill or didn't seem to solve our particular problem.  So we went with our own approach of a super simple API/Store.  The details of that implementation will be in another post, but for now we'll just assume that there's a module to handle API/Store which we can interact with, and the module is capable of making API calls to our Rails endpoints.</p>\n\n<p><img src=\"http://code.hireart.com/images/20160322/simple-diagram.png\" /></p>\n\n<p>You'll notice right away that this appears to break React's uni-directional flow of data.  However, I assure you that it does not.  When a view calls an action, that action may interact with the store, server, or both.  After which it can either update the state of the view that called it, store the return value to the device, or navigate to a different view.  At no point does the Action return a value to the View.</p>\n\n<p>We'll start with an overview of the views we use, the methods that support these views, and the react-native npm packages we use to make things easier.</p>\n\n<h2 id=\"views\">Views</h2>\n\n<p>We have 4 views dedicated to authentication:</p>\n\n<ol>\n<li><p><strong>Welcome.js</strong> - This is the main welcome page which conditionally displays login links if the user is not found/authenticated yet.</p></li>\n<li><p><strong>Authentication.js</strong> - The Sign In/Sign Up form lives here along with the FB Login button</p></li>\n<li><p><strong>FbRequirePassword.js</strong> - This view, if authenticated from FB and is an existing user, will prompt the user to enter their HireArt password to link to their FB account.</p></li>\n<li><p><strong>ForgotPassword.js</strong> - For users who forgot their passwords.  Prompts them to enter their email.</p></li>\n</ol>\n\n<h2 id=\"methods\">Methods</h2>\n\n<p>We've implemented 3 methods to make our authentication work:</p>\n\n<ol>\n<li><p><strong>getUser()</strong> - Checks local storeage for a user object, returns user if it exists</p></li>\n<li><p><strong>authenticate(userForm)</strong> - Invoked after SignIn or SignUp, will send the user info to our Rails endpoint.  If it gets a valid user in return, it calls <code>HandleAfterAuth()</code> with the user.</p></li>\n<li><p><strong>handleAfterAuth(user)</strong> -\nHandles navigation after successful authentication.  There are three possible outcomes:</p>\n\n<ul>\n<li>Existing User - navigate to Dashboard</li>\n<li>New User - navigate to Onboarding</li>\n<li>Facebook Login for Existing User - navigate to FbRequirePassword to link their FB account to their existing HA account.</li>\n</ul></li>\n</ol>\n\n<h2 id=\"npm-packages\">NPM Packages</h2>\n\n<ol>\n<li><p><strong>tcomb-form-native</strong> - really helpful in building forms with some basic validation and keyboard controls.  <a href=\"https://www.npmjs.com/package/tcomb-form-native\">https://www.npmjs.com/package/tcomb-form-native</a></p></li>\n<li><p><strong>react-native-router-flux</strong> - Greatly simplified navigation.  <a href=\"https://github.com/aksonov/react-native-router-flux\">https://github.com/aksonov/react-native-router-flux</a></p></li>\n<li><p><strong>react-native-simple-store</strong> - Saving and loading user data to the device was super easy with Simple Store.  <a href=\"https://www.npmjs.com/package/react-native-simple-store\">https://www.npmjs.com/package/react-native-simple-store</a></p></li>\n</ol>\n\n<h2 id=\"overall-diagram\">Overall Diagram</h2>\n\n<p>Now that we have a broad overview of the system, I've put together a diagram that shows how it all comes together.</p>\n\n<p>Here is an overly complicated diagram showing our authentication process:</p>\n\n<p><img src=\"http://code.hireart.com/images/20160322/login-diagram.png\" /></p>\n\n<p>The dotted lines indicate view navigation sequence, blues are JS modules, green indicates servers.</p>\n\n<h2 id=\"load-user\">Load User</h2>\n\n<p>Using Simple Store, this is quite trivial, just look for the user and if it exists, check to see if it has a valid auth token.</p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">Store</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">user</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_isUserValid</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre>\n\n<h2 id=\"sign-up/sign-in-form\">Sign Up/Sign In Form</h2>\n\n<p>In the even there is no user, we setup a form using tcomb form</p>\n\n<p>requiring tcomb form</p>\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'tcomb-form-native'</span><span class=\"p\">)</span>\n</code></pre>\n\n<p>setting up form structure</p>\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">signInUser</span> <span class=\"o\">=</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">struct</span><span class=\"p\">({</span>\n  <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n  <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">signUpUser</span> <span class=\"o\">=</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">struct</span><span class=\"p\">({</span>\n  <span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n  <span class=\"na\">last_name</span><span class=\"p\">:</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n  <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n  <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</code></pre>\n\n<p>setting form options and keyboard restrictions</p>\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">auto</span><span class=\"p\">:</span> <span class=\"s1\">'placeholders'</span><span class=\"p\">,</span>\n  <span class=\"na\">stylesheet</span><span class=\"p\">:</span> <span class=\"nx\">LoginFormStyle</span><span class=\"p\">,</span>\n  <span class=\"na\">fields</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"na\">secureTextEntry</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">keyboardType</span><span class=\"p\">:</span> <span class=\"s1\">'email-address'</span><span class=\"p\">,</span>\n      <span class=\"na\">autoCorrect</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">autoCapitalize</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">autoCorrect</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">last_name</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">autoCorrect</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n<p>The form itself in <code>render()</code></p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;Form</span>\n  <span class=\"na\">ref=</span><span class=\"s\">\"form\"</span>\n  <span class=\"na\">type=</span><span class=\"s\">{formType}</span>\n  <span class=\"na\">options=</span><span class=\"s\">{options}</span>\n  <span class=\"na\">value=</span><span class=\"s\">{this.state.formValue}</span>\n  <span class=\"na\">onChange=</span><span class=\"s\">{this.onChange.bind(this)}</span>\n  <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;TouchableHighlight</span>\n  <span class=\"na\">style=</span><span class=\"s\">{[Styles.buttonInset,</span> <span class=\"err\">{</span><span class=\"na\">marginTop:</span> <span class=\"na\">7</span><span class=\"err\">}]}</span>\n  <span class=\"na\">onPress=</span><span class=\"s\">{this.handleSubmit.bind(this)}</span>\n  <span class=\"na\">underlayColor=</span><span class=\"s\">'#E3A90C'</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;Text</span> <span class=\"na\">style=</span><span class=\"s\">{Styles.buttonText}</span><span class=\"nt\">&gt;</span>{submitText}<span class=\"nt\">&lt;/Text&gt;</span>\n<span class=\"nt\">&lt;/TouchableHighlight&gt;</span>\n</code></pre>\n\n<p>When the form is submitted</p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">handleSubmit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">getValue</span><span class=\"p\">()</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">passwordLengthCheck</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_authenticate</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">passwordLengthCheck</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"nx\">AlertIOS</span><span class=\"p\">.</span><span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">'Your password needs to be at least 8 characters long.'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n<p>Handling authentication</p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">_authenticate</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'POST'</span><span class=\"p\">,</span>\n    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'Accept'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n      <span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"nx\">user</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n  <span class=\"p\">}</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"c1\">// YOUR ENDPOINT</span>\n  <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">obj</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()</span>\n    <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">json</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">_handleAfterAuthenticate</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"nx\">json</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">)</span>\n    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n<p>The <code>handleAfterAuthenticate()</code> method simply saves the user data to the Store and decides which view to show next and navigates to it:  Dashboard if existing user, OnBoarding if new user.</p>\n\n<h2 id=\"facebook-login-integration\">Facebook Login Integration</h2>\n\n<p>We used <a href=\"https://github.com/magus/react-native-facebook-login\">react-native-facebook-login</a> which worked great.  It took a few tries to get it setup properly and there are a lot of steps which I won't repeat here.  Just make sure you follow every step and if it didn't work, start from the beginning.</p>\n\n<p>Thanks for reading and keep an eye out for my next entry on Fetch/API!</p>\n\n<hr />\n\n<p><img src=\"http://code.hireart.com/images/tom-profile.png\" /></p>\n\n<p>Tom Tang leads mobile development at HireArt.  Feel free to reach out: <a href=\"mailto:tom@hireart.com\">tom@hireart.com</a></p>"
      }
    ]
  }
}