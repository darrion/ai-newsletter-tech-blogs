{
  "company": "Kogan.com",
  "title": "Kogan.com",
  "xmlUrl": "https://devblog.kogan.com/blog?format=RSS",
  "htmlUrl": "https://devblog.kogan.com/",
  "content": "\n\n\n\n\n\n\n\nDecreasing CI Build times up to 50% by caching derived data using github actions.  \u2014 Kogan.com Dev Blog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                Project Spotlight\n              \n\n\n\n              Process\n            \n\n\n\n                Dev Blog\n              \n\n\n\n\n\n\n\nKogan.com Dev Blog\n\n\n\n\n\n                Project Spotlight\n              \n\n\n\n              Process\n            \n\n\n\n                Dev Blog\n              \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter\nAllCultureDjangoEvents & CommunityHack DaysLearning & GrowthProcessProject SpotlightReact\n\n\n\n\n\n\n\n\nOctober  4, 2023\n\n\n\nGareth Lloyd\n\n\n\nDecreasing CI Build times up to 50% by caching derived data using github actions. \n\n\n\nOctober  4, 2023\n\n\n\nGareth Lloyd\n\n\n\n\nWe had a problem. Our CI pipeline was increasingly becoming a bottleneck in our iOS continuous integration. We here at Kogan like to develop at a fast pace, however we were constantly being held up waiting for builds to complete, leading to a lot of frustration within the team. The rest of the engineering team had switched to using Github Actions(GHA), and with us still using CircleCI, it was time for us to make the change. This was the perfect time for us to re-evaluate how our pipeline was working, to ensure it was the most efficient that it can be. With a build time of over 30 minutes currently, there was a lot of room for improvement. \nAs we were making a switch, we brainstormed some ideas of ways to improve the overall efficiency of our pipeline, and we kept returning to Derived data. This is how Apple handles build caching within Xcode, but could we use this within our CI Pipeline? Through a bit of investigation, it turns out we weren\u2019t the first to have this thought, and we used this blog post (https://michalzaborowski.medium.com/circleci-60-faster-builds-use-xcode-deriveddata-for-caching-96fb9a58930) as a base for our improvement.\nSo, where to begin? We first started by replicating our current CI pipeline to GHA, which was pretty smooth other than a few challenges trying to access some of our private repositories. Our build times with this switch had slightly improved, but were still regularly more than 30 minutes to complete. We were already caching the swift packages we use in the project, however there was still plenty of room for improvement.\nFirst we need to ensure that we have fetched the latest changes to the repository, which can be done simply by using the option fetch-depth: 0 on the checkout action in our existing initial step.\n\n\nuses: actions/checkout@v4\nwith:\ntoken: ${{ secrets.GITHUB_TOKEN }}\nfetch-depth: 0\n\n\nWe then need to cache the derived data. We need to do this in two parts - caching the derived data when a pull request has been successfully merged, and then also restoring the latest derived data cache to the CI pipeline whenever a pull request is opened. \nIn order to identify the latest develop commit, we use the GHA marketplace action which finds and creates a variable to be used for the latest develop commit SHA.\n\n\nname: Create variable for the nearest develop commit SHA\nuses: nrwl/nx-set-shas@v3\nwith: \nmain-branch-name: 'develop'\n\n\nThen, we need to create a separate pipeline, which will be used to save the derived data whenever a pull request is successfully saved to develop. This will be a very similar flow to our original however the difference will be that we save the cache at the end like the below. This will cache the tmp/derived-data file (which we have set to be the location of derived data in fastlane) to be stored against the latest develop commit SHA.\n\n\nuses: actions/cache/save@v3\nname: Save Derived Data Cache\nwith:\npath: tmp/derived-data\nkey: v1-derived-data-cache-${{ steps.setSHAs.outputs.head }}\n\n\nNext we need to get the correct cached derived data in our CI pipeline for pull requests. We need to again use the latest develop commit SHA to find the correct derived data cache. We use the restore version of the same action used above in order to find the right cache. This will either find a cache with an exact match, or it will fall back and use the most recent derived data with a partial match.\n\n\nuses: actions/cache/restore@v3\nname: Restore Derived Data Cache\nwith:\npath: tmp/derived-data\nkey: |\nv1-derived-data-cache-${{ steps.setSHAs.outputs.head }}\nv1-derived-data-cache-\n\n\nSimilar to the mentioned blog post, GHA will also set the last modified time to be the time that the file was cloned. As Xcode is using this time, we need to update this in order to take advantage of the derived data caching. We managed to find a GHA marketplace action which allowed us to do this.\n\n\nname: Update mtime for incremental builds\nuses: chetan/git-restore-mtime-action@v2\n\n\nLast but not least, we need to set the IgnoreFileSystemDeviceInodeChanges=YES in order to ensure Xcode does not consider our cached derived data to be out of date.\n\n\nname: Set IgnoreFileSystemDeviceInodeChanges flag\nrun: defaults write com.apple.dt.XCBuild IgnoreFileSystemDeviceInodeChanges -bool YES\n\n\nNow that is all complete, we have successfully sped up our CI Pipelines, and decreased our build times by up to 50%. Before we started with CircleCI we were regularly exceeding 30 mins, and after caching derived data and switching to GHA, we got our builds down to roughly 15 mins. This is a massive improvement and has definitely made us developers much happier!\nLooking forward we do want to carry on improving our pipeline, and are always looking for ways to keep it up to date, and as fast as it can be. One problem we have encountered using this caching method is that there is no way to clear cache fully and force the build to run without the cached data in case of any build problems other than manually deleting each cache individually. This can be time consuming so we would like to investigate this further and try to find ways to mitigate this.\n\n\n\n\n\nOctober  4, 2023\n\n\n\nGareth Lloyd\n\n\n\n\n\n\n\n\n\n\n\n\nGareth Lloyd\n\n\n\n\n\n\n\nProject Spotlight: Optimizing ChannelAdvisor Integration: Real-Time Product Catalog Synchronization\n\n\n\n\n\n\n\n\n\n\nGet news and updates\n\n\n\n\n\nEmail Address\n\n\n\n\n\n\nSign Up\n\n\n\n\n\n\nThank you!Interested in being a part of the Kogan.com development team?Check out our careers site here.\n\n\n\n\n\n\n\n\nBack To Top\n\n\nLike the sound of how we work? Check out our Careers Page!\u00a0\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "Decreasing CI Build times up to 50% by caching derived data using github actions.",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://devblog.kogan.com/blog?format=RSS",
      "value": "Decreasing CI Build times up to 50% by caching derived data using github actions."
    },
    "authors": [
      {
        "name": "Gareth Lloyd"
      }
    ],
    "author": "Gareth Lloyd",
    "author_detail": {
      "name": "Gareth Lloyd"
    },
    "published": "Wed, 04 Oct 2023 05:16:00 +0000",
    "published_parsed": [
      2023,
      10,
      4,
      5,
      16,
      0,
      2,
      277,
      0
    ],
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://devblog.kogan.com/blog/decreasing-ci-build-times-up-to-50-by-caching-derived-data-using-github-actions"
      }
    ],
    "link": "https://devblog.kogan.com/blog/decreasing-ci-build-times-up-to-50-by-caching-derived-data-using-github-actions",
    "id": "5664c2f3e4b0957c43aa14f4:5666531469a91a17ec801e9c:651cf4540ffe8f1059b23b86",
    "guidislink": false,
    "summary": "<p>We had a problem. Our CI pipeline was increasingly becoming a bottleneck in our iOS continuous integration. We here at Kogan like to develop at a fast pace, however we were constantly being held up waiting for builds to complete, leading to a lot of frustration within the team. The rest of the engineering team had switched to using Github Actions(GHA), and with us still using CircleCI, it was time for us to make the change. This was the perfect time for us to re-evaluate how our pipeline was working, to ensure it was the most efficient that it can be. With a build time of over 30 minutes currently, there was a lot of room for improvement. </p>\n<p>As we were making a switch, we brainstormed some ideas of ways to improve the overall efficiency of our pipeline, and we kept returning to Derived data. This is how Apple handles build caching within Xcode, but could we use this within our CI Pipeline? Through a bit of investigation, it turns out we weren\u2019t the first to have this thought, and we used this blog post (<a href=\"https://michalzaborowski.medium.com/circleci-60-faster-builds-use-xcode-deriveddata-for-caching-96fb9a58930\">https://michalzaborowski.medium.com/circleci-60-faster-builds-use-xcode-deriveddata-for-caching-96fb9a58930</a>) as a base for our improvement.</p>\n<p>So, where to begin? We first started by replicating our current CI pipeline to GHA, which was pretty smooth other than a few challenges trying to access some of our private repositories. Our build times with this switch had slightly improved, but were still regularly more than 30 minutes to complete. We were already caching the swift packages we use in the project, however there was still plenty of room for improvement.</p>\n<p>First we need to ensure that we have fetched the latest changes to the repository, which can be done simply by using the option <code>fetch-depth: 0</code> on the checkout action in our existing initial step.</p>\n<blockquote>\n<ul>\n<li>uses: actions/checkout@v4\nwith:\ntoken: ${{ secrets.GITHUB_TOKEN }}\nfetch-depth: 0</li>\n</ul>\n</blockquote>\n<p>We then need to cache the derived data. We need to do this in two parts - caching the derived data when a pull request has been successfully merged, and then also restoring the latest derived data cache to the CI pipeline whenever a pull request is opened. </p>\n<p>In order to identify the latest develop commit, we use the GHA marketplace action which finds and creates a variable to be used for the latest develop commit SHA.</p>\n<blockquote>\n<ul>\n<li>name: Create variable for the nearest develop commit SHA\nuses: nrwl/nx-set-shas@v3\nwith: \nmain-branch-name: 'develop'</li>\n</ul>\n</blockquote>\n<p>Then, we need to create a separate pipeline, which will be used to save the derived data whenever a pull request is successfully saved to develop. This will be a very similar flow to our original however the difference will be that we save the cache at the end like the below. This will cache the tmp/derived-data file (which we have set to be the location of derived data in fastlane) to be stored against the latest develop commit SHA.</p>\n<blockquote>\n<ul>\n<li>uses: actions/cache/save@v3\nname: Save Derived Data Cache\nwith:\npath: tmp/derived-data\nkey: v1-derived-data-cache-${{ steps.setSHAs.outputs.head }}</li>\n</ul>\n</blockquote>\n<p>Next we need to get the correct cached derived data in our CI pipeline for pull requests. We need to again use the latest develop commit SHA to find the correct derived data cache. We use the restore version of the same action used above in order to find the right cache. This will either find a cache with an exact match, or it will fall back and use the most recent derived data with a partial match.</p>\n<blockquote>\n<ul>\n<li>uses: actions/cache/restore@v3\nname: Restore Derived Data Cache\nwith:\npath: tmp/derived-data\nkey: |\nv1-derived-data-cache-${{ steps.setSHAs.outputs.head }}\nv1-derived-data-cache-</li>\n</ul>\n</blockquote>\n<p>Similar to the mentioned blog post, GHA will also set the last modified time to be the time that the file was cloned. As Xcode is using this time, we need to update this in order to take advantage of the derived data caching. We managed to find a GHA marketplace action which allowed us to do this.</p>\n<blockquote>\n<ul>\n<li>name: Update mtime for incremental builds\nuses: chetan/git-restore-mtime-action@v2</li>\n</ul>\n</blockquote>\n<p>Last but not least, we need to set the IgnoreFileSystemDeviceInodeChanges=YES in order to ensure Xcode does not consider our cached derived data to be out of date.</p>\n<blockquote>\n<ul>\n<li>name: Set IgnoreFileSystemDeviceInodeChanges flag\nrun: defaults write com.apple.dt.XCBuild IgnoreFileSystemDeviceInodeChanges -bool YES</li>\n</ul>\n</blockquote>\n<p>Now that is all complete, we have successfully sped up our CI Pipelines, and decreased our build times by up to 50%. Before we started with CircleCI we were regularly exceeding 30 mins, and after caching derived data and switching to GHA, we got our builds down to roughly 15 mins. This is a massive improvement and has definitely made us developers much happier!</p>\n<p>Looking forward we do want to carry on improving our pipeline, and are always looking for ways to keep it up to date, and as fast as it can be. One problem we have encountered using this caching method is that there is no way to clear cache fully and force the build to run without the cached data in case of any build problems other than manually deleting each cache individually. This can be time consuming so we would like to investigate this further and try to find ways to mitigate this.</p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://devblog.kogan.com/blog?format=RSS",
      "value": "<p>We had a problem. Our CI pipeline was increasingly becoming a bottleneck in our iOS continuous integration. We here at Kogan like to develop at a fast pace, however we were constantly being held up waiting for builds to complete, leading to a lot of frustration within the team. The rest of the engineering team had switched to using Github Actions(GHA), and with us still using CircleCI, it was time for us to make the change. This was the perfect time for us to re-evaluate how our pipeline was working, to ensure it was the most efficient that it can be. With a build time of over 30 minutes currently, there was a lot of room for improvement. </p>\n<p>As we were making a switch, we brainstormed some ideas of ways to improve the overall efficiency of our pipeline, and we kept returning to Derived data. This is how Apple handles build caching within Xcode, but could we use this within our CI Pipeline? Through a bit of investigation, it turns out we weren\u2019t the first to have this thought, and we used this blog post (<a href=\"https://michalzaborowski.medium.com/circleci-60-faster-builds-use-xcode-deriveddata-for-caching-96fb9a58930\">https://michalzaborowski.medium.com/circleci-60-faster-builds-use-xcode-deriveddata-for-caching-96fb9a58930</a>) as a base for our improvement.</p>\n<p>So, where to begin? We first started by replicating our current CI pipeline to GHA, which was pretty smooth other than a few challenges trying to access some of our private repositories. Our build times with this switch had slightly improved, but were still regularly more than 30 minutes to complete. We were already caching the swift packages we use in the project, however there was still plenty of room for improvement.</p>\n<p>First we need to ensure that we have fetched the latest changes to the repository, which can be done simply by using the option <code>fetch-depth: 0</code> on the checkout action in our existing initial step.</p>\n<blockquote>\n<ul>\n<li>uses: actions/checkout@v4\nwith:\ntoken: ${{ secrets.GITHUB_TOKEN }}\nfetch-depth: 0</li>\n</ul>\n</blockquote>\n<p>We then need to cache the derived data. We need to do this in two parts - caching the derived data when a pull request has been successfully merged, and then also restoring the latest derived data cache to the CI pipeline whenever a pull request is opened. </p>\n<p>In order to identify the latest develop commit, we use the GHA marketplace action which finds and creates a variable to be used for the latest develop commit SHA.</p>\n<blockquote>\n<ul>\n<li>name: Create variable for the nearest develop commit SHA\nuses: nrwl/nx-set-shas@v3\nwith: \nmain-branch-name: 'develop'</li>\n</ul>\n</blockquote>\n<p>Then, we need to create a separate pipeline, which will be used to save the derived data whenever a pull request is successfully saved to develop. This will be a very similar flow to our original however the difference will be that we save the cache at the end like the below. This will cache the tmp/derived-data file (which we have set to be the location of derived data in fastlane) to be stored against the latest develop commit SHA.</p>\n<blockquote>\n<ul>\n<li>uses: actions/cache/save@v3\nname: Save Derived Data Cache\nwith:\npath: tmp/derived-data\nkey: v1-derived-data-cache-${{ steps.setSHAs.outputs.head }}</li>\n</ul>\n</blockquote>\n<p>Next we need to get the correct cached derived data in our CI pipeline for pull requests. We need to again use the latest develop commit SHA to find the correct derived data cache. We use the restore version of the same action used above in order to find the right cache. This will either find a cache with an exact match, or it will fall back and use the most recent derived data with a partial match.</p>\n<blockquote>\n<ul>\n<li>uses: actions/cache/restore@v3\nname: Restore Derived Data Cache\nwith:\npath: tmp/derived-data\nkey: |\nv1-derived-data-cache-${{ steps.setSHAs.outputs.head }}\nv1-derived-data-cache-</li>\n</ul>\n</blockquote>\n<p>Similar to the mentioned blog post, GHA will also set the last modified time to be the time that the file was cloned. As Xcode is using this time, we need to update this in order to take advantage of the derived data caching. We managed to find a GHA marketplace action which allowed us to do this.</p>\n<blockquote>\n<ul>\n<li>name: Update mtime for incremental builds\nuses: chetan/git-restore-mtime-action@v2</li>\n</ul>\n</blockquote>\n<p>Last but not least, we need to set the IgnoreFileSystemDeviceInodeChanges=YES in order to ensure Xcode does not consider our cached derived data to be out of date.</p>\n<blockquote>\n<ul>\n<li>name: Set IgnoreFileSystemDeviceInodeChanges flag\nrun: defaults write com.apple.dt.XCBuild IgnoreFileSystemDeviceInodeChanges -bool YES</li>\n</ul>\n</blockquote>\n<p>Now that is all complete, we have successfully sped up our CI Pipelines, and decreased our build times by up to 50%. Before we started with CircleCI we were regularly exceeding 30 mins, and after caching derived data and switching to GHA, we got our builds down to roughly 15 mins. This is a massive improvement and has definitely made us developers much happier!</p>\n<p>Looking forward we do want to carry on improving our pipeline, and are always looking for ways to keep it up to date, and as fast as it can be. One problem we have encountered using this caching method is that there is no way to clear cache fully and force the build to run without the cached data in case of any build problems other than manually deleting each cache individually. This can be time consuming so we would like to investigate this further and try to find ways to mitigate this.</p>"
    }
  }
}