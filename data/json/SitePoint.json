{
  "company": "SitePoint",
  "title": "SitePoint",
  "xmlUrl": "https://www.sitepoint.com/feed/",
  "htmlUrl": "https://sitepoint.com",
  "content": "Brighten Up Your Astro Site with KwesForms and Rive \u00e2\u0080\u0094 SitePointSitePointBlogFree Tech Books \u00e2\u0086\u0092AI \u00e2\u0086\u0092JavaScript Computing Design & UX HTML & CSS Entrepreneur Web PHP WordPress Mobile Programming Python \u00e2\u0086\u0092ForumLibraryLoginJoin PremiumJoin PremiumFree Tech BooksAIJavaScriptComputingDesign & UXHTML & CSSEntrepreneurWebPHPWordPressMobileProgrammingPythonJavaScriptBrighten Up Your Astro Site with KwesForms and RiveCMSPaul ScanlonJanuary 18, 2024Share\nIn this article, I\u00e2\u0080\u0099ll show you how to add KwesForms to your Astro site and then bring the form to life using custom events and Rive.\n\nCustom events can be used to control the different states of a Rive animation whenever an \u00e2\u0080\u009cevent\u00e2\u0080\u009d in the form occurs. This could be when a field becomes invalid, or when the form has been successfully submitted.\nIf you\u00e2\u0080\u0099re keen to jump ahead, I\u00e2\u0080\u0099ve created an example repo containing all the code, and a live preview:\n\n\u00f0\u009f\u009a\u0080 Preview\n\u00e2\u009a\u0099\u00ef\u00b8\u008f Repository \n\n\nTable of Contents\n\nGetting Started with Astro\n\nCreate a page\nCreate a component\nAdd the component to the page\n\n\nGetting Started with KwesForms\n\nAdding KwesFroms script to Astro\nAdding KwesForms HTML\n\n\nWhat is Rive?\n\nModifying Astro\u00e2\u0080\u0099s Vite config\nDownload Rive animation\n\n\nInitializing Rive\n\nRive state machines\n\n\nAdding Event Listeners\nTriggering Rive State Machines from Form Events\n\nCreating a getTrigger function\n\n\nCalling a Trigger from an Event Listener\nConclusion\n\n\nGetting Started with Astro\nTo get started with Astro, you have a couple of options. You can either follow the guidelines for installing Astro with the Automatic CLI, or (my preferred approach) install Astro manually.\nCreate a page\nIf you\u00e2\u0080\u0099ve installed Astro manually, create a new file called index.astro in the following directory: src/pages.\nCreate a component\nCreate a new file called rive-form.astro in the src/components directory.\nAdd the component to the page\nAdd the following to render the RiveForm component in the index page:\n// src/pages/index.astro\n\n---\nimport RiveForm from '../components/rive-form.astro';\n---\n\n<RiveForm />\n\nFor the rest of this article, I\u00e2\u0080\u0099ll be adding code to the rive-form.astro file.\nThe src can be seen in the repo here: rive-kwes-forms/src/pages/index.astro.\nGetting Started with KwesForms\nI used KwesForms for a client project recently, and loved the experience. There are, of course, many ways to handle form data, but I found using KwesForms really helped simplify the requirement to have both client- and server-side validation!\nTo get started, go ahead and sign up (it\u00e2\u0080\u0099s free). There are two ways to include the KwesFroms code in your site: you can either install via npm, or use a script element. In this example, I\u00e2\u0080\u0099ll be using the script element.\n\nThe remaining five steps in the setup section will guide you through how to add an HTML form element to your site.\nAdding KwesFroms script to Astro\nWhen using client-sides scripts with Astro, you might want to opt out of processing using the is:inline directive. This tells Astro to leave the script alone and to render it in the HTML as a script element.\nIn your rive-form.astro file, add the following:\n// src/components/rive-form.astro\n\n- <script src='https://kwesforms.com/v2/kwes-script.js' defer></script>\n+ <script is:inline src='https://kwesforms.com/v2/kwes-script.js' defer></script>\n\nAdding KwesForms HTML\nHere\u00e2\u0080\u0099s the code I\u00e2\u0080\u0099ve used in the example (using Tailwind):\n// src/components/rive-form.astro\n\n<script is:inline src=\"https://kwesforms.com/v2/kwes-script.js\" defer></script>\n\n<form\n  id=\"riveForm\"\n  class=\"kwes-form flex flex-col gap-6\"\n  action=\"https://kwesforms.com/api/foreign/forms/abc123\"\n  data-kw-no-reload\n>\n  <div class=\"flex gap-4\">\n    <div class=\"grow\">\n      <label for=\"name\">Name</label>\n      <input id=\"riveFormName\" type=\"text\" name=\"name\" data-kw-rules=\"required\" />\n    </div>\n    <div class=\"grow\">\n      <label for=\"email\">Email</label>\n      <input id=\"riveFormEmail\" type=\"email\" name=\"email\" data-kw-rules=\"required|email\" required />\n    </div>\n  </div>\n  <div>\n    <label for=\"name\">Message</label>\n    <textarea id=\"riveFormMessage\" name=\"message\" rows=\"4\" data-kw-rules=\"required\"></textarea>\n  </div>\n  <button type=\"submit\">Send Message</button>\n</form>\n\nThe src can be seen in the repo here: rive-kwes-forms/src/components.rive-form.astro.\nThere are a couple of attributes that I\u00e2\u0080\u0099ve used to configure my form. You\u00e2\u0080\u0099ll notice on all of the inputs I\u00e2\u0080\u0099ve added the following: data-kw-rules='required'. This tells KwesFroms that these fields must contain a value before the form can be considered valid. I\u00e2\u0080\u0099ve used an additional attribute on the email field to ensure only valid email addresses are used \u00e2\u0080\u0094 for example, data-kw-rules='required|email'.\nYou can see all the validation rules in the KwesForms form documentation.\nWith the form set up, it\u00e2\u0080\u0099s now time to add a Rive animation.\nWhat is Rive?\nRive is super cool, as it allows designers and animators to create an animation using a browser-based interface, and once it\u00e2\u0080\u0099s complete, developers can simply download a file.\nModifying Astro\u00e2\u0080\u0099s Vite config\nTo use a .riv file with Astro, there\u00e2\u0080\u0099s a small amount of config required so the Astro compiler knows what to do with files that end in .riv.\nTo use Rive with Astro, add the following to your astro.config.mjs file:\n// astro.config.mjs\n\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  vite: {\n    assetsInclude: ['**/*.riv'],\n  },\n});\n\nDownload Rive animation\nThe next step is to find a Rive animation to use, or, if you\u00e2\u0080\u0099re feeling creative you can create your own. There are loads of community examples that can be downloaded and used for free.\nThe file I\u00e2\u0080\u0099m using, Animated Login Character, was created by Juan Carlos Cruz from the Rive team. To get started, download the file and save it in your public directory.\nI\u00e2\u0080\u0099ve saved mine in public/rive/2244-7248-animated-login-character.riv.\nThe src can be seen in the repo here: rive-kwes-forms/public/rive.\nInitializing Rive\nTo initialize the Rive canvas, add the following to your rive-form.astro file:\n// src/components/rive-form.astro\n\n<script>\n  const r = new rive.Rive({\n    src: '/rive/2244-7248-animated-login-character.riv',\n    canvas: document.getElementById('canvas'),\n    autoplay: true,\n    stateMachines: 'Login Machine',\n  });\n</script>\n<script is:inline src=\"https://unpkg.com/@rive-app/canvas@2.7.0\"></script>\n<canvas id=\"canvas\" width=\"800\" height=\"600\"></canvas>\n\nThe next part involves adding event listeners to each of the form elements so they can kick the Rive animation into its different animation states.\nRive state machines\nYou\u00e2\u0080\u0099ll see on the download page that this animation has a number of \u00e2\u0080\u009cstates\u00e2\u0080\u009d defined. These are the different states of the animation that can be triggered when certain form events occur.\n\nRive state machines can be one of the following types:\n\na trigger that has a fire() function\na number that has a value number property\na Boolean that has a value Boolean property\n\nThe type of state machines defined in an animation will determine how you invoke them from your form\u00e2\u0080\u0099s event listeners. (I\u00e2\u0080\u0099ll come back to this in just a moment.)\nAdding Event Listeners\nI\u00e2\u0080\u0099ve given each field in the form an id attribute, and from here I can attach the required event listeners for each event I\u00e2\u0080\u0099d like to tap into.\nThese events are specific to KwesForms. You can see all the custom events in the KwesForms documentation. Here\u00e2\u0080\u0099s the code for the form:\nconst form = document.getElementById('riveForm');\n\nform.addEventListener('kwSubmitted', function () {\n  console.log('form: kwSubmitted');\n});\n\nform.addEventListener('kwHasErrors', () => {\n  console.log('form: kwHasErrors');\n});\n\nAnd here\u00e2\u0080\u0099s the code for the email field. These are the standard JavaScript events for focus and blur. I\u00e2\u0080\u0099ve added the same for the name and message fields:\nconst name = document.getElementById('riveFormName');\n\nname.addEventListener('focus', () => {\n  console.log('name: focus');\n});\n\nname.addEventListener('blur', () => {\n  console.log('name: blur');\n});\n\nTriggering Rive State Machines from Form Events\nThis is where everything comes together. Whenever a form event occurs, I can invoke one of the states from the animation.\nCreating a getTrigger function\nJust underneath the initialization code, add the following code snippet:\n<script>\n  const r = new rive.Rive({\n  ...\n\n+  const getTrigger = (name) => {\n+    return r.stateMachineInputs('Login Machine').find((input) => input.name === name);\n+  };\n\n</script>\n\nThis function accepts a name parameter. This is the name of the state as seen earlier on the download page. The function returns an instance of Rive\u00e2\u0080\u0099s stateMachineInputs, which allows values to be set, which in turn kicks the animation into its different states.\nCalling a Trigger from an Event Listener\nWhenever the form has errors, I hook into the KwesForms kwHasErrors event and call the trigFail trigger using the fire function:\nform.addEventListener('kwHasErrors', () => {\n  console.log('form: kwHasErrors');\n+  const trigger = getTrigger('trigFail');\n+  trigger.fire();\n});\n\nWhenever the name field receives focus, I set isChecking to true, and wherever the name field is blurred, I set isChecking to false:\nname.addEventListener('focus', () => {\n  console.log('name: focus');\n+  const trigger = getTrigger('isChecking');\n+  trigger.value = true;\n});\n\nname.addEventListener('blur', () => {\n  console.log('name: blur');\n+  const trigger = getTrigger('isChecking');\n+  trigger.value = false;\n});\n\nWhenever the email field receives focus, I set isHandsUp to true, and whenever the email field is blurred, I set isHandsUp to false:\nemail.addEventListener('focus', () => {\n  console.log('email: focus');\n+  const trigger = getTrigger('isHandsUp');\n+  trigger.value = true;\n});\n\nemail.addEventListener('blur', () => {\n  console.log('email: blur');\n+  const trigger = getTrigger('isHandsUp');\n+  trigger.value = false;\n})\n\n\nConclusion\nBy using a combination of KwesForms events and standard JavaScript events with Rive animations, form errors can be surfaced in just about any way you can imagine.\nIf you have any questions relating to anything I\u00e2\u0080\u0099ve covered in this post, feel free to come find me on Twitter/X: PaulieScanlon.\nWant more info on Astro? Check out out our brand new book on SitePoint Premium: Unleashing the Power of Astro, by Tamas Piros, which will show you how to get the most out of the most out of this modern all-in-one framework to build faster, content-focused websites\nShare This ArticlePaul ScanlonPaul is a Senior Software Engineer, Independent Developer Advocate and Technical Writer. More from Paul can be found on his site, paulie.dev.AstroStuff we doPremiumNewslettersForumsAboutOur storyTerms of usePrivacy policyCorporate membershipsContactContact usFAQPublish your book with usWrite an article for usAdvertiseConnect\u00c2\u00a9 2000 \u00e2\u0080\u0093 2024 SitePoint Pty. Ltd.This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply.<img\n  height=\"1\"\n  width=\"1\"\n  style=\"display:none\"\n  src=\"https://www.facebook.com/tr?id=721455246308784&ev=PageView&noscript=1\"}\n/>",
  "latestPost": {
    "title": "Brighten Up Your Astro Site with KwesForms and Rive",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://www.sitepoint.com/sitepoint.rss",
      "value": "Brighten Up Your Astro Site with KwesForms and Rive"
    },
    "summary": "<a href=\"https://www.sitepoint.com/astro-kwesforms-rive/?utm_source=rss\" rel=\"nofollow\" title=\"Brighten Up Your Astro Site with KwesForms and Rive\">\n              <img alt=\"Animate Your Astro Forms with KwesForms and Rive\" class=\"webfeedsFeaturedVisual\" src=\"https://uploads.sitepoint.com/wp-content/uploads/2024/01/1704754540forms-astro-kwes-rive.jpg\" style=\"display: block; margin: auto; margin-bottom: 5px;\" />\n            </a>\n            Learn how to add KwesForms, a form backend for web devs, to your Astro site, and then bring the form to life using custom events and Rive.\n            <p>\n              Continue reading\n              <a href=\"https://www.sitepoint.com/astro-kwesforms-rive/?utm_source=rss\" rel=\"nofollow\">Brighten Up Your Astro Site with KwesForms and Rive</a>\n              on <a href=\"https://www.sitepoint.com\" rel=\"nofollow\">SitePoint</a>.\n            </p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://www.sitepoint.com/sitepoint.rss",
      "value": "<a href=\"https://www.sitepoint.com/astro-kwesforms-rive/?utm_source=rss\" rel=\"nofollow\" title=\"Brighten Up Your Astro Site with KwesForms and Rive\">\n              <img alt=\"Animate Your Astro Forms with KwesForms and Rive\" class=\"webfeedsFeaturedVisual\" src=\"https://uploads.sitepoint.com/wp-content/uploads/2024/01/1704754540forms-astro-kwes-rive.jpg\" style=\"display: block; margin: auto; margin-bottom: 5px;\" />\n            </a>\n            Learn how to add KwesForms, a form backend for web devs, to your Astro site, and then bring the form to life using custom events and Rive.\n            <p>\n              Continue reading\n              <a href=\"https://www.sitepoint.com/astro-kwesforms-rive/?utm_source=rss\" rel=\"nofollow\">Brighten Up Your Astro Site with KwesForms and Rive</a>\n              on <a href=\"https://www.sitepoint.com\" rel=\"nofollow\">SitePoint</a>.\n            </p>"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://www.sitepoint.com/astro-kwesforms-rive/?utm_source=rss"
      }
    ],
    "link": "https://www.sitepoint.com/astro-kwesforms-rive/?utm_source=rss",
    "id": "/?p=439971",
    "guidislink": false,
    "tags": [
      {
        "term": "CMS",
        "scheme": null,
        "label": null
      },
      {
        "term": "JavaScript",
        "scheme": null,
        "label": null
      },
      {
        "term": "Web",
        "scheme": null,
        "label": null
      }
    ],
    "authors": [
      {
        "name": "Paul Scanlon"
      }
    ],
    "author": "Paul Scanlon",
    "author_detail": {
      "name": "Paul Scanlon"
    },
    "published": "Wed, 17 Jan 2024 21:25:39 GMT",
    "published_parsed": [
      2024,
      1,
      17,
      21,
      25,
      39,
      2,
      17,
      0
    ]
  }
}