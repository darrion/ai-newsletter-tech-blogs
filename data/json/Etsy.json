{
  "company": "Etsy",
  "title": "Etsy",
  "xmlUrl": "https://codeascraft.com/feed/",
  "htmlUrl": "https://codeascraft.com/",
  "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEtsy Engineering | Behind the Scenes - A Glimpse to Tax Calculations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrivacy Settings\n\n\n\n\nEtsy uses cookies and similar technologies to give you a better experience, enabling things like:\nbasic site functions\nensuring secure, safe transactions\nsecure account login\nremembering account, browser, and regional preferences\nremembering privacy and security settings\nanalysing site traffic and usage\npersonalized search, content, and recommendations\nhelping sellers understand their audience\nshowing relevant, targeted ads on and off Etsy\nDetailed information can be found in Etsy\u2019s Cookies & Similar Technologies Policy and our Privacy Policy.\n\n\n\nRequired Cookies & Technologies\nSome of the technologies we use are necessary for critical functions like security and site integrity, account authentication, security and privacy preferences, internal site usage and maintenance data, and to make the site work correctly for browsing and transactions.\n\n\n\nAlways on\n\n\n\n\n\nPersonalized Advertising\nTo enable personalized advertising (like interest-based ads), we may share your data with our marketing and advertising partners using cookies and other technologies. Those partners may have their own information they\u2019ve collected about you. Turning off the personalized advertising setting won\u2019t stop you from seeing Etsy ads, but it may make the ads you see less relevant or more repetitive.\n Personalized advertising may be considered a \u201csale\u201d or \u201csharing\u201d of information under California and other state privacy laws, and you may have a right to opt out. Turning off personalized advertising allows you to exercise your right to opt out. Learn more in our Privacy Policy., Help Center, and Cookies & Similar Technologies Policy.\n\n\n\n\n                        On\n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaved\n\n\n\nDone\n\n\n\n\n\n\n\n\n\n\n\n\n\nEtsy Icon> Code as Craft\n\n\n\n\n                Categories\n                \n\n\nEngineering Management\nConsumer Product Development\nHow We Work\nSearch, Ads, Recs\nWorking in the Cloud\nBuilding Globally\nEvolving Our Monorepo\nProgramming\nExperimentation\nCode Mosaic\n\n \nEvents\n\n\nCareers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        Categories \n\n\n\n\n\nEvents\n\n\nCareers\n\n\n\n\n\n\n\n Back\n                    \n\n\nEngineering Management\n\n\nConsumer Product Development\n\n\nHow We Work\n\n\nSearch, Ads, Recs\n\n\nWorking in the Cloud\n\n\nBuilding Globally\n\n\nEvolving Our Monorepo\n\n\nProgramming\n\n\nExperimentation\n\n\nCode Mosaic\n\n\n\n\n\n\n\n\n\n\nShare\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n                        Building Globally\n\n\n\n\n\n\nBehind the Scenes - A Glimpse to Tax Calculations \n\n\n\n\n\n\nBy Nancy Arnold\n\nJan 3, 2024\n\n\n\n\nIn the past, sellers were responsible for managing and fulfilling their own tax obligations. \nHowever, more and more jurisdictions are now requiring marketplaces such as Etsy to collect the tax from buyers and remit the tax to the relevant authorities. Etsy now plays an active role in collecting tax from buyers and remitting it all over the world. In this post, I will walk you through our tax calculation infrastructure and how we adapted to the ongoing increase in traffic and business needs over the years.\nThe tax calculation workflow\nWe determine tax whenever a buyer adds an item to their Etsy shopping cart. The tax determination is based on buyer and seller location and product category, and a set of tax rules and mappings. To handle the details of these calculations we partner with Vertex, and issue a call to their tax engine via the Quotation Request API to get the right amount to show in our buyer's cart. \nVertex ensures accurate and efficient tax management and continuously updates the tax rules and rates for jurisdictions around the world. The two main API calls we use are Quotation Request and DistributeTaxRequest SOAP calls.\nWhen the buyer proceeds to payment, an order is created, and we call back to Vertex with a DistributeTaxRequest sending the order information and tax details. We sync information with Vertex through the order fulfillment lifecycle. To keep things up to date in case an order is canceled or a refund needs to be issued later on, we inform the details of the cancellation and refunds to the tax engine via DistributeTaxRequest. This ensures that when Vertex generates tax reports for us they will be based on a complete record of all the relevant transactions. \nEtsy collects the tax from the buyers and remits that tax to the taxing authority, when required. \nGenerate tax details for reporting and audit purpose\nVertex comes with a variety of report formats out of the box, and gives us tools to define our own. When Etsy calls the Distribute Tax API, Vertex saves the information we pass to it as raw metadata in its tax journal database. A daily cron job in Vertex then moves this data to the transaction detail table, populating it with tax info. When reports and audit data are generated, we download these reports and import to Etsy\u2019s bigdata and the workflow completes.\n\n\n\nMapping the Etsy taxonomy to tax categories\nEtsy maintains product categories to help our buyers find exactly the items they're looking for. \nTo determine whether transactions are taxed or exempt it's not enough to know item prices and buyer locations: we have to map our product categories to Vertex's rule drivers. That was an effort involving not just engineering but also our tax and analytics teams, and with the wide range of Etsy taxonomy categories it was no small task.\nHandling increased API traffic\nCoping with the continuous increase in traffic and maintaining the best checkout experience without delays has been a challenge all the time. Out of the different upgrades we did, the most important ones were to switch to multiple instances for vertex calls and shadowing.\nMultiple Instance upgrade\nIn our initial integration, we were using the same vertex instance for Quotation and Distribute calls. And the same instance was responsible for generating the reports. This report generation started to affect our checkout experience. \nReports are generally used by our tax team and they run them on a regular basis. But on top of that, we also run daily reports to feed the data captured by Vertex back into our own system for analytics purposes.\nWe solved this by routing the quotation calls to one instance and then distributing them to the other. This helped in maintaining a clear separation of functionalities, and avoided interference between the two processes. We had to align the configurations between the instances as well. \nSplitting up the quotation and distribution calls opened up the door to horizontal scaling, now we can add as many instances of each type and load balance the requests between instances. \nEg: When a request type lists multiple instances, we load balance between the instances by using the cart_id for quotations and receipt_ids for distributes I.e. cart_id % quotation_instance_count\n\n\n\n\n\n\nShadow logging\nShadow logging the requests helped us to simulate the stress on Vertex and monitor the checkout experience. We used this technique multiple times  in the past.\nWhenever we had situations like, for example, adding five hundred thousand more listings whose taxes would be passed through the Vertex engine, we were concerned that the increase in traffic might impact buyer experience. To ensure it wouldn't, we tested for a period of time by slowly ramping shadow requests to Vertex: \"Shadow requests\" are test requests that we send to Vertex from orders, but without applying the calculated tax details to buyers' carts. This will simulate the load on vertex and we can monitor the cart checkout experience. \nOnce we have done shadowing and seen how well Vertex handled the increased traffic, we are confident that releasing the features ensures it would not have any performance implications.\nConclusion\nGiven the volume of increasing traffic and the data involved, we will have to keep improving our design to support those. We've also had to address analytics, reporting, configuration sync and many more in designing the system, but we'll leave that story for next time.\n\n\n\n\n\n\nCategory\n\n\n\n\n\n                        Building Globally\n\n\n\n\n\n\n\nShare\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n    Sign up for Code as Craft Updates\n    \n    \n\n\n\n\n\n        Subscribe\n    \n\nRecent Articles\n\n\n\n\n\n\n\n\n\n\nBy Pedro Michel\n\nThe AR Measuring Box: Etsy's answer to Big Tape Measure\nA little while ago, Etsy introduced a new feature in its iOS app that could place Etsy sellers' artwork on a user's wall using...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Pedro Michel\n\nThe AR Measuring Box: Etsy's answer to Big Tape Measure\nRead more\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Kyle Gallatin\n\nThe So-fine Real-time ML Paradigm\nIntroduction\nEach year, Etsy hosts an event known as  \u201cCodeMosaic\u201d - an internal hackathon in which Etsy admin propose and...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Kyle Gallatin\n\nThe So-fine Real-time ML Paradigm\nRead more\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Alaa Awad\n\nLeveraging Real-Time User Actions to Personalize Etsy Ads\nIntroduction\nPersonalization is vital to connect our unique marketplace to the right buyer at the right time. Etsy has recently...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Alaa Awad\n\nLeveraging Real-Time User Actions to Personalize Etsy Ads\nRead more\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecommended Posts\n\n\n\n\n\n\n\n\n\n\n\n\nBy Marco Gaspari\n\nMaking The Indian Rupee Work For Humans and Databases\nAs a global marketplace, Etsy offers support for a few dozen international currencies. Recently we decided to add the Indian rupee...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Marco Gaspari\n\nMaking The Indian Rupee Work For Humans and Databases\nRead more\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Danielle Grenier\n\nPlurals at Etsy\nPlurals at Etsy\nIf you\u2019ve ever been shopping online and encountered a message like \u201c1 items added to cart\u201d or even \u201c1...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Danielle Grenier\n\nPlurals at Etsy\nRead more\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Danielle Grenier\n\nHow Etsy Localizes Addresses\nImagine you\u2019re browsing the web from your overpriced California apartment one day and you find a neat new website with some...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy Danielle Grenier\n\nHow Etsy Localizes Addresses\nRead more\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Get updates from Code as Craft in your inbox\n    \n    \n\n\n\n\n        Subscribe\n    \n\n\n\n\n\n\n\nCopyright 2024 Etsy Code as Craft\n\nRSS\nTwitter\nCareers at Etsy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "Behind the Scenes - A Glimpse to Tax Calculations",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://www.etsy.com/codeascraft/rss",
      "value": "Behind the Scenes - A Glimpse to Tax Calculations"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://www.etsy.com/codeascraft/behind-the-scenes---a-glimpse-to-tax-calculations?utm_source=OpenGraph&utm_medium=PageTools&utm_campaign=Share"
      }
    ],
    "link": "https://www.etsy.com/codeascraft/behind-the-scenes---a-glimpse-to-tax-calculations?utm_source=OpenGraph&utm_medium=PageTools&utm_campaign=Share",
    "authors": [
      {
        "name": "Nancy Arnold"
      }
    ],
    "author": "Nancy Arnold",
    "author_detail": {
      "name": "Nancy Arnold"
    },
    "published": "Wed, 3 Jan 2024 11:12:58 -0500",
    "published_parsed": [
      2024,
      1,
      3,
      16,
      12,
      58,
      2,
      3,
      0
    ],
    "id": "https://www.etsy.com/codeascraft/behind-the-scenes---a-glimpse-to-tax-calculations?utm_source=OpenGraph&utm_medium=PageTools&utm_campaign=Share",
    "guidislink": false,
    "summary": "<p>In the past, sellers were responsible for managing and fulfilling their own tax obligations. \nHowever, more and more jurisdictions are now requiring marketplaces such as Etsy to collect the tax from buyers and remit the tax to the relevant authorities. Etsy now plays an active role in collecting tax from buyers and remitting it all over the world. In this post, I will walk you through our tax calculation infrastructure and how we adapted to the ongoing increase in traffic and business needs over the years.</p>\n<p><strong>The tax calculation workflow</strong></p>\n<p>We determine tax whenever a buyer adds an item to their Etsy shopping cart. The tax determination is based on buyer and seller location and product category, and a set of tax rules and mappings. To handle the details of these calculations we partner with Vertex, and issue a call to their <a href=\"https://www.vertexinc.com/\">tax engine</a> via the Quotation Request API to get the right amount to show in our buyer's cart. </p>\n<p>Vertex ensures accurate and efficient tax management and continuously updates the tax rules and rates for jurisdictions around the world. The two main API calls we use are Quotation Request and DistributeTaxRequest SOAP calls.</p>\n<p>When the buyer proceeds to payment, an order is created, and we call back to Vertex with a DistributeTaxRequest sending the order information and tax details. We sync information with Vertex through the order fulfillment lifecycle. To keep things up to date in case an order is canceled or a refund needs to be issued later on, we inform the details of the cancellation and refunds to the tax engine via DistributeTaxRequest. This ensures that when Vertex generates tax reports for us they will be based on a complete record of all the relevant transactions. \nEtsy collects the tax from the buyers and remits that tax to the taxing authority, when required. </p>\n<p><strong>Generate tax details for reporting and audit purpose</strong></p>\n<p>Vertex comes with a variety of report formats out of the box, and gives us tools to define our own. When Etsy calls the Distribute Tax API, Vertex saves the information we pass to it as raw metadata in its tax journal database. A daily cron job in Vertex then moves this data to the transaction detail table, populating it with tax info. When reports and audit data are generated, we download these reports and import to Etsy\u2019s bigdata and the workflow completes.</p>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/b7e136/5660475277/inv_fullxfull.5660475277_6aqobaes.jpg?version=0\" />\n</figure>\n<p><strong>Mapping the Etsy taxonomy to tax categories</strong></p>\n<p>Etsy maintains product categories to help our buyers find exactly the items they're looking for. </p>\n<p>To determine whether transactions are taxed or exempt it's not enough to know item prices and buyer locations: we have to map our product categories to Vertex's rule drivers. That was an effort involving not just engineering but also our tax and analytics teams, and with the wide range of Etsy taxonomy categories it was no small task.</p>\n<p><strong>Handling increased API traffic</strong></p>\n<p>Coping with the continuous increase in traffic and maintaining the best checkout experience without delays has been a challenge all the time. Out of the different upgrades we did, the most important ones were to switch to multiple instances for vertex calls and shadowing.</p>\n<p><strong>Multiple Instance upgrade</strong></p>\n<p>In our initial integration, we were using the same vertex instance for Quotation and Distribute calls. And the same instance was responsible for generating the reports. This report generation started to affect our checkout experience. </p>\n<p>Reports are generally used by our tax team and they run them on a regular basis. But on top of that, we also run daily reports to feed the data captured by Vertex back into our own system for analytics purposes.</p>\n<p>We solved this by routing the quotation calls to one instance and then distributing them to the other. This helped in maintaining a clear separation of functionalities, and avoided interference between the two processes. We had to align the configurations between the instances as well. \nSplitting up the quotation and distribution calls opened up the door to horizontal scaling, now we can add as many instances of each type and load balance the requests between instances. </p>\n<p>Eg: When a request type lists multiple instances, we load balance between the instances by using the cart_id for quotations and receipt_ids for distributes I.e. cart_id % quotation_instance_count</p>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/55e80d/5612390760/inv_fullxfull.5612390760_2x0ox160.jpg?version=0\" />\n</figure>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/54571d/5660478985/inv_fullxfull.5660478985_h59bbdge.jpg?version=0\" />\n</figure>\n<p><strong>Shadow logging</strong></p>\n<p>Shadow logging the requests helped us to simulate the stress on Vertex and monitor the checkout experience. We used this technique multiple times  in the past.</p>\n<p>Whenever we had situations like, for example, adding five hundred thousand more listings whose taxes would be passed through the Vertex engine, we were concerned that the increase in traffic might impact buyer experience. To ensure it wouldn't, we tested for a period of time by slowly ramping shadow requests to Vertex: \"Shadow requests\" are test requests that we send to Vertex from orders, but without applying the calculated tax details to buyers' carts. This will simulate the load on vertex and we can monitor the cart checkout experience. </p>\n<p>Once we have done shadowing and seen how well Vertex handled the increased traffic, we are confident that releasing the features ensures it would not have any performance implications.</p>\n<p><strong>Conclusion</strong></p>\n<p>Given the volume of increasing traffic and the data involved, we will have to keep improving our design to support those. We've also had to address analytics, reporting, configuration sync and many more in designing the system, but we'll leave that story for next time.</p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://www.etsy.com/codeascraft/rss",
      "value": "<p>In the past, sellers were responsible for managing and fulfilling their own tax obligations. \nHowever, more and more jurisdictions are now requiring marketplaces such as Etsy to collect the tax from buyers and remit the tax to the relevant authorities. Etsy now plays an active role in collecting tax from buyers and remitting it all over the world. In this post, I will walk you through our tax calculation infrastructure and how we adapted to the ongoing increase in traffic and business needs over the years.</p>\n<p><strong>The tax calculation workflow</strong></p>\n<p>We determine tax whenever a buyer adds an item to their Etsy shopping cart. The tax determination is based on buyer and seller location and product category, and a set of tax rules and mappings. To handle the details of these calculations we partner with Vertex, and issue a call to their <a href=\"https://www.vertexinc.com/\">tax engine</a> via the Quotation Request API to get the right amount to show in our buyer's cart. </p>\n<p>Vertex ensures accurate and efficient tax management and continuously updates the tax rules and rates for jurisdictions around the world. The two main API calls we use are Quotation Request and DistributeTaxRequest SOAP calls.</p>\n<p>When the buyer proceeds to payment, an order is created, and we call back to Vertex with a DistributeTaxRequest sending the order information and tax details. We sync information with Vertex through the order fulfillment lifecycle. To keep things up to date in case an order is canceled or a refund needs to be issued later on, we inform the details of the cancellation and refunds to the tax engine via DistributeTaxRequest. This ensures that when Vertex generates tax reports for us they will be based on a complete record of all the relevant transactions. \nEtsy collects the tax from the buyers and remits that tax to the taxing authority, when required. </p>\n<p><strong>Generate tax details for reporting and audit purpose</strong></p>\n<p>Vertex comes with a variety of report formats out of the box, and gives us tools to define our own. When Etsy calls the Distribute Tax API, Vertex saves the information we pass to it as raw metadata in its tax journal database. A daily cron job in Vertex then moves this data to the transaction detail table, populating it with tax info. When reports and audit data are generated, we download these reports and import to Etsy\u2019s bigdata and the workflow completes.</p>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/b7e136/5660475277/inv_fullxfull.5660475277_6aqobaes.jpg?version=0\" />\n</figure>\n<p><strong>Mapping the Etsy taxonomy to tax categories</strong></p>\n<p>Etsy maintains product categories to help our buyers find exactly the items they're looking for. </p>\n<p>To determine whether transactions are taxed or exempt it's not enough to know item prices and buyer locations: we have to map our product categories to Vertex's rule drivers. That was an effort involving not just engineering but also our tax and analytics teams, and with the wide range of Etsy taxonomy categories it was no small task.</p>\n<p><strong>Handling increased API traffic</strong></p>\n<p>Coping with the continuous increase in traffic and maintaining the best checkout experience without delays has been a challenge all the time. Out of the different upgrades we did, the most important ones were to switch to multiple instances for vertex calls and shadowing.</p>\n<p><strong>Multiple Instance upgrade</strong></p>\n<p>In our initial integration, we were using the same vertex instance for Quotation and Distribute calls. And the same instance was responsible for generating the reports. This report generation started to affect our checkout experience. </p>\n<p>Reports are generally used by our tax team and they run them on a regular basis. But on top of that, we also run daily reports to feed the data captured by Vertex back into our own system for analytics purposes.</p>\n<p>We solved this by routing the quotation calls to one instance and then distributing them to the other. This helped in maintaining a clear separation of functionalities, and avoided interference between the two processes. We had to align the configurations between the instances as well. \nSplitting up the quotation and distribution calls opened up the door to horizontal scaling, now we can add as many instances of each type and load balance the requests between instances. </p>\n<p>Eg: When a request type lists multiple instances, we load balance between the instances by using the cart_id for quotations and receipt_ids for distributes I.e. cart_id % quotation_instance_count</p>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/55e80d/5612390760/inv_fullxfull.5612390760_2x0ox160.jpg?version=0\" />\n</figure>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/54571d/5660478985/inv_fullxfull.5660478985_h59bbdge.jpg?version=0\" />\n</figure>\n<p><strong>Shadow logging</strong></p>\n<p>Shadow logging the requests helped us to simulate the stress on Vertex and monitor the checkout experience. We used this technique multiple times  in the past.</p>\n<p>Whenever we had situations like, for example, adding five hundred thousand more listings whose taxes would be passed through the Vertex engine, we were concerned that the increase in traffic might impact buyer experience. To ensure it wouldn't, we tested for a period of time by slowly ramping shadow requests to Vertex: \"Shadow requests\" are test requests that we send to Vertex from orders, but without applying the calculated tax details to buyers' carts. This will simulate the load on vertex and we can monitor the cart checkout experience. </p>\n<p>Once we have done shadowing and seen how well Vertex handled the increased traffic, we are confident that releasing the features ensures it would not have any performance implications.</p>\n<p><strong>Conclusion</strong></p>\n<p>Given the volume of increasing traffic and the data involved, we will have to keep improving our design to support those. We've also had to address analytics, reporting, configuration sync and many more in designing the system, but we'll leave that story for next time.</p>"
    },
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://www.etsy.com/codeascraft/rss",
        "value": "<p>In the past, sellers were responsible for managing and fulfilling their own tax obligations. \nHowever, more and more jurisdictions are now requiring marketplaces such as Etsy to collect the tax from buyers and remit the tax to the relevant authorities. Etsy now plays an active role in collecting tax from buyers and remitting it all over the world. In this post, I will walk you through our tax calculation infrastructure and how we adapted to the ongoing increase in traffic and business needs over the years.</p>\n<p><strong>The tax calculation workflow</strong></p>\n<p>We determine tax whenever a buyer adds an item to their Etsy shopping cart. The tax determination is based on buyer and seller location and product category, and a set of tax rules and mappings. To handle the details of these calculations we partner with Vertex, and issue a call to their <a href=\"https://www.vertexinc.com/\">tax engine</a> via the Quotation Request API to get the right amount to show in our buyer's cart. </p>\n<p>Vertex ensures accurate and efficient tax management and continuously updates the tax rules and rates for jurisdictions around the world. The two main API calls we use are Quotation Request and DistributeTaxRequest SOAP calls.</p>\n<p>When the buyer proceeds to payment, an order is created, and we call back to Vertex with a DistributeTaxRequest sending the order information and tax details. We sync information with Vertex through the order fulfillment lifecycle. To keep things up to date in case an order is canceled or a refund needs to be issued later on, we inform the details of the cancellation and refunds to the tax engine via DistributeTaxRequest. This ensures that when Vertex generates tax reports for us they will be based on a complete record of all the relevant transactions. \nEtsy collects the tax from the buyers and remits that tax to the taxing authority, when required. </p>\n<p><strong>Generate tax details for reporting and audit purpose</strong></p>\n<p>Vertex comes with a variety of report formats out of the box, and gives us tools to define our own. When Etsy calls the Distribute Tax API, Vertex saves the information we pass to it as raw metadata in its tax journal database. A daily cron job in Vertex then moves this data to the transaction detail table, populating it with tax info. When reports and audit data are generated, we download these reports and import to Etsy\u2019s bigdata and the workflow completes.</p>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/b7e136/5660475277/inv_fullxfull.5660475277_6aqobaes.jpg?version=0\" />\n</figure>\n<p><strong>Mapping the Etsy taxonomy to tax categories</strong></p>\n<p>Etsy maintains product categories to help our buyers find exactly the items they're looking for. </p>\n<p>To determine whether transactions are taxed or exempt it's not enough to know item prices and buyer locations: we have to map our product categories to Vertex's rule drivers. That was an effort involving not just engineering but also our tax and analytics teams, and with the wide range of Etsy taxonomy categories it was no small task.</p>\n<p><strong>Handling increased API traffic</strong></p>\n<p>Coping with the continuous increase in traffic and maintaining the best checkout experience without delays has been a challenge all the time. Out of the different upgrades we did, the most important ones were to switch to multiple instances for vertex calls and shadowing.</p>\n<p><strong>Multiple Instance upgrade</strong></p>\n<p>In our initial integration, we were using the same vertex instance for Quotation and Distribute calls. And the same instance was responsible for generating the reports. This report generation started to affect our checkout experience. </p>\n<p>Reports are generally used by our tax team and they run them on a regular basis. But on top of that, we also run daily reports to feed the data captured by Vertex back into our own system for analytics purposes.</p>\n<p>We solved this by routing the quotation calls to one instance and then distributing them to the other. This helped in maintaining a clear separation of functionalities, and avoided interference between the two processes. We had to align the configurations between the instances as well. \nSplitting up the quotation and distribution calls opened up the door to horizontal scaling, now we can add as many instances of each type and load balance the requests between instances. </p>\n<p>Eg: When a request type lists multiple instances, we load balance between the instances by using the cart_id for quotations and receipt_ids for distributes I.e. cart_id % quotation_instance_count</p>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/55e80d/5612390760/inv_fullxfull.5612390760_2x0ox160.jpg?version=0\" />\n</figure>\n<figure>\n<img alt=\"\" src=\"https://i.etsystatic.com/inv/54571d/5660478985/inv_fullxfull.5660478985_h59bbdge.jpg?version=0\" />\n</figure>\n<p><strong>Shadow logging</strong></p>\n<p>Shadow logging the requests helped us to simulate the stress on Vertex and monitor the checkout experience. We used this technique multiple times  in the past.</p>\n<p>Whenever we had situations like, for example, adding five hundred thousand more listings whose taxes would be passed through the Vertex engine, we were concerned that the increase in traffic might impact buyer experience. To ensure it wouldn't, we tested for a period of time by slowly ramping shadow requests to Vertex: \"Shadow requests\" are test requests that we send to Vertex from orders, but without applying the calculated tax details to buyers' carts. This will simulate the load on vertex and we can monitor the cart checkout experience. </p>\n<p>Once we have done shadowing and seen how well Vertex handled the increased traffic, we are confident that releasing the features ensures it would not have any performance implications.</p>\n<p><strong>Conclusion</strong></p>\n<p>Given the volume of increasing traffic and the data involved, we will have to keep improving our design to support those. We've also had to address analytics, reporting, configuration sync and many more in designing the system, but we'll leave that story for next time.</p>"
      }
    ]
  }
}