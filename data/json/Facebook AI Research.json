{
  "company": "Facebook AI Research",
  "title": "Facebook AI Research",
  "xmlUrl": "https://engineering.fb.com/feed/",
  "htmlUrl": "https://engineering.fb.com/category/ai-research/",
  "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLazy is the new fast: How Lazy Imports and Cinder accelerate machine learning at Meta - Engineering at Meta\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tSkip to content\t\n\n\n\n\n\n\n\n\n\n\nSearch this site\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Source \n\n\n\nOpen Source\nMeta Open Source\n\n\nPlatforms \n\n\n\nAndroid\niOS\nWeb\n\n\nInfrastructure Systems \n\n\n\nCore Infra\nData Infrastructure\nDevInfra\nProduction Engineering\nSecurity\nResearch Publications\n\n\nPhysical Infrastructure \n\n\n\nConnectivity\nData Center Engineering\nNetworking & Traffic\nResearch Publications\n\n\nVideo Engineering & AR/VR \n\n\n\nVideo Engineering\nVirtual Reality\nResearch Publications\n\n\nArtificial Intelligence \n\n\n\nML Applications\nAI Research\nResearch Publications\n\n\nWatch Videos\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\tPOSTED ON JANUARY 18, 2024 TO DevInfra, ML Applications\nLazy is the new fast: How Lazy Imports and Cinder accelerate machine learning at Meta \n\n\n \n\n\n\t\t\t\tBy Germ\u00e1n M\u00e9ndez Bravo \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAt Meta, the quest for faster model training has yielded an exciting milestone: the adoption of Lazy Imports and the Python Cinder runtime. \nThe outcome? Up to 40 percent time to first batch (TTFB) improvements, along with a 20 percent reduction in Jupyter kernel startup times. \nThis advancement facilitates swifter experimentation capabilities and elevates the ML developer experience (DevX).\n\nTime is of the essence in the realm of machine learning (ML) development. The milliseconds it takes for an ML model to transition from conceptualization to processing the initial training data can dramatically impact productivity and experimentation.\nAt Meta, we\u2019ve been able to significantly improve our model training times, as well as our overall developer experience (DevX) by adopting Lazy Imports and the Python Cinder runtime.\u00a0\nThe time to first batch challenge\nBatch processing has been a game changer in ML development. It handles large volumes of data in groups (or batches) and allows us to train models, optimize parameters, and perform inference more effectively and swiftly.\nBut ML training workloads are notorious for their sluggish starts. When we look to improve our batch processing speeds, time to first batch (TTFB) comes into focus. TTFB is the time elapsed from the moment you hit the \u201cstart\u201d button on your ML model training to the point when the first batch of data enters the model for processing. It is a critical metric that determines the speed at which an ML model goes from idle to learning. TTFB can vary widely due to factors like infrastructure overhead and scheduling delays. But reducing TTFB means reducing the development waiting times that can often feel like an eternity to engineers \u2013 waiting periods that can quickly amass as expensive resource wastage.\nIn the pursuit of faster TTFB, Meta set its sights on reducing this overhead, and Lazy Imports with Cinder emerged as a promising solution.\nThe magic of Lazy Imports\nPreviously, ML developers explored alternatives like the standard LazyLoader in importlib or lazy-import`, to defer explicit imports until necessary. While promising, these approaches are limited by their much narrower scope, and the need to manually select which dependencies will be lazily imported (often with suboptimal results). Using these approaches demands meticulous codebase curation and a fair amount of code refactoring.\nIn contrast, Cinder\u2019s Lazy Imports approach is a comprehensive and aggressive strategy that goes beyond the limitations of other libraries and delivers significant enhancements to the developer experience. Instead of painstakingly handpicking imports to become lazy, Cinder simplifies and accelerates the startup process by transparently deferring all imports as a default action, resulting in a much broader and more powerful deferral of imports until the exact moment they\u2019re needed. Once in place, this method ensures that developers no longer have to navigate the maze of selective import choices. With it, developers can bid farewell to the need of typing-only imports and the use of TYPE_CHECKING. It allows a simple from __future__ import annotations declaration at the beginning of a file to delay type evaluation, while Lazy Imports defer the actual import statements until required. The combined effect of these optimizations reduced costly runtime imports and further streamlined the development workflow.\nThe Lazy Imports solution delivers. Meta\u2019s initiative to enhance ML development has involved rolling out Cinder with Lazy Imports to several workloads, including our ML frameworks and Jupyter kernels, producing lightning-fast startup times, improved experimentation capabilities, reduced infrastructure overhead, and code that is a breeze to maintain. We\u2019re pleased to share that Meta\u2019s key AI workloads have experienced noteworthy improvements, with TTFB wins reaching up to 40 percent. Resulting time savings can vary from seconds to minutes per run.\nThese impressive results translate to a substantial boost in the efficiency of ML workflows, since they mean ML developers can get to the model training phase more swiftly.\nThe challenges of adopting Lazy Imports\nWhile Lazy Imports\u2019 approach significantly improved ML development, it was not all a bed of roses. We encountered several hurdles that tested our resolve and creativity.\nCompatibility\nOne of the primary challenges we grappled with was the compatibility of existing libraries with Lazy Imports. Libraries such as PyTorch, Numba, NumPy, and SciPy, among others, did not seamlessly align with the deferred module loading approach. These libraries often rely on import side effects and other patterns that do not play well with Lazy Imports. The order in which Python imports could change or be postponed, often led to side effects failing to register classes, functions, and operations correctly. This required painstaking troubleshooting to identify and address import cycles and discrepancies.\nBalancing performance versus dependability\nWe also had to strike the right balance between performance optimization and code dependability. While Lazy Imports significantly reduced TTFB and enhanced resource utilization, it also introduced a considerable semantic change in the way Python imports work that could make the codebase less intuitive. Achieving the perfect equilibrium was a constant consideration, and was ensured by limiting the impact of semantic changes to only the relevant parts that could be thoroughly tested.\nEnsuring seamless interaction with the existing codebase required meticulous testing and adjustments. The task was particularly intricate when dealing with complex, multifaceted ML models, where the implications of deferred imports needed to be thoroughly considered. We ultimately opted for enabling Lazy Imports only during the startup and preparation phases and disabling it before the first batch started.\nLearning curve\nAdopting new paradigms like Lazy Imports can introduce a learning curve for the development team. Training ML engineers, infra engineers, and system engineers to adapt to the new approach, understand its nuances, and implement it effectively is a process in itself.\nWhat is next for Lazy Imports at Meta?\nThe adoption of Lazy Imports and Cinder represented a meaningful enhancement in Meta\u2019s AI key workloads. It came with its share of ups and downs, but ultimately demonstrated that Lazy Imports can be a game changer in expediting ML development. The TTFB wins, DevX improvements, and reduced kernel startup times are all tangible results of this initiative. With Lazy Imports, Meta\u2019s ML developers are now equipped to work more efficiently, experiment more rapidly, and achieve results faster.\nWhile we\u2019ve achieved remarkable success with the adoption of Lazy Imports, our journey is far from over. So, what\u2019s next for us? Here\u2019s a glimpse into our future endeavors:\nStreamlining developer onboarding\nThe learning curve associated with Lazy Imports can be a challenge for newcomers. We\u2019re investing in educational resources and onboarding materials to make it easier for developers to embrace this game-changing approach.\u00a0\nEnhancing tooling\nDebugging code with deferred imports can be intricate. We\u2019re working on developing tools and techniques that simplify the debugging and troubleshooting process, ensuring that developers can quickly identify and resolve issues.\nCommunity collaboration\nThe power of Lazy Imports lies in its adaptability and versatility. We\u2019re eager to collaborate with the Python community \u2013 sharing insights, best practices, and addressing challenges together. Building a robust community that helps supporting paradigms and patterns that play well with Lazy Imports is one of our future priorities.\nShare this:Click to share on Facebook (Opens in new window)Click to share on X (Opens in new window)Click to share on LinkedIn (Opens in new window)Click to share on Hacker News (Opens in new window)Click to email a link to a friend (Opens in new window)\n\n\n\n\n\n\n\n\nRead More in DevInfra\n\n\t\t\tView All\t\t\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tDEC 19, 2023\t\t\t\t\n\n\n\n\n\n\t\t\t\t\tAI debugging at Meta with HawkEye\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tOCT 23, 2023\t\t\t\t\n\n\n\n\n\n\t\t\t\t\t5 Things you didn\u2019t know about Buck2\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tOCT 5, 2023\t\t\t\t\n\n\n\n\n\n\t\t\t\t\tMeta contributes new features to Python 3.12\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tSEP 7, 2023\t\t\t\t\n\n\n\n\n\n\t\t\t\t\tArcadia: An end-to-end AI system performance simulator\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tSEP 5, 2023\t\t\t\t\n\n\n\n\n\n\t\t\t\t\tWhat is it like to write code at Meta?\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tAUG 29, 2023\t\t\t\t\n\n\n\n\n\n\t\t\t\t\tScheduling Jupyter Notebooks at Meta\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nRelated Posts\n\n\n\n\n\nApr 26, 2022\nSQL Notebooks: Combining the power of Jupyter and SQL editors for data analytics\n\n\n\n\n\n\n\n\nOct 05, 2023\nMeta contributes new features to Python 3.12\n\n\n\n\n\n\n\n\nMay 02, 2022\nHow the Cinder JIT\u2019s function inliner helps us optimize Instagram\n\n\n\nRelated Positions\n\n\n                      \t\t\tApplied AI Research Scientist, 3D Computer Vision - XR Core-AI\n                      \t\t\n\n                      \t\t\tBURLINGAME, US\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer (Android)\n                      \t\t\n\n                      \t\t\tLONDON, UK\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer - Product (Technical Leadership)\n                      \t\t\n\n                      \t\t\tMENLO PARK, US\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer - Product (Technical Leadership)\n                      \t\t\n\n                      \t\t\tSEATTLE, US\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer - Product (Technical Leadership)\n                      \t\t\n\n                      \t\t\tREMOTE, US\n                      \t\t\n\n \n\n\n\t\t\t\tSee All Jobs\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAvailable Positions\n\n\n                      \t\t\tApplied AI Research Scientist, 3D Computer Vision - XR Core-AI\n                      \t\t\n\n                      \t\t\tBURLINGAME, US\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer (Android)\n                      \t\t\n\n                      \t\t\tLONDON, UK\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer - Product (Technical Leadership)\n                      \t\t\n\n                      \t\t\tMENLO PARK, US\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer - Product (Technical Leadership)\n                      \t\t\n\n                      \t\t\tSEATTLE, US\n                      \t\t\n\n\n\n\n                      \t\t\tSoftware Engineer - Product (Technical Leadership)\n                      \t\t\n\n                      \t\t\tREMOTE, US\n                      \t\t\n\n \n\n\n\t\t\t\tSee All Jobs\t\t\t\n\nStay Connected\n\n\n\n\r\n\t\t\t\tEngineering at Meta\t\r\n\t\t\t\n\n\r\n\t\t\t\tLike\r\n\t\t\t\n\n\n\n\n\n\n\r\n\t\t\t\tMeta Open Source\r\n\t\t\t\n\n\r\n\t\t\t\tFollow\r\n\t\t\t\t\n\n\n\n\n\n\n\r\n\t\t\t\tMeta Research\r\n\t\t\t\n\n\r\n\t\t\t\tLike\r\n\t\t\t\n\n\n\n\n\n\n\r\n\t\t\t\tMeta for Developers\r\n\t\t\t\n\n\r\n\t\t\t\tLike\r\n\t\t\t\n\n\n\n\n\n\n\r\n\t\t\t\tRSS\r\n\t\t\t\n\n\r\n\t\t\t\tSubscribe\r\n\t\t\t\n\n\n\nOpen Source\r\n\tMeta believes in building community through open source technology. Explore our latest projects in Artificial Intelligence, Data Infrastructure, Development Tools, Front End, Languages, Platforms, Security, Virtual Reality, and more.\r\n\n\n\n\n\r\n\t\t\tANDROID\r\n\t\t\n\n\n\n\r\n\t\t\tiOS\r\n\t\t\n\n\n\n\t\t\r\n\t\t\tWEB\r\n\t\t\n\n\n\n\r\n\t\t\tBACKEND\r\n\t\t\n\n\n\n\r\n\t\t\tHARDWARE\r\n\t\t\n\n\n\r\n\tLearn More\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Engineering at Meta is a technical news resource for engineers interested in how we solve large-scale technical challenges at Meta.\n\n \n\n\nHomeCompany InfoCareers \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00a9 2024 Meta\n\n\n\n\nTermsPrivacyCookiesHelp \n\n\n\n\n\n\n\n\n\n\n\n\nTo help personalize content, tailor and measure ads and provide a safer experience, we use cookies. By clicking or navigating the site, you agree to allow our collection of information on and off Facebook through cookies. Learn more, including about available controls: Cookie Policy\n\nAccept\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "latestPost": {
    "title": "Lazy is the new fast: How Lazy Imports and Cinder accelerate machine learning at Meta",
    "title_detail": {
      "type": "text/plain",
      "language": null,
      "base": "https://engineering.fb.com/feed/",
      "value": "Lazy is the new fast: How Lazy Imports and Cinder accelerate machine learning at Meta"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "https://engineering.fb.com/2024/01/18/developer-tools/lazy-imports-cinder-machine-learning-meta/"
      }
    ],
    "link": "https://engineering.fb.com/2024/01/18/developer-tools/lazy-imports-cinder-machine-learning-meta/",
    "authors": [
      {}
    ],
    "author": "",
    "published": "Thu, 18 Jan 2024 17:00:42 +0000",
    "published_parsed": [
      2024,
      1,
      18,
      17,
      0,
      42,
      3,
      18,
      0
    ],
    "tags": [
      {
        "term": "DevInfra",
        "scheme": null,
        "label": null
      },
      {
        "term": "ML Applications",
        "scheme": null,
        "label": null
      }
    ],
    "id": "https://engineering.fb.com/?p=20878",
    "guidislink": false,
    "summary": "<p>At Meta, the quest for faster model training has yielded an exciting milestone: the adoption of Lazy Imports and the Python Cinder runtime. The outcome? Up to 40 percent time to first batch (TTFB) improvements, along with a 20 percent reduction in Jupyter kernel startup times. This advancement facilitates swifter experimentation capabilities and elevates the [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/01/18/developer-tools/lazy-imports-cinder-machine-learning-meta/\">Read More...</a></p>\n<p>The post <a href=\"https://engineering.fb.com/2024/01/18/developer-tools/lazy-imports-cinder-machine-learning-meta/\" rel=\"nofollow\">Lazy is the new fast: How Lazy Imports and Cinder accelerate machine learning at Meta</a> appeared first on <a href=\"https://engineering.fb.com\" rel=\"nofollow\">Engineering at Meta</a>.</p>",
    "summary_detail": {
      "type": "text/html",
      "language": null,
      "base": "https://engineering.fb.com/feed/",
      "value": "<p>At Meta, the quest for faster model training has yielded an exciting milestone: the adoption of Lazy Imports and the Python Cinder runtime. The outcome? Up to 40 percent time to first batch (TTFB) improvements, along with a 20 percent reduction in Jupyter kernel startup times. This advancement facilitates swifter experimentation capabilities and elevates the [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/01/18/developer-tools/lazy-imports-cinder-machine-learning-meta/\">Read More...</a></p>\n<p>The post <a href=\"https://engineering.fb.com/2024/01/18/developer-tools/lazy-imports-cinder-machine-learning-meta/\" rel=\"nofollow\">Lazy is the new fast: How Lazy Imports and Cinder accelerate machine learning at Meta</a> appeared first on <a href=\"https://engineering.fb.com\" rel=\"nofollow\">Engineering at Meta</a>.</p>"
    },
    "content": [
      {
        "type": "text/html",
        "language": null,
        "base": "https://engineering.fb.com/feed/",
        "value": "<ul>\n<li><span style=\"font-weight: 400;\">At Meta, the quest for faster model training has yielded an exciting milestone: the adoption of Lazy Imports and the Python Cinder runtime. </span></li>\n<li><span style=\"font-weight: 400;\">The outcome? Up to 40 percent time to first batch (TTFB) improvements, along with a </span>20 percent<span style=\"font-weight: 400;\"> reduction in Jupyter kernel startup times. </span></li>\n<li><span style=\"font-weight: 400;\">This advancement facilitates swifter experimentation capabilities and elevates the ML developer experience (DevX).</span></li>\n</ul>\n<p><span style=\"font-weight: 400;\">Time is of the essence in the realm of machine learning (ML) development. The milliseconds it takes for an ML model to transition from conceptualization to processing the initial training data can dramatically impact productivity and experimentation.</span></p>\n<p><span style=\"font-weight: 400;\">At Meta, we\u2019ve been able to significantly improve our model training times, as well as our overall developer experience (DevX) by adopting </span><a href=\"https://peps.python.org/pep-0690/\" rel=\"noopener\" target=\"_blank\"><span style=\"font-weight: 400;\">Lazy Imports</span></a><span style=\"font-weight: 400;\"> and the </span><a href=\"https://github.com/facebookincubator/cinder\" rel=\"noopener\" target=\"_blank\"><span style=\"font-weight: 400;\">Python Cinder runtime</span></a><span style=\"font-weight: 400;\">.\u00a0</span></p>\n<h2><span style=\"font-weight: 400;\">The time to first batch challenge</span></h2>\n<p><span style=\"font-weight: 400;\">Batch processing has been a game changer in ML development. It handles large volumes of data in groups (or batches) and allows us to train models, optimize parameters, and perform inference more effectively and swiftly.</span></p>\n<p><span style=\"font-weight: 400;\">But ML training workloads are notorious for their sluggish starts. When we look to improve our batch processing speeds, time to first batch (TTFB) comes into focus. TTFB is the time elapsed from the moment you hit the \u201cstart\u201d button on your ML model training to the point when the first batch of data enters the model for processing. It is a critical metric that determines the speed at which an ML model goes from idle to learning. TTFB can vary widely due to factors like infrastructure overhead and scheduling delays. But reducing TTFB means reducing the development waiting times that can often feel like an eternity to engineers \u2013 waiting periods that can quickly amass as expensive resource wastage.</span></p>\n<p><span style=\"font-weight: 400;\">In the pursuit of faster TTFB, Meta set its sights on reducing this overhead, and Lazy Imports with Cinder emerged as a promising solution.</span></p>\n<h2><span style=\"font-weight: 400;\">The magic of Lazy Imports</span></h2>\n<p><span style=\"font-weight: 400;\">Previously, ML developers explored alternatives like the standard </span><span style=\"font-weight: 400; font-family: 'courier new', courier;\">LazyLoader</span><span style=\"font-weight: 400;\"> in </span><span style=\"font-weight: 400; font-family: 'courier new', courier;\">importlib</span><span style=\"font-weight: 400;\"> or </span><span style=\"font-weight: 400;\">lazy-import</span><span style=\"font-weight: 400;\">`, to defer explicit imports until necessary. While promising, these approaches are limited by their much narrower scope, and the need to manually select which dependencies will be lazily imported (often with suboptimal results). Using these approaches demands meticulous codebase curation and a fair amount of code refactoring.</span></p>\n<p><span style=\"font-weight: 400;\">In contrast, </span><a href=\"https://developers.facebook.com/blog/post/2022/06/15/python-lazy-imports-with-cinder/\"><span style=\"font-weight: 400;\">Cinder&#8217;s Lazy Imports</span></a><span style=\"font-weight: 400;\"> approach is a comprehensive and aggressive strategy that goes beyond the limitations of other libraries and delivers significant enhancements to the developer experience. Instead of painstakingly handpicking imports to become lazy, Cinder simplifies and accelerates the startup process by transparently deferring all imports as a default action, resulting in a much broader and more powerful deferral of imports until the exact moment they&#8217;re needed. Once in place, this method ensures that developers no longer have to navigate the maze of selective import choices. With it, developers can bid farewell to the need of typing-only imports and the use of </span><span style=\"font-weight: 400; font-family: 'courier new', courier;\">TYPE_CHECKING</span><span style=\"font-weight: 400;\">. It allows a simple </span><span style=\"font-weight: 400;\"><span style=\"font-family: 'courier new', courier;\">from __future__ import</span> annotations</span><span style=\"font-weight: 400;\"> declaration at the beginning of a file to delay type evaluation, while Lazy Imports defer the actual import statements until required. The combined effect of these optimizations reduced costly runtime imports and further streamlined the development workflow.</span></p>\n<p><span style=\"font-weight: 400;\">The Lazy Imports solution delivers. Meta&#8217;s initiative to enhance ML development has involved rolling out Cinder with Lazy Imports to several workloads, including our ML frameworks and Jupyter kernels, producing lightning-fast startup times, improved experimentation capabilities, reduced infrastructure overhead, and code that is a breeze to maintain. We&#8217;re pleased to share that Meta&#8217;s key AI workloads have experienced noteworthy improvements, with TTFB wins reaching up to 40 percent. Resulting time savings can vary from seconds to minutes per run.</span></p>\n<p><span style=\"font-weight: 400;\">These impressive results translate to a substantial boost in the efficiency of ML workflows, since they mean ML developers can get to the model training phase more swiftly.</span></p>\n<h2><span style=\"font-weight: 400;\">The challenges of adopting Lazy Imports</span></h2>\n<p><span style=\"font-weight: 400;\">While Lazy Imports&#8217; approach significantly improved ML development, it was not all a bed of roses. We encountered several hurdles that tested our resolve and creativity.</span></p>\n<h3><span style=\"font-weight: 400;\">Compatibility</span></h3>\n<p><span style=\"font-weight: 400;\">One of the primary challenges we grappled with was the compatibility of existing libraries with Lazy Imports. Libraries such as PyTorch, Numba, NumPy, and SciPy, among others, did not seamlessly align with the deferred module loading approach. These libraries often rely on import side effects and other patterns that do not play well with Lazy Imports. The order in which Python imports could change or be postponed, often led to side effects failing to register classes, functions, and operations correctly. This required painstaking troubleshooting to identify and address import cycles and discrepancies.</span></p>\n<h3><span style=\"font-weight: 400;\">Balancing performance versus dependability</span></h3>\n<p><span style=\"font-weight: 400;\">We also had to strike the right balance between performance optimization and code dependability. While Lazy Imports significantly reduced TTFB and enhanced resource utilization, it also introduced a considerable semantic change in the way Python imports work that could make the codebase less intuitive. Achieving the perfect equilibrium was a constant consideration, and was ensured by limiting the impact of semantic changes to only the relevant parts that could be thoroughly tested.</span></p>\n<p><span style=\"font-weight: 400;\">Ensuring seamless interaction with the existing codebase required meticulous testing and adjustments. The task was particularly intricate when dealing with complex, multifaceted ML models, where the implications of deferred imports needed to be thoroughly considered. We ultimately opted for enabling Lazy Imports only during the startup and preparation phases and disabling it before the first batch started.</span></p>\n<h3><span style=\"font-weight: 400;\">Learning curve</span></h3>\n<p><span style=\"font-weight: 400;\">Adopting new paradigms like Lazy Imports can introduce a learning curve for the development team. Training ML engineers, infra engineers, and system engineers to adapt to the new approach, understand its nuances, and implement it effectively is a process in itself.</span></p>\n<h2><span style=\"font-weight: 400;\">What is next for Lazy Imports at Meta?</span></h2>\n<p><span style=\"font-weight: 400;\">The adoption of Lazy Imports and Cinder represented a meaningful enhancement in Meta&#8217;s AI key workloads. It came with its share of ups and downs, but ultimately demonstrated that Lazy Imports can be a game changer in expediting ML development. The TTFB wins, DevX improvements, and reduced kernel startup times are all tangible results of this initiative. With Lazy Imports, Meta&#8217;s ML developers are now equipped to work more efficiently, experiment more rapidly, and achieve results faster.</span></p>\n<p><span style=\"font-weight: 400;\">While we&#8217;ve achieved remarkable success with the adoption of Lazy Imports, our journey is far from over. So, what&#8217;s next for us? Here&#8217;s a glimpse into our future endeavors:</span></p>\n<h3><span style=\"font-weight: 400;\">Streamlining developer onboarding</span></h3>\n<p><span style=\"font-weight: 400;\">The learning curve associated with Lazy Imports can be a challenge for newcomers. We&#8217;re investing in educational resources and onboarding materials to make it easier for developers to embrace this game-changing approach.\u00a0</span></p>\n<h3><span style=\"font-weight: 400;\">Enhancing tooling</span></h3>\n<p><span style=\"font-weight: 400;\">Debugging code with deferred imports can be intricate. We&#8217;re working on developing tools and techniques that simplify the debugging and troubleshooting process, ensuring that developers can quickly identify and resolve issues.</span></p>\n<h3><span style=\"font-weight: 400;\">Community collaboration</span></h3>\n<p><span style=\"font-weight: 400;\">The power of Lazy Imports lies in its adaptability and versatility. We&#8217;re eager to collaborate with the Python community \u2013 sharing insights, best practices, and addressing challenges together. Building a robust community that helps supporting paradigms and patterns that play well with Lazy Imports is one of our future priorities.</span></p>\n<p>The post <a href=\"https://engineering.fb.com/2024/01/18/developer-tools/lazy-imports-cinder-machine-learning-meta/\" rel=\"nofollow\">Lazy is the new fast: How Lazy Imports and Cinder accelerate machine learning at Meta</a> appeared first on <a href=\"https://engineering.fb.com\" rel=\"nofollow\">Engineering at Meta</a>.</p>"
      }
    ],
    "post-id": "20878"
  }
}